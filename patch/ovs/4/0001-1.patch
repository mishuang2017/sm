From 7d14239e7160b94080052505533df634bb83b69f Mon Sep 17 00:00:00 2001
From: Chris Mi <chrism@mellanox.com>
Date: Tue, 10 Dec 2019 14:34:07 +0800
Subject: [PATCH 1/9] 1

---
 net/openvswitch/datapath.c     | 10 ++++-----
 net/openvswitch/datapath.h     |  2 +-
 net/openvswitch/vport-netdev.c | 47 ++++++++++++++++++++++++++++++++++++------
 net/openvswitch/vport.c        |  3 +--
 4 files changed, 48 insertions(+), 14 deletions(-)

diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index 0f5ce77460d4..dbe7ca08e23f 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -226,7 +226,7 @@ void ovs_dp_detach_port(struct vport *p)
 }
 
 /* Must be called with rcu_read_lock. */
-void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
+int ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 {
 	const struct vport *p = OVS_CB(skb)->input_vport;
 	struct datapath *dp = p->dp;
@@ -235,6 +235,7 @@ void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 	struct dp_stats_percpu *stats;
 	u64 *stats_counter;
 	u32 n_mask_hit;
+	int error = 0;
 
 	stats = this_cpu_ptr(dp->stats_percpu);
 
@@ -242,16 +243,13 @@ void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 	flow = ovs_flow_tbl_lookup_stats(&dp->table, key, &n_mask_hit);
 	if (unlikely(!flow)) {
 		struct dp_upcall_info upcall;
-		int error;
 
 		memset(&upcall, 0, sizeof(upcall));
 		upcall.cmd = OVS_PACKET_CMD_MISS;
 		upcall.portid = ovs_vport_find_upcall_portid(p, skb);
 		upcall.mru = OVS_CB(skb)->mru;
 		error = ovs_dp_upcall(dp, skb, key, &upcall, 0);
-		if (unlikely(error))
-			kfree_skb(skb);
-		else
+		if (likely(!error))
 			consume_skb(skb);
 		stats_counter = &stats->n_missed;
 		goto out;
@@ -269,6 +267,8 @@ void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 	(*stats_counter)++;
 	stats->n_mask_hit += n_mask_hit;
 	u64_stats_update_end(&stats->syncp);
+
+	return error;
 }
 
 int ovs_dp_upcall(struct datapath *dp, struct sk_buff *skb,
diff --git a/net/openvswitch/datapath.h b/net/openvswitch/datapath.h
index 2c5589efb63b..c5f7be8f749f 100644
--- a/net/openvswitch/datapath.h
+++ b/net/openvswitch/datapath.h
@@ -232,7 +232,7 @@ static inline struct datapath *get_dp(struct net *net, int dp_ifindex)
 extern struct notifier_block ovs_dp_device_notifier;
 extern struct genl_family dp_vport_genl_family;
 
-void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key);
+int ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key);
 void ovs_dp_detach_port(struct vport *);
 int ovs_dp_upcall(struct datapath *, struct sk_buff *,
 		  const struct sw_flow_key *, const struct dp_upcall_info *,
diff --git a/net/openvswitch/vport-netdev.c b/net/openvswitch/vport-netdev.c
index 2e5e7a41d8ef..d25de4d4abcb 100644
--- a/net/openvswitch/vport-netdev.c
+++ b/net/openvswitch/vport-netdev.c
@@ -38,10 +38,29 @@
 
 static struct vport_ops ovs_netdev_vport_ops;
 
+static void ovs_netdev_down_event(struct work_struct *dummy);
+static DECLARE_DELAYED_WORK(ovs_netdev_down_work, ovs_netdev_down_event);
+
+static void ovs_netdev_down_event(struct work_struct *dummy)
+{
+	struct net_device *dev;
+
+	rtnl_lock();
+	rcu_read_lock();
+	for_each_netdev_rcu(&init_net, dev) {
+		if (dev->priv_flags & IFF_OPENVSWITCH &&
+		    dev->flags & IFF_UP)
+			dev_change_flags(dev, dev->flags & ~IFF_UP);
+	}
+	rcu_read_unlock();
+	rtnl_unlock();
+}
+
 /* Must be called with rcu_read_lock. */
-static void netdev_port_receive(struct sk_buff *skb)
+static int netdev_port_receive(struct sk_buff *skb)
 {
 	struct vport *vport;
+	int ret;
 
 	vport = ovs_netdev_get_vport(skb->dev);
 	if (unlikely(!vport))
@@ -55,28 +74,44 @@ static void netdev_port_receive(struct sk_buff *skb)
 	 */
 	skb = skb_share_check(skb, GFP_ATOMIC);
 	if (unlikely(!skb))
-		return;
+		return 0;
 
 	if (skb->dev->type == ARPHRD_ETHER) {
 		skb_push(skb, ETH_HLEN);
 		skb_postpush_rcsum(skb, skb->data, ETH_HLEN);
 	}
-	ovs_vport_receive(vport, skb, skb_tunnel_info(skb));
-	return;
+
+	ret = ovs_vport_receive(vport, skb, skb_tunnel_info(skb));
+
+	if (unlikely(ret == -ENOTCONN || ret == -ECONNREFUSED)) {
+		if (skb->dev->type == ARPHRD_ETHER) {
+			skb_pull(skb, ETH_HLEN);
+			skb->ip_summed = CHECKSUM_NONE;
+		}
+		mod_delayed_work(system_wq, &ovs_netdev_down_work, 0);
+	}
+
+	return ret;
 error:
 	kfree_skb(skb);
+
+	return 0;
 }
 
 /* Called with rcu_read_lock and bottom-halves disabled. */
 static rx_handler_result_t netdev_frame_hook(struct sk_buff **pskb)
 {
 	struct sk_buff *skb = *pskb;
+	int ret = 0;
 
 	if (unlikely(skb->pkt_type == PACKET_LOOPBACK))
 		return RX_HANDLER_PASS;
 
-	netdev_port_receive(skb);
-	return RX_HANDLER_CONSUMED;
+	ret = netdev_port_receive(skb);
+	if (ret == -ENOTCONN || ret == -ECONNREFUSED)
+		return RX_HANDLER_PASS;
+	else
+		return RX_HANDLER_CONSUMED;
 }
 
 static struct net_device *get_dpdev(const struct datapath *dp)
diff --git a/net/openvswitch/vport.c b/net/openvswitch/vport.c
index 72c40a5e5261..89e14b20b6df 100644
--- a/net/openvswitch/vport.c
+++ b/net/openvswitch/vport.c
@@ -466,8 +466,7 @@ int ovs_vport_receive(struct vport *vport, struct sk_buff *skb,
 		kfree_skb(skb);
 		return error;
 	}
-	ovs_dp_process_packet(skb, &key);
-	return 0;
+	return ovs_dp_process_packet(skb, &key);
 }
 
 static int packet_length(const struct sk_buff *skb,
-- 
2.14.4

