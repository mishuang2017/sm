From 30fe12da697a99dc9e6009c8fdf84914a845bcb1 Mon Sep 17 00:00:00 2001
From: Chris Mi <chrism@mellanox.com>
Date: Mon, 25 Nov 2019 16:31:33 +0800
Subject: [PATCH 2/3] netdev_frame_hook return failure when upcall failed

Change-Id: Ie759d289155f1849bb18ae7cfa21f3e5b2ec70c8
---
 net/openvswitch/datapath.c     | 15 +++++++++++----
 net/openvswitch/datapath.h     |  2 +-
 net/openvswitch/vport-netdev.c | 19 +++++++++++++------
 net/openvswitch/vport.c        |  3 +--
 4 files changed, 26 insertions(+), 13 deletions(-)

diff --git a/net/openvswitch/datapath.c b/net/openvswitch/datapath.c
index d01410e52097..657fb661280a 100644
--- a/net/openvswitch/datapath.c
+++ b/net/openvswitch/datapath.c
@@ -213,7 +213,7 @@ void ovs_dp_detach_port(struct vport *p)
 }
 
 /* Must be called with rcu_read_lock. */
-void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
+int ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 {
 	const struct vport *p = OVS_CB(skb)->input_vport;
 	struct datapath *dp = p->dp;
@@ -222,6 +222,7 @@ void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 	struct dp_stats_percpu *stats;
 	u64 *stats_counter;
 	u32 n_mask_hit;
+	int ret = 0;
 
 	stats = this_cpu_ptr(dp->stats_percpu);
 
@@ -236,10 +237,14 @@ void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 		upcall.portid = ovs_vport_find_upcall_portid(p, skb);
 		upcall.mru = OVS_CB(skb)->mru;
 		error = ovs_dp_upcall(dp, skb, key, &upcall, 0);
-		if (unlikely(error))
-			kfree_skb(skb);
-		else
+		if (unlikely(error)) {
+			pr_info("%s: ovs_dp_upcall failed: %d\n",
+				__func__, error);
+			ret = -1;
+/* 			kfree_skb(skb); */
+		} else {
 			consume_skb(skb);
+		}
 		stats_counter = &stats->n_missed;
 		goto out;
 	}
@@ -256,6 +261,8 @@ void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key)
 	(*stats_counter)++;
 	stats->n_mask_hit += n_mask_hit;
 	u64_stats_update_end(&stats->syncp);
+
+	return ret;
 }
 
 int ovs_dp_upcall(struct datapath *dp, struct sk_buff *skb,
diff --git a/net/openvswitch/datapath.h b/net/openvswitch/datapath.h
index 751d34accdf9..52dca88bbbf6 100644
--- a/net/openvswitch/datapath.h
+++ b/net/openvswitch/datapath.h
@@ -218,7 +218,7 @@ static inline struct datapath *get_dp(struct net *net, int dp_ifindex)
 extern struct notifier_block ovs_dp_device_notifier;
 extern struct genl_family dp_vport_genl_family;
 
-void ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key);
+int ovs_dp_process_packet(struct sk_buff *skb, struct sw_flow_key *key);
 void ovs_dp_detach_port(struct vport *);
 int ovs_dp_upcall(struct datapath *, struct sk_buff *,
 		  const struct sw_flow_key *, const struct dp_upcall_info *,
diff --git a/net/openvswitch/vport-netdev.c b/net/openvswitch/vport-netdev.c
index 57d6436e6f6a..d2fd37972587 100644
--- a/net/openvswitch/vport-netdev.c
+++ b/net/openvswitch/vport-netdev.c
@@ -26,9 +26,10 @@
 static struct vport_ops ovs_netdev_vport_ops;
 
 /* Must be called with rcu_read_lock. */
-static void netdev_port_receive(struct sk_buff *skb)
+static int netdev_port_receive(struct sk_buff *skb)
 {
 	struct vport *vport;
+	int ret = 0;
 
 	vport = ovs_netdev_get_vport(skb->dev);
 	if (unlikely(!vport))
@@ -42,28 +43,34 @@ static void netdev_port_receive(struct sk_buff *skb)
 	 */
 	skb = skb_share_check(skb, GFP_ATOMIC);
 	if (unlikely(!skb))
-		return;
+		return ret;
 
 	if (skb->dev->type == ARPHRD_ETHER) {
 		skb_push(skb, ETH_HLEN);
 		skb_postpush_rcsum(skb, skb->data, ETH_HLEN);
 	}
-	ovs_vport_receive(vport, skb, skb_tunnel_info(skb));
-	return;
+	ret = ovs_vport_receive(vport, skb, skb_tunnel_info(skb));
+	return ret;
 error:
 	kfree_skb(skb);
+
+	return ret;
 }
 
 /* Called with rcu_read_lock and bottom-halves disabled. */
 static rx_handler_result_t netdev_frame_hook(struct sk_buff **pskb)
 {
 	struct sk_buff *skb = *pskb;
+	int ret;
 
 	if (unlikely(skb->pkt_type == PACKET_LOOPBACK))
 		return RX_HANDLER_PASS;
 
-	netdev_port_receive(skb);
-	return RX_HANDLER_CONSUMED;
+	ret = netdev_port_receive(skb);
+	if (ret == -1)
+		return RX_HANDLER_UPCALL_FAIL;
+	else
+		return RX_HANDLER_CONSUMED;
 }
 
 static struct net_device *get_dpdev(const struct datapath *dp)
diff --git a/net/openvswitch/vport.c b/net/openvswitch/vport.c
index 3fc38d16c456..d12f59b38c34 100644
--- a/net/openvswitch/vport.c
+++ b/net/openvswitch/vport.c
@@ -445,8 +445,7 @@ int ovs_vport_receive(struct vport *vport, struct sk_buff *skb,
 		kfree_skb(skb);
 		return error;
 	}
-	ovs_dp_process_packet(skb, &key);
-	return 0;
+	return ovs_dp_process_packet(skb, &key);
 }
 
 static int packet_length(const struct sk_buff *skb,
-- 
2.20.1

