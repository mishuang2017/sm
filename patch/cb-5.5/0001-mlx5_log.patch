From 84240b8c9c9ee23448d6cda84feeba036dacce87 Mon Sep 17 00:00:00 2001
From: Chris Mi <chrism@mellanox.com>
Date: Mon, 6 Jan 2020 13:20:54 +0800
Subject: [PATCH] mlx5_log

Change-Id: I8d841c5b5991baa824d9447ee9ba767734a04233
---
 drivers/net/ethernet/mellanox/mlx5/core/main.c |  3 ++
 include/linux/slab.h                           |  4 ++
 mm/slub.c                                      | 56 ++++++++++++++++++++++++++
 3 files changed, 63 insertions(+)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/main.c b/drivers/net/ethernet/mellanox/mlx5/core/main.c
index cf7b8da0f010..795375f7b9d0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/main.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/main.c
@@ -1623,6 +1623,8 @@ static int __init init(void)
 	mlx5e_init();
 #endif
 
+	mlx5_buf_lock_init();
+
 	return 0;
 
 err_debug:
@@ -1637,6 +1639,7 @@ static void __exit cleanup(void)
 #endif
 	pci_unregister_driver(&mlx5_core_driver);
 	mlx5_unregister_debugfs();
+	mlx5_buf_lock_destroy();
 }
 
 module_init(init);
diff --git a/include/linux/slab.h b/include/linux/slab.h
index 877a95c6a2d2..0822d21833b5 100644
--- a/include/linux/slab.h
+++ b/include/linux/slab.h
@@ -670,6 +670,10 @@ static inline void *kzalloc(size_t size, gfp_t flags)
 	return kmalloc(size, flags | __GFP_ZERO);
 }
 
+void mlx5_log(char *fmt, ...);
+void mlx5_buf_lock_init(void);
+void mlx5_buf_lock_destroy(void);
+
 /**
  * kzalloc_node - allocate zeroed memory from a particular memory node.
  * @size: how many bytes of memory are required.
diff --git a/mm/slub.c b/mm/slub.c
index d11389710b12..b33b5344e6df 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -3013,6 +3013,62 @@ void ___cache_free(struct kmem_cache *cache, void *x, unsigned long addr)
 }
 #endif
 
+struct mutex mlx5_buf_lock;
+
+#define MLX5_LOG_BUF_LEN   (16*PAGE_SIZE)
+
+char __mlx5_log_buf[MLX5_LOG_BUF_LEN] __aligned(4);
+char *mlx5_log_buf = __mlx5_log_buf;
+u32 mlx5_log_buf_len = MLX5_LOG_BUF_LEN;
+
+u16 mlx5_log_next_seq = 0;
+u32 mlx5_log_next_idx = 0;
+
+void mlx5_log(char *fmt, ...)
+{
+	char va_buf[512] = {0};
+	char buf[512] = {0};
+	va_list argptr;
+	size_t len;
+	int cnt;
+
+	va_start(argptr, fmt);
+	cnt = vsnprintf(va_buf, 512, fmt, argptr);
+	va_end(argptr);
+	if (cnt > 500)
+		return;
+
+	snprintf(buf, 512, "%d: %ld: %s\n", mlx5_log_next_seq++, jiffies, va_buf);
+	len = strlen(buf);
+
+	if (len + mlx5_log_next_idx >= mlx5_log_buf_len) {
+		memset(mlx5_log_buf, 0, mlx5_log_buf_len - mlx5_log_next_idx - 1);
+		mlx5_log_next_idx = 0;
+		mlx5_log_buf = __mlx5_log_buf;
+	}
+
+	mutex_lock(&mlx5_buf_lock);
+	memcpy(mlx5_log_buf, buf, len);
+	mlx5_log_buf += len;
+	mlx5_log_next_idx += len;
+	mutex_unlock(&mlx5_buf_lock);
+}
+EXPORT_SYMBOL(mlx5_log);
+
+void mlx5_buf_lock_init(void)
+{
+	mutex_init(&mlx5_buf_lock);
+}
+EXPORT_SYMBOL(mlx5_buf_lock_init);
+
+void mlx5_buf_lock_destroy(void)
+{
+	mutex_destroy(&mlx5_buf_lock);
+}
+EXPORT_SYMBOL(mlx5_buf_lock_destroy);
+
+
+
 void kmem_cache_free(struct kmem_cache *s, void *x)
 {
 	s = cache_from_obj(s, x);
-- 
2.14.4

