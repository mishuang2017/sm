===simx===

yum install virt-manager libvirt libvirt-python libvirt-python python-virtinst
/mswg/release/simx/latest/install.sh
rpm -ql simx-qenu
/opt/simx/bin/manage_virt_manager_device_support.py add
/opt/simx/bin/manage_vm_simx_support.py -n vm1

===perf===

perf stat -e cycles:k,instructions:k -B --cpu=0-15 sleep 2

===outlook===

Click the File tab.
Click Options.
In the left pane, click Mail.
In the right pane, under Replies and forwards, check the Preface comments with box, and type the text you want to use to identify your comments. 

===asm===

 %rdi, %rsi, %rdx, %rcx, %r8 and %r9 are the 

===tmux===

https://github.com/drmad/tmux-git

tmux show-buffer
tmux save-buffer foo.txt

tmux list-buffers
tmux show-buffer -b n
tmux save-buffer -b n foo.txt

c-a shift+space:  adjust pane v to h or h to v.

Prefix + # will list all the paste buffers. Prefix + = will let you select which paste buffer to use.

ConEmu:

win+alt+p configuration

c-w o close all other vim windows

===kernel===

/proc/config.gz

===rcu===

rcu_gp_kthread
	swait_event_interruptible

RCU_SOFTIRQ

rcu_process_callbacks

rcu_init(void)
	open_softirq(RCU_SOFTIRQ, rcu_process_callbacks);

crash> rcu_sched_data
PER-CPU DATA TYPE:
  struct rcu_data rcu_sched_data;
PER-CPU ADDRESSES:
  [0]: ffff8807fe01c7c0
  [1]: ffff8807fe05c7c0
  [2]: ffff8807fe09c7c0
  [3]: ffff8807fe0dc7c0
  [4]: ffff8807fe11c7c0
  [5]: ffff8807fe15c7c0
  [6]: ffff8807fe19c7c0
  [7]: ffff8807fe1dc7c0
crash> rcu_preempt_data
PER-CPU DATA TYPE:
  struct rcu_data rcu_preempt_data;
PER-CPU ADDRESSES:
  [0]: ffff8807fe01c4c0
  [1]: ffff8807fe05c4c0
  [2]: ffff8807fe09c4c0
  [3]: ffff8807fe0dc4c0
  [4]: ffff8807fe11c4c0
  [5]: ffff8807fe15c4c0
  [6]: ffff8807fe19c4c0
  [7]: ffff8807fe1dc4c0

crash> rcu_data.completed,gpnum rcu_preempt_data:a
[0]: ffff8807fe01c4c0
  completed = 0x1a94eb
  gpnum = 0x1a94eb
[1]: ffff8807fe05c4c0
  completed = 0x1a94eb
  gpnum = 0x1a94eb
[2]: ffff8807fe09c4c0
  completed = 0x1a94eb
  gpnum = 0x1a94eb
[3]: ffff8807fe0dc4c0
  completed = 0x1a94ed
  gpnum = 0x1a94ed
[4]: ffff8807fe11c4c0
  completed = 0x1a94ed
  gpnum = 0x1a94ed
[5]: ffff8807fe15c4c0
  completed = 0x1a94ed
  gpnum = 0x1a94ed
[6]: ffff8807fe19c4c0
  completed = 0x1a94ea
  gpnum = 0x1a94eb
[7]: ffff8807fe1dc4c0
  completed = 0x1a94ed
  gpnum = 0x1a94ed

crash> rcu_data.cpu rcu_preempt_data:a
[0]: ffff8807fe01c4c0
  cpu = 0x0
[1]: ffff8807fe05c4c0
  cpu = 0x1
[2]: ffff8807fe09c4c0
  cpu = 0x2
[3]: ffff8807fe0dc4c0
  cpu = 0x3
[4]: ffff8807fe11c4c0
  cpu = 0x4
[5]: ffff8807fe15c4c0
  cpu = 0x5
[6]: ffff8807fe19c4c0
  cpu = 0x6
[7]: ffff8807fe1dc4c0
  cpu = 0x7

rcu_init_one
rcu_process_callbacks

/* synchronize_rcu - wait until a grace period has elapsed. */
synchronize_rcu

https://www.slideshare.net/vh21/yet-another-introduction-of-linux-rcu
http://www.rdrop.com/~paulmck/RCU/

Hierarchical RCU
https://lwn.net/Articles/305782/


list -H rcu_struct_flavors -o rcu_state.flavors -s rcu_state.gpnum

/* Values for rcu_state structure's gp_state field. */
#define RCU_GP_IDLE      0      /* Initial state and no GP in progress. */
#define RCU_GP_WAIT_GPS  1      /* Wait for grace-period start. */
#define RCU_GP_DONE_GPS  2      /* Wait done for grace-period start. */
#define RCU_GP_WAIT_FQS  3      /* Wait for force-quiescent-state time. */
#define RCU_GP_DOING_FQS 4      /* Wait done for force-quiescent-state time. */
#define RCU_GP_CLEANUP   5      /* Grace-period cleanup started. */
#define RCU_GP_CLEANED   6      /* Grace-period cleanup complete. */

rcu_gp_kthread_wake wakes up the following kthread

/* Body of kthread that handles grace periods. */
rcu_gp_kthread

__call_rcu_core
__note_gp_changes

p rcu_state_p
rcu_state.rda 0xffffffff81c49080
rcu_data 0x1c3c0:a
rcu_data 0x1c3c0:a | grep completed

p rcu_state_p
$5 = (struct rcu_state * const) 0xffffffff81c48140 <rcu_sched_state>

struct rcu_state  0xffffffff81c48140

output *(struct rcu_state *)rcu_state_p

p rcu_num_nodes
p rcu_num_lvls

list -l rcu_state.flavors  -H rcu_struct_flavors -s rcu_state

p rcu_preempt_data
p rcu_sched_data
p rcu_bh_data

p rcu_preempt_data:all
p rcu_preempt_data:all | grep -w completed

list -H rcu_struct_flavors
ffffffff81c49c70
ffffffff81c4b530
ffffffff81c4a8f0
crash> sym ffffffff81c49c70
ffffffff81c49c70 (D) rcu_preempt_state +0xbf0
crash> sym ffffffff81c4b530
ffffffff81c4b530 (D) rcu_sched_state +0xbf0
crash> sym ffffffff81c4a8f0
ffffffff81c4a8f0 (D) rcu_bh_state +0xbf0

http://linuxgazette.net/133/saha.html

task_struct.tasks init_task -o
list -l task_struct.tasks  -H ffffffff81c10870 -s task_struct
list -l task_struct.tasks  -H ffffffff81c10870 -s task_struct.cpu

__call_rcu

===gdb===

https://sourceware.org/gdb/wiki/FAQ

set print pretty on
set height 0
b find_match_wc
print/x *flow

ptype struct shash_node

explore all_ofproto_dpifs

===chrome===

chrome://settings/content

===core===

ulimit -c unlimited
echo ".core" > /proc/sys/kernel/core_pattern

gcc -o main -g a.c
gdb main /tmp/core-main-10815 

===idr===

#define __GFP_BITS_SHIFT 26
#define ROOT_IS_IDR     ((__force gfp_t)(1 << __GFP_BITS_SHIFT))

idr_get_next

===rtnl===

/* control path */
static void rtnetlink_rcv(struct sk_buff *skb)
{
        rtnl_lock();
        netlink_rcv_skb(skb, &rtnetlink_rcv_msg);
        rtnl_unlock();
}

/* fast path */
netif_receive_skb_internal(struct sk_buff *skb)
{
	rcu_read_lock();
	ret = __netif_receive_skb(skb);
	rcu_read_unlock();
}

rtnetlink_init
rtnl_msg_handlers

rtnetlink_rcv_msg

crash> rtnl_link ffff880c88496ab8
struct rtnl_link {
  doit = 0xffffffff8163b320 <tc_ctl_tfilter>,
  dumpit = 0x0,
  calcit = 0x0
}

===olddefconfig===

# systemtap
MODVERSION
UPROBE

# tc
CLS_FLOWER

# crash
STRICT_DEVMEM

===gcc===

yum install libmpc-devel mpfr-devel gmp-devel
yum install zlib-devel*
wget ftp://ftp.gnu.org/pub/gnu/gcc/gcc-5.4.0/gcc-5.4.0.tar.bz2
./contrib/download_prerequisites
http://en.librehat.com/blog/build-gcc-5-dot-2-on-rhel-6/

mkdir gcc-build
cd gcc-build
../configure --prefix=/usr/local	\
             --disable-multilib		\
             --enable-languages=c,c++	\
             --enable-libstdcxx-threads	\
             --enable-libstdcxx-time	\
             --enable-shared		\
             --enable-__cxa_atexit	\
             --disable-libunwind-exceptions	\
             --disable-libada			\
             --host x86_64-redhat-linux-gnu	\
             --build x86_64-redhat-linux-gnu	\
             --with-default-libstdcxx-abi=gcc4-compatible


===switch===

Use "depends NET_SWITCHDEV" in driver's Kconfig to ensure switchdev model
support is built for driver.

https://www.kernel.org/doc/Documentation/networking/switchdev.txt

===yum===

yum provides ifconfig
yum whatprovides ifconfig
yum install net-tools

===selinux===

/etc/sysconfig/selinux

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=disabled
# SELINUXTYPE= can take one of three two values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected.
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted

setenforce 0
# getenforce
Permissive
service openvswitch restart

===netns===

struct task_struct {
        /* Namespaces: */
        struct nsproxy                  *nsproxy;

crash>  nsproxy init_nsproxy
struct nsproxy {
  count = {
    counter = 0x1f9
  },
  uts_ns = 0xffffffff81c102a0 <init_uts_ns>,
  ipc_ns = 0xffffffff81cc2da0 <init_ipc_ns>,
  mnt_ns = 0xffff88017fc2e700,
  pid_ns_for_children = 0xffffffff81c581e0 <init_pid_ns>,
  net_ns = 0xffffffff81d1ba80 <init_net>,
  cgroup_ns = 0xffffffff81c8e8e0 <init_cgroup_ns>
}

struct net.dev_base_head init_net -o
list net_device.dev_list  -H ffffffff81d24d58 -s net_device.name

===workqueue===

st queue_delayed_work_on

crash> delayed_work  0xffff880236927b00
struct delayed_work {
  work = {
    data = {
      counter = 0x1
    },
    entry = {
      next = 0xffff880236927b08,
      prev = 0xffff880236927b08
    },
    func = 0xffffffffa020cad0 <mlx5e_vport_update_handler>
  },
  timer = {
    entry = {
      next = 0x0,
      pprev = 0xffff88023fc125f0
    },
    expires = 0x1060f17e8,
    function = 0xffffffff810a7850 <delayed_work_timer_fn>,
    data = 0xffff880236927b00,
    flags = 0x28200000
  },
  wq = 0xffff88017fc06400,
  cpu = 0x2000
}

struct workqueue_struct *system_wq __read_mostly;	cpu_pwqs
	struct pool_workqueue	per CPU			pool
		struct worker_pool			worklist

crash> system_wq
system_wq = $2 = (struct workqueue_struct *) 0xffff88017fc08400
crash> workqueue_struct.cpu_pwqs 0xffff88017fc08400
  cpu_pwqs = 0x1ea00
crash> pool_workqueue.pool 0x1ea00:a
[0]: ffff88066781ea00
  pool = 0xffff88066781aac0
[1]: ffff880c6701ea00
  pool = 0xffff880c6701aac0
[2]: ffff88066785ea00
  pool = 0xffff88066785aac0
[3]: ffff880c6705ea00
  pool = 0xffff880c6705aac0
[4]: ffff88066789ea00
  pool = 0xffff88066789aac0
[5]: ffff880c6709ea00
  pool = 0xffff880c6709aac0
[6]: ffff8806678dea00
  pool = 0xffff8806678daac0
[7]: ffff880c670dea00
  pool = 0xffff880c670daac0
[8]: ffff88066791ea00
  pool = 0xffff88066791aac0
[9]: ffff880c6711ea00
  pool = 0xffff880c6711aac0
[10]: ffff88066795ea00
  pool = 0xffff88066795aac0
[11]: ffff880c6715ea00
  pool = 0xffff880c6715aac0
[12]: ffff88066799ea00
  pool = 0xffff88066799aac0
[13]: ffff880c6719ea00
  pool = 0xffff880c6719aac0
[14]: ffff8806679dea00
  pool = 0xffff8806679daac0
[15]: ffff880c671dea00
  pool = 0xffff880c671daac0

INIT_DELAYED_WORK
__INIT_DELAYED_WORK

schedule_delayed_work
queue_delayed_work
queue_delayed_work_on
__queue_delayed_work
__queue_work
	struct worker_pool
		worklist

===nat===

ovs-ofctl del-flows br1 in_port=1,ip,action=ct"("commit,zone=1,nat"("src=10.1.1.240-10.1.1.255"))",2

===vm===

virsh net-destroy  default
virsh net-undefine default

https://www.cyberciti.biz/faq/linux-kvm-libvirt-dnsmasq-dhcp-static-ip-address-configuration-for-guest-os/

  <cputune>
    <vcpupin vcpu='0' cpuset='12'/>
    <vcpupin vcpu='1' cpuset='13'/>
    <vcpupin vcpu='2' cpuset='14'/>
    <vcpupin vcpu='3' cpuset='15'/>
  </cputune>

virtio

    <interface type='bridge'>
      <mac address='52:54:00:60:78:03'/>
      <source bridge='br0'/>
      <virtualport type='openvswitch'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x01' slot='0x08' function='0x0'/>
    </interface>

srvio

    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x03' slot='0x00' function='0x2'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x09' function='0x0'/>
    </hostdev>

virsh net-list
virsh net-dumpxml default
virsh dumpxml vm1 | grep -i '<mac'
virsh net-edit default
virsh net-destroy default
virsh net-start default
systemctl restrart libvirtd.service

<host mac='' name='' ip=''/>

<network>
  <name>default</name>
  <uuid>e346291e-f86b-4f2f-a16e-654136441805</uuid>
  <forward mode='nat'/>
  <bridge name='virbr0' stp='on' delay='0'/>
  <mac address='52:54:00:12:fe:35'/>
  <ip address='192.168.122.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.122.100' end='192.168.122.254'/>
      <host mac='52:54:00:a0:cc:19' name='centos7' ip='192.168.122.2'/>
      <host mac='52:54:00:f7:a1:c8' name='puffy' ip='192.168.122.3'/>
      <host mac='52:54:00:4c:40:1c' name='xenial' ip='192.168.122.4'/>
    </dhcp>
  </ip>
</network>

      <host mac='52:54:00:5b:63:ef' name='vm1' ip='192.168.122.2'/>

ip link set $link vf 3 state enable

https://www.cyberciti.biz/faq/linux-kvm-libvirt-dnsmasq-dhcp-static-ip-address-configuration-for-guest-os/


1、添加ttyS0的安全许可，允许root登录:

# echo "ttyS0" >> /etc/securetty

2、在/etc/grub.conf文件中为内核添加参数:

console=ttyS0
风松
3、在/etc/inittab中添加agetty:

S0:12345:respawn:/sbin/agetty ttyS0 115200

4、重启客户机:、


hairpin

    <interface type='bridge'>
      <mac address='52:54:00:c2:9e:45'/>
      <source bridge='br0'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>

    <interface type='bridge'>
      <mac address='52:54:00:85:89:89'/>
      <source bridge='br0'/>
      <model type='connectx5'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>
    </interface>

  <qemu:commandline>
    <qemu:env name='MLX5_CONFIG_FILE' value='/opt/simx/cfg/simx-qemu.cfg'/>
    <qemu:env name='MLXSW_CONFIG_FILE' value='/opt/simx/cfg/simx-sw-qemu.cfg'/>
  </qemu:commandline>

===asap===

\\labfs02\linux_release\ovs_release\ASAP2_DIRECT-3.3-build4

19: enp4s0f0
mac: 24:8a:07:55:10:fc 

18: enp3s0f0
mac: 24:8a:07:88:27:ca

devlink dev show
echo 0000:03:00.2 > /sys/bus/pci/drivers/mlx5_core/bind
echo 0000:03:00.2 > /sys/bus/pci/drivers/mlx5_core/unbind

ethtool -K enp3s0f0    hw-tc-offload on
ethtool -K enp3s0f0_0  hw-tc-offload on
ethtool -K enp3s0f0_1  hw-tc-offload on 

ethtool -K p2p1  rx-vlan-filter off

tc qdisc add dev enp3s0f0   ingress
tc qdisc add dev enp3s0f0_0 ingress
tc qdisc add dev enp3s0f0_1 ingress

ip link set dev enp3s0f0   up
ip link set dev enp3s0f0_0 up
ip link set dev enp3s0f0_1 up

systemctl start openvswitch.service
ovs-vsctl add-br ovsbr
ovs-vsctl add-port ovsbr enp3s0f0
ovs-vsctl add-port ovsbr enp3s0f0_0
ovs-vsctl add-port ovsbr enp3s0f0_1

tc qdisc add dev eth0 ingress

===python===

sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm
sudo yum -y install python36u


===fw===

[root@dev-r630-04 network-scripts]# grep -i 0x29cdba /mswg/release/BUILDS/fw-4117/fw-4117-rel-14_21_0412-build-001/etc/syndrome_list.log
BAD_PARAM           | 0x29CDBA |  set_flow_table_entry: an FTE with flow counter in FDB must has fully match on dmac

https://github.com/Mellanox/mstflint

mlxconfig -d 02:00.0 q | egrep "SRIOV_EN|NUM_OF_VFS"

mlxconfig -d 03:00.0 set SRIOV_EN=1 NUM_OF_VFS=2

fwtrace -d 03:00.0   --tracer_mode FIFO -i all -s -m CMD_IF  -l 0 | grep modify_esw_vport_context

ConnectX-5
mount 10.4.0.102:/vol/mswg/mswg /mswg/
yes|sudo mlxburn -d 02:00.0 -fw /mswg/release/fw-4119/last_revision/fw-ConnectX5.mlx -conf_dir /mswg/release/fw-4119/last_revision
yes|sudo mlxburn -d 02:00.0 -fw /root/fw-ConnectX5.mlx -conf_dir /mswg/release/fw-4119/last_revision
sudo mlxfwreset -d 02:00.0 reset

yes|sudo mlxburn -d 02:00.0 -fw /mswg/release/fw-4119/last_revision/fw-ConnectX5.mlx -conf_dir /mswg/release/fw-4119/last_revision
fw-4119-rel-16_21_0338

ConnectX-4
yes|sudo mlxburn -d 03:00.0 -fw /mswg/release/fw-4115/last_revision/fw-ConnectX4.mlx -conf_dir /mswg/release/fw-4115/last_revision
sudo mlxfwreset -d 03:00.0 reset

ConnectX-4 Lx
yes|sudo mlxburn -d 02:00.0 -fw /mswg/release/fw-4117/last_revision/fw-ConnectX4Lx.mlx -conf_dir /mswg/release/fw-4117/last_revision
sudo mlxfwreset -d 02:00.0 reset

flint -d 02:00.0 -i /tmp/2.bin b
/.autodirect/fwgwork/rabiel/workdir/shomron/golan_fw

ssh root@10.212.214.1
ssh root@10.212.215.1

/mswg/release/BUILDS/fw-4119/fw-4119-rel-16_21_0338-build-001/etc/syndrome_list.log

===git===

# How do I discard unstaged changes in Git?
git checkout -- .

git remote add roid https://github.com/roidayan/linux.git
git fetch roid asap2-direct-3.3-ecmp
git checkout FETCH_HEAD
git checkout -b asap2-direct-3.3-ecmp

git remote add origin ssh://chrism@l-gerrit.lab.mtl.com:29418/upstream/linux
git fetch origin net
git checkout FETCH_HEAD
git checkout -b net

gitdir=$(git rev-parse --git-dir); scp -p -P 29418 chrism@l-gerrit.mtl.labs.mlnx:hooks/commit-msg ${gitdir}/hooks/
git commit --amend

git branch --set-upstream-to=remotes/roid/asap2-direct-3.3-next idr_for_asap_direct_3.3_build

git remote remove 14
git remote add 14 chrism@10.12.205.14:/home1/chrism/linux

git reset --merge

git rebase -i HEAD~3

scripts/checkpatch.pl
scripts/get_maintainer.pl

git revert
git can fetch tags (get fetch --tags) to make sure you have all tags and then "git checkout v4.12"

I usually fetch tags from linus so I wont have trash tags from Mellanox gerrit
git remote add linus git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
git fetch --tags linus
git checkout v4.12
git checkout -b poc-v4.12


git log --name-status --oneline

git remote set-url origin ssh://chrism@l-gerrit.lab.mtl.com:29418/upstream/linux

ssh-keygen -t rsa -C "chrism@mellanox.com"

git am kernel-patches/*

https://burzalodowa.wordpress.com/2013/10/05/how-to-send-patches-with-git-send-email/


git format-patch -o $dir -5 HEAD

git format-patch --cover-letter --subject-prefix="INTERNAL RFC net-next v7" -o $patch_dir -3
git send-email --dry-run --to internal --cc mark -cc paul --cc roid --cc matan --cc jiri --cc guy --cc or --cc jhs@mojatatu.com --cc alex.aring@gmail.com --cc mrv@mojatatu.com $patch_dir/*.patch --suppress-cc=all
git send-email --to internal --cc mark -cc paul --cc roid --cc matan --cc jiri --cc guy --cc or --cc jhs@mojatatu.com --cc alex.aring@gmail.com --cc mrv@mojatatu.com $patch_dir/*.patch --suppress-cc=all

git send-email --dry-run --to internal --cc jhs@mojatatu.com --cc lucasb@mojatatu.com --cc jiri --cc roid $patch_dir/*.patch --suppress-cc=all

Jamal Hadi Salim <jhs@mojatatu.com> 
alex.aring@gmail.com 
mrv@mojatatu.com 

git commit --amend
git push origin HEAD:refs/for/net-next/fix-cx4-rep

git cherry-pick 8d60bbc
git slog -1 --abbrev=12 a6f402e4990145252ce4fde59b273fa7e4f91e1b


git remote -v
davem   git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git (fetch)
davem   git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git (push)
linux-stable    git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git (fetch)
linux-stable    git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git (push)
origin  ssh://chrism@l-gerrit.lab.mtl.com:29418/upstream/linux (fetch)
origin  ssh://chrism@l-gerrit.lab.mtl.com:29418/upstream/linux (push)

# hg update -u
git fetch origin          # updates origin/master
git merge origin/master   # updates your local master

[root@bjglab-18 ~]# cd linux-net-next
[root@bjglab-18 linux-net-next]# cat .git/config
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
        remote = origin
        merge = refs/heads/master

git clone  git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git

git fetch origin
git reset --hard origin/master

git slog v4.10..v4.11 drivers/net/ethernet/mellanox/mlx5/core/
git slog v4.11.. drivers/net/ethernet/mellanox/mlx5/core/


git pull origin master

git log -l --pretty=oneline include/linux/sched.h

git checkout -b branch_name
git branch

git commit -a

git format-patch master --stdout

git checkout master

git apply --stat fix_empty_poster.patch
git apply --check fix_empty_poster.patch
git am --signoff fix_empty_poster.patch

git diff --patch
git apply name.patch

git show --patch HEAD^
git show --patch HEAD~3

git checkout --track origin/serverfix

git reset --hard 71c27777543ccfcb0376dcdd8f6777df055ef479

git log --author="chrism@mellanox.com"

===mod===

modprobe --dump-modversions  

4.10.2
[root@bjglab-19 cache]# modprobe --dump-modversions ./d9/typequery_d9bc8fdff5b4cfdb289633ee7841b60b_713.ko
0x11db8ac0      module_layout

4.11.0-rc3+
[root@bjglab-19 openvswitch]# modprobe --dump-modversions openvswitch.ko  | head -1
0xbc2ed244      module_layout

systemtap
0xc994c4bd      module_layout

mo[root@bjglab-19 hello]# modv hello.ko | head -1
0xc994c4bd      module_layout

hello on 4.10.2 kernel source
[root@bjglab-19 hello]# modv hello.ko
0x11db8ac0      module_layout
0x27e1a049      printk
0xbdfb6dbb      __fentry__

===act_vlan===

fl_set_parms

fl_lookup return value
crash> cls_fl_filter  ffff880590f10c00
  exts = {
    type = 0,
    nr_actions = 2,
    actions = 0xffff880585738600,
    action = 3,
    police = 0
  },
crash> rd 0xffff880585738600 2
ffff880585738600:  ffff880585738900 ffff880585738a00   ..s.......s.....
crash> tc_action  ffff880585738900 -x
struct tc_action {
  ops = 0xffffffffa091d040,
  type = 0x0,
  order = 0x1,
  list = {
    next = 0xffff880585738a10,
    prev = 0xffffc90008fff8f0
  },
  hinfo = 0xffff8806055fc900,
  tcfa_head = {
    next = 0x0,
    pprev = 0xffff88065c485428
  },
  tcfa_index = 0x25,
  tcfa_refcnt = 0x1,
  tcfa_bindcnt = 0x1,
  tcfa_capab = 0x0,
  tcfa_action = 0x3,
  tcfa_tm = {
    install = 0x1001c663f,
    lastuse = 0x1035f4089,
    expires = 0x0,
    firstuse = 0x1001cc3e9
  },
  tcfa_bstats = {
    bytes = 0x674237,
    packets = 0xc4c7
  },
  tcfa_qstats = {
    qlen = 0x0,
    backlog = 0x0,
    drops = 0x0,
    requeues = 0x0,
    overlimits = 0x0
  },
  tcfa_rate_est = 0x0,
  tcfa_lock = {
    {
      rlock = {
        raw_lock = {
          val = {
            counter = 0x0
          }
        }
      }
    }
  },
  tcfa_rcu = {
    next = 0x0,
    func = 0x0
  },
  cpu_bstats = 0x0,
  cpu_qstats = 0x0,
  act_cookie = 0x0
}
crash> tc_action_ops  0xffffffffa091d040
struct tc_action_ops {
  head = {
    next = 0xffffffffa0922060,
    prev = 0xffffffff81d29ce0 <act_base>
  },
  kind = "vlan\000\000\000\000\000\000\000\000\000\000\000",
  type = 12,
  size = 216,
  owner = 0xffffffffa091d0c0,
  act = 0xffffffffa091b590,
  dump = 0xffffffffa091b3a0,
  cleanup = 0x0,
  lookup = 0xffffffffa091b370,
  init = 0xffffffffa091b070,
  walk = 0xffffffffa091b040,
  stats_update = 0x0,
  get_dev = 0x0
}
crash> dis 0xffffffffa091b590
0xffffffffa091b590 <tcf_vlan>:  nopl   0x0(%rax,%rax,1) [FTRACE NOP]
crash> tc_action  ffff880585738a00 -x
struct tc_action {
  ops = 0xffffffffa0922060,
  type = 0x0,
  order = 0x2,
  list = {
    next = 0xffffc90008fff8f0,
    prev = 0xffff880585738910
  },
  hinfo = 0xffff8805a41cc0e0,
  tcfa_head = {
    next = 0x0,
    pprev = 0xffff880558a84b20
  },
  tcfa_index = 0x24,
  tcfa_refcnt = 0x1,
  tcfa_bindcnt = 0x1,
  tcfa_capab = 0x0,
  tcfa_action = 0x4,
  tcfa_tm = {
    install = 0x1001c663f,
    lastuse = 0x1035fb1dc,
    expires = 0x0,
    firstuse = 0x1001cc3e9
  },
  tcfa_bstats = {
    bytes = 0x0,
    packets = 0x0
  },
  tcfa_qstats = {
    qlen = 0x0,
    backlog = 0x0,
    drops = 0x0,
    requeues = 0x0,
    overlimits = 0x0
  },
  tcfa_rate_est = 0x0,
  tcfa_lock = {
    {
      rlock = {
        raw_lock = {
          val = {
            counter = 0x0
          }
        }
      }
    }
  },
  tcfa_rcu = {
    next = 0x0,
    func = 0x0
  },
  cpu_bstats = 0x60f398812800,
  cpu_qstats = 0x60f39881280c,
  act_cookie = 0x0
}
crash> tc_action_ops  0xffffffffa0922060
struct tc_action_ops {
  head = {
    next = 0xffffffff81d29ce0 <act_base>,
    prev = 0xffffffffa091d040
  },
  kind = "mirred\000\000\000\000\000\000\000\000\000",
  type = 8,
  size = 240,
  owner = 0xffffffffa0922100,
  act = 0xffffffffa09203c0,
  dump = 0xffffffffa0920240,
  cleanup = 0xffffffffa09201c0,
  lookup = 0xffffffffa0920190,
  init = 0xffffffffa0920730,
  walk = 0xffffffffa09200a0,
  stats_update = 0xffffffffa0920000,
  get_dev = 0xffffffffa0920070
}
crash> dis 0xffffffffa09203c0
0xffffffffa09203c0 <tcf_mirred>:        nopl   0x0(%rax,%rax,1) [FTRACE NOP]



static int tcf_vlan(struct sk_buff *skb, const struct tc_action *a,
                    struct tcf_result *res)
static int tcf_mirred(struct sk_buff *skb, const struct tc_action *a,
                      struct tcf_result *res)

struct tcf_proto {
        /* Fast access part */
        struct tcf_proto __rcu  *next;
        void __rcu              *root;
        int                     (*classify)(struct sk_buff *,
                                            const struct tcf_proto *,
                                            struct tcf_result *);
tcf_action_exec

 0xffffffff81618f70 : skb_vlan_pop +0x0/0xc0 [kernel]
 0xffffffffa010064c : tcf_vlan +0xbc/0x250 [act_vlan]
 0xffffffff8165e250 : tcf_action_exec +0x60/0x80 [kernel]
 0xffffffffa00627e1 : fl_classify +0x1e1/0x210 [cls_flower]
 0xffffffff81659888 : tc_classify +0x78/0x120 [kernel]
 0xffffffff8162b242 : __netif_receive_skb_core +0x612/0x9e0 [kernel]
 0xffffffff8162b628 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8162c2e0 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8162ce9d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa092d06a : mlx5e_handle_rx_cqe_mpwrq +0x58a/0x820 [mlx5_core]
 0xffffffffa092d383 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa092e0a3 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff8162c840 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff81755a39 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff810955e9 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff81754bb1 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81752a13 : ret_from_intr +0x0/0x1b [kernel]
 0x0 (inexact)
parms: skb=0xffff880587a57300


crash> net_device.ingress_cl_list ffff880661b70000
  ingress_cl_list = 0xffff8805eebb6d20
crash> tcf_proto  0xffff8805eebb6d20
struct tcf_proto {
  next = 0xffff880babc0d3c0,
  root = 0xffff88055f148c00,
  classify = 0xffffffffa0915600,
  protocol = 0x81,
  prio = 3221159936,
  classid = 4294901760,
  q = 0xffff880590f11800,
  data = 0x0,
  ops = 0xffffffffa0918000,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
crash> cls_fl_head 0xffff88055f148c00
struct cls_fl_head {
  ht = {
    tbl = 0xffff88055f148400,
    nelems = {
      counter = 1
    },
    key_len = 6,
    elasticity = 16,
    p = {
      nelem_hint = 0,
      key_len = 24,
      key_offset = 24,
      head_offset = 0,
      insecure_max_entries = 0,
      max_size = 0,
      min_size = 4,
      nulls_base = 0,
      insecure_elasticity = false,
      automatic_shrinking = true,
      locks_mul = 32,
      hashfn = 0xffffffff8139cdd0 <rhashtable_jhash2>,
      obj_hashfn = 0x0,
      obj_cmpfn = 0x0
    },
crash> cls_fl_head 0xffff88055f148c00 -o
struct cls_fl_head {
  [ffff88055f148c00] struct rhashtable ht;
  [ffff88055f148cc0] struct fl_flow_mask mask;
  [ffff88055f148d68] struct flow_dissector dissector;
  [ffff88055f148d90] u32 hgen;
  [ffff88055f148d94] bool mask_assigned;
  [ffff88055f148d98] struct list_head filters;
  [ffff88055f148da8] struct rhashtable_params ht_params;
        union {
  [ffff88055f148e00]     struct work_struct work;
  [ffff88055f148e00]     struct callback_head rcu;
        };
}
SIZE: 544
crash> fl_flow_mask  ffff88055f148cc0 -x
struct fl_flow_mask {
    basic = {
      n_proto = 0xffff,
      ip_proto = 0x0,
      padding = 0x0
    },
    eth = {
      dst = "\377\377\377\377\377\377",
      src = "\377\377\377\377\377\377"
    },
  range = {
    start = 0x10,
    end = 0x28
  },
crash> cls_fl_head.dissector 0xffff88055f148c00
  dissector = {
    used_keys = 579,

crash> eval 579
hexadecimal: 243
    decimal: 579
      octal: 1103
     binary: 0000000000000000000000000000000000000000000000000000001001000011

    offset = {4, 20, 0, 0, 0, 0, 24, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0}
  }
crash> fl_flow_key -o
struct fl_flow_key {
    [0] int indev_ifindex;
    [4] struct flow_dissector_key_control control;
   [12] struct flow_dissector_key_control enc_control;
   [20] struct flow_dissector_key_basic basic;
   [24] struct flow_dissector_key_eth_addrs eth;	<===
   [36] struct flow_dissector_key_vlan vlan;		<===
        union {
   [40]     struct flow_dissector_key_ipv4_addrs ipv4;
   [40]     struct flow_dissector_key_ipv6_addrs ipv6;
        };
   [72] struct flow_dissector_key_ports tp;
   [76] struct flow_dissector_key_icmp icmp;
   [80] struct flow_dissector_key_arp arp;
  [104] struct flow_dissector_key_keyid enc_key_id;
        union {
  [108]     struct flow_dissector_key_ipv4_addrs enc_ipv4;
  [108]     struct flow_dissector_key_ipv6_addrs enc_ipv6;
        };
  [140] struct flow_dissector_key_ports enc_tp;
}

FLOW_DISSECTOR_KEY_ETH_ADDRS
FLOW_DISSECTOR_KEY_VLAN



UDP send

fl_classify
	skb_flow_dissect
		__skb_flow_dissect
	fl_lookup
	tcf_exts_exec
		tcf_action_exec()
			for (i = 0; i < nr_actions; i++) {
				const struct tc_action *a = actions[i];
				ret = a->ops->act(skb, a, res);



 0xffffffffa09536e0 : mlx5e_xmit +0x0/0x30 [mlx5_core]
 0xffffffff8162dd41 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff81658105 : sch_direct_xmit +0x105/0x1b0 [kernel]
 0xffffffff8162e3cf : __dev_queue_xmit +0x42f/0x630 [kernel]
 0xffffffff8162e5e0 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa0920604 : tcf_mirred +0x244/0x2c0 [act_mirred]

 0xffffffff8165e250 : tcf_action_exec +0x60/0x80 [kernel]
 0xffffffffa09157e1 : fl_classify +0x1e1/0x210 [cls_flower]
 0xffffffff81659888 : tc_classify +0x78/0x120 [kernel]
 0xffffffff8162b242 : __netif_receive_skb_core +0x612/0x9e0 [kernel]
 0xffffffff8162b628 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8162c2e0 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8162ce9d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa0955776 : mlx5e_handle_rx_cqe_rep +0x666/0x9c0 [mlx5_core]
 0xffffffffa0956373 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0957093 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff8162c840 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff81755a39 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff810955e9 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff81754bb1 : do_IRQ +0x51/0xd0 [kernel]
parms: skb=0xffff880c62f08000 dev=0xffff880661b70000

napi_gro_receive
napi_skb_finish
netif_receive_skb_internal

 0xffffffff816192e0 : skb_vlan_push +0x0/0x1c0 [kernel]
 0xffffffffa091b78b : tcf_vlan +0x1fb/0x250 [act_vlan]
 0xffffffff8165e250 : tcf_action_exec +0x60/0x80 [kernel]
 0xffffffffa09157e1 : fl_classify +0x1e1/0x210 [cls_flower]
 0xffffffff81659888 : tcf_classify +0x78/0x120 [kernel]
 0xffffffff8162b242 : __netif_receive_skb_core +0x612/0x9e0 [kernel]
 0xffffffff8162b628 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8162c2e0 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8162ce9d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa0955776 : mlx5e_handle_rx_cqe_rep +0x666/0x9c0 [mlx5_core]
 0xffffffffa0956373 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0957093 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff8162c840 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff81755a39 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff810955e9 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff81754bb1 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81752a13 : ret_from_intr +0x0/0x1b [kernel]
 0x0 (inexact)
parms: skb=0xffff880c61303100 vlan_proto=0x81 vlan_tci=0x34
execname: swapper/10

===tc_insert===

esw_create_offloads_fdb_tables
esw_create_offloads_fast_fdb_table
mlx5_create_auto_grouped_flow_table

===tc===

ovs:
tc_add_del_ingress_qdisc

tc:
tc_modify_qdisc


tc filter del dev $link parent ffff: prio 1 handle 0x1 flower 


 0xffffffffa09bd060 : fl_get +0x0/0x10 [cls_flower]
 0xffffffff81666ad0 : tc_ctl_tfilter +0x580/0x970 [kernel]
 0xffffffff8164b17c : rtnetlink_rcv_msg +0xac/0x240 [kernel]
 0xffffffff8166e7ed : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff81645158 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8166df51 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166e2d2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff816141e8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff81614b3a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff81616194 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff816161e2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8175bbe7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: tp=0xffff880562717900 handle=0x0
execname: tc
ts: 77
 0x7fbdc2f617a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x432194 : __rtnl_talk +0xc4/0x3f0 [/home1/chrism/iproute2/tc/tc]
 0x40abfb : tc_filter_modify +0x2db/0x710 [/home1/chrism/iproute2/tc/tc]
 0x407d15 : batch +0xa5/0x170 [/home1/chrism/iproute2/tc/tc]
 0x7fbdc2e8ab35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4078be : _start +0x29/0x2b [/home1/chrism/iproute2/tc/tc]


net_device ingress_cl_list

tcf_chain_tp_insert tcf_chain_tp_find
 0xffffffff81666d6f : tc_ctl_tfilter +0x81f/0x970 [kernel]
 0xffffffff8164b17c : rtnetlink_rcv_msg +0xac/0x240 [kernel]
 0xffffffff8166e7ed : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff81645158 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8166df51 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166e2d2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff816141e8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff81614b3a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff81616194 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff816161e2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8175bbe7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: chain=? chain=? tp=? chain_info=?
execname: tc
ts: 3
 0x7fda306167a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x432194 : __rtnl_talk +0xc4/0x3f0 [/home1/chrism/iproute2/tc/tc]
 0x40abfb : tc_filter_modify +0x2db/0x710 [/home1/chrism/iproute2/tc/tc]
 0x407d15 : batch +0xa5/0x170 [/home1/chrism/iproute2/tc/tc]
 0x7fda3053fb35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4078be : _start +0x29/0x2b [/home1/chrism/iproute2/tc/tc]


 0xffffffffa0ab81f0 : __fl_delete +0x0/0xb0 [cls_flower]
 0xffffffffa0ab87a3 : fl_destroy +0x43/0xa0 [cls_flower]
 0xffffffff8163a5a4 : tcf_proto_destroy +0x14/0x40 [kernel]
 0xffffffff8163a5fb : tcf_chain_flush +0x2b/0x40 [kernel]
 0xffffffff8163a65d : tcf_chain_destroy +0x4d/0x60 [kernel]
 0xffffffff8163a69c : tcf_block_put +0x2c/0x50 [kernel]
 0xffffffffa095c1b5 : ingress_destroy +0x15/0x20 [sch_ingress]
 0xffffffff8163582d : qdisc_destroy +0x5d/0xb0 [kernel]
 0xffffffff81638d6c : notify_and_destroy +0x2c/0x30 [kernel]
 0xffffffff81638ecf : qdisc_graft +0x15f/0x380 [kernel]
 0xffffffff816398df : tc_get_qdisc +0x18f/0x230 [kernel]
 0xffffffff816202ae : rtnetlink_rcv_msg +0xee/0x220 [kernel]
 0xffffffff816439f7 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff8161a9d8 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8164316c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816434e5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9f18 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea9f6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: tp=0xffff880c0bc43e40 f=0xffff880c39feba00
execname: tc
ts: 21
 0x7fb68130e7d0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x432284 : __rtnl_talk +0xc4/0x3f0 [/auto/mtbcswgwork/chrism/iproute2/tc/tc]
 0x4088c7 : tc_qdisc_modify +0x307/0x730 [/auto/mtbcswgwork/chrism/iproute2/tc/tc]
 0x407670 : main +0x100/0x3b5 [/auto/mtbcswgwork/chrism/iproute2/tc/tc]
 0x7fb681237b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x40794e : _start +0x29/0x2b [/auto/mtbcswgwork/chrism/iproute2/tc/tc]

__fl_delete
	call_rcu(&f->rcu, fl_destroy_filter);

 0xffffffff8163c7e8 : __tcf_hash_release +0x58/0xc0 [kernel]
 0xffffffff8163cf52 : tcf_action_destroy +0x62/0x90 [kernel]
 0xffffffff8163add2 : tcf_exts_destroy +0x92/0xd0 [kernel]
 0xffffffffa0ab81dd : fl_destroy_filter +0x1d/0x30 [cls_flower]
 0xffffffff810eb92c : rcu_process_callbacks +0x1bc/0x4d0 [kernel]
 0xffffffff81730fad : __do_softirq +0xed/0x278 [kernel]
 0xffffffff8108b1b6 : irq_exit +0xb6/0xc0 [kernel]
 0xffffffff81730a8d : smp_apic_timer_interrupt +0x3d/0x50 [kernel]
 0xffffffff8172f3d3 : apic_timer_interrupt +0x93/0xa0 [kernel]

GACT_TAB_MASK

 0xffffffff81667090 : tcf_hash_insert +0x0/0x60 [kernel]
 0xffffffffa08b3301 : tcf_gact_init +0x161/0x1f0 [act_gact]
 0xffffffff816680b7 : tcf_action_init_1 +0x237/0x3a0 [kernel]
 0xffffffff816682db : tcf_action_init +0xbb/0x180 [kernel]
 0xffffffff816657a1 : tcf_exts_validate +0xc1/0x110 [kernel]
 0xffffffffa08aca07 : fl_set_parms +0xa7/0xa40 [cls_flower]
 0xffffffffa08ad5c0 : fl_change +0x220/0x0 [cls_flower]
 0xffffffff81666d44 : tc_ctl_tfilter +0x7f4/0x970 [kernel]
 0xffffffff8164b17c : rtnetlink_rcv_msg +0xac/0x240 [kernel]
 0xffffffff8166e7ed : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff81645158 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8166df51 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166e2d2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff816141e8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff81614b3a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff81616194 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff816161e2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8175bbe7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: tn=0xffff8806a44ce4f0 a=0xffff8806a53e6100
execname: tc
ts: 13
 0x7f7e995c47a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x432194 : __rtnl_talk +0xc4/0x3f0 [/home1/chrism/iproute2/tc/tc]
 0x40abfb : tc_filter_modify +0x2db/0x710 [/home1/chrism/iproute2/tc/tc]
 0x407d15 : batch +0xa5/0x170 [/home1/chrism/iproute2/tc/tc]
 0x7f7e994edb35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4078be : _start +0x29/0x2b [/home1/chrism/iproute2/tc/tc]


    tc -s filter show dev $link ingress

 0xffffffffa0a2acd0 : mlx5e_stats_flower +0x0/0x210 [mlx5_core]
 0xffffffffa0a19bb8 : mlx5e_ndo_setup_tc +0x58/0x80 [mlx5_core]
 0xffffffffa08abe0c : fl_dump +0x56c/0xb70 [cls_flower]
 0xffffffff81665ffd : tcf_fill_node +0x14d/0x1d0 [kernel]
 0xffffffff81666449 : tcf_node_dump +0x49/0x50 [kernel]
 0xffffffffa08ab114 : fl_walk +0x64/0x80 [cls_flower]
 0xffffffff816662e5 : tc_dump_tfilter +0x265/0x380 [kernel]
 0xffffffff8166b6fc : netlink_dump +0x12c/0x290 [kernel]
 0xffffffff8166cb76 : __netlink_dump_start +0x186/0x1f0 [kernel]
 0xffffffff8164b218 : rtnetlink_rcv_msg +0x148/0x240 [kernel]
 0xffffffff8166e7ed : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff81645158 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8166df51 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166e2d2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff816141e8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff81614b3a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff81616194 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff816161e2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8175bbe7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
parms: priv=0xffff880c9a9c08c0 f=0xffffc900096238a0
execname: tc
ts: 38
 0x7f5fd0cfd7a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x433440 : rtnl_dump_request +0xb0/0xc0 [/usr/sbin/tc]
 0x40b844 : tc_filter_list +0x144/0x4f0 [/usr/sbin/tc]
 0x407cb0 : main +0x100/0x3b5 [/usr/sbin/tc]
 0x7f5fd0c26b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407f8e : _start +0x29/0x2b [/usr/sbin/tc]


 0xffffffffa09aa730 : tcf_mirred_init +0x0/0x0 [act_mirred]
 0xffffffff8165ed69 : tcf_action_init_1 +0x199/0x2a0 [kernel]
 0xffffffff8165ef21 : tcf_action_init +0xb1/0x180 [kernel]
 0xffffffff8165ca76 : tcf_exts_validate +0xc6/0x110 [kernel]
 0xffffffffa00cf917 : fl_set_parms +0xa7/0x950 [cls_flower]
 0xffffffffa00d03dc : fl_change +0x21c/0x0 [cls_flower]
 0xffffffff8165d85c : tc_ctl_tfilter +0x33c/0x790 [kernel]
 0xffffffff816433f4 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81665287 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163d208 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81664c41 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166502e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160cb68 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160d4b9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160dec4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160df12 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: net=0xffffffff81d24c40 nla=0xffff8806164b7cb0 est=0x0 a=0xffffc9000832b650 ovr=0x0 bind=0x1
execname: tc
ts: 9
 0x7fc18f0037a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x432194 : __rtnl_talk +0xc4/0x3f0 [/home1/chrism/iproute2/tc/tc]
 0x40abfb : tc_filter_modify +0x2db/0x710 [/home1/chrism/iproute2/tc/tc]
 0x4075e0 : main +0x100/0x3b5 [/home1/chrism/iproute2/tc/tc]
 0x7fc18ef2cb35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4078be : _start +0x29/0x2b [/home1/chrism/iproute2/tc/tc]


/* tca flags definitions */
#define TCA_CLS_FLAGS_SKIP_HW   (1 << 0) /* don't offload filter to HW */
#define TCA_CLS_FLAGS_SKIP_SW   (1 << 1) /* don't use filter in SW */
#define TCA_CLS_FLAGS_IN_HW     (1 << 2) /* filter is offloaded to HW */
#define TCA_CLS_FLAGS_NOT_IN_HW (1 << 3) /* filter isn't offloaded to HW */

skip_hw
crash> cls_fl_filter.flags 0xffff880635bf3200 -x
  flags = 0x9
skip_sw
crash> cls_fl_filter.flags 0xffff880c614e8a00
  flags = 6

userland:

do_filter
	tc_filter_modify
		flower_parse_opt
			flower_print_eth_addr
		rtnl_talk

 0x7fefe95917a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x432b64 : __rtnl_talk +0xc4/0x3f0 [/home1/chrism/iproute2/tc/tc]
 0x40b2cb : tc_filter_modify +0x2db/0x710 [/home1/chrism/iproute2/tc/tc]
 0x407cb0 : main +0x100/0x3b5 [/home1/chrism/iproute2/tc/tc]
 0x7fefe94bab35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407f8e : _start +0x29/0x2b [/home1/chrism/iproute2/tc/tc]

kernel:


tc_ctl_tfilter
	nlmsg_parse
		nla_parse

/*
 *  <------- NLA_HDRLEN ------> <-- NLA_ALIGN(payload)-->
 * +---------------------+- - -+- - - - - - - - - -+- - -+
 * |        Header       | Pad |     Payload       | Pad |
 * |   (struct nlattr)   | ing |                   | ing |
 * +---------------------+- - -+- - - - - - - - - -+- - -+
 *  <-------------- nlattr->nla_len -------------->
 */

struct nlattr {
        __u16           nla_len;
        __u16           nla_type;
};

nla_parse_nested
	nla_parse

fl_set_key

fl_check_assign_mask
	fl_init_dissector

 0xffffffffa0061220 : fl_init_dissector +0x0/0x310 [cls_flower]
 0xffffffffa00635a4 : fl_change +0x444/0x0 [cls_flower]
 0xffffffff8165d85c : tc_ctl_tfilter +0x33c/0x790 [kernel]
 0xffffffff816433f4 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81665287 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163d208 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81664c41 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166502e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160cb68 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160d4b9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160dec4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160df12 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: head=0xffff88055eaff400 mask=0xffffc900081ef990
execname: tc


 0xffffffffa09134a0 : mlx5_add_flow_rules +0x0/0x600 [mlx5_core]
 0xffffffffa091bdad : mlx5_eswitch_add_offloaded_rule +0x11d/0x1d0 [mlx5_core]
 0xffffffffa0931a9d : mlx5e_configure_flower +0xb7d/0xf20 [mlx5_core]
 0xffffffffa0922f13 : mlx5e_ndo_setup_tc +0xe3/0x100 [mlx5_core]	mlx5e_setup_tc_cls_flower		mlx5e_setup_tc
 0xffffffffa006399c : fl_change +0x83c/0x0 [cls_flower]
 0xffffffff8165d85c : tc_ctl_tfilter +0x33c/0x790 [kernel]
 0xffffffff816433f4 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81665287 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163d208 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81664c41 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166502e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160cb68 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160d4b9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160dec4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160df12 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: ft=0xffff88056b520000 spec=0xffff880b6adf0000 flow_act=0xffffc900090db7d0 dest=0xffffc900090db7e0 dest_num=0x2


mlx5e_ndo_setup_tc
	mlx5e_configure_flower
		parse_cls_flower
			__parse_cls_flower
		parse_tc_fdb_actions
			is_tcf_mirred_egress_redirect

fl_change
	fl_hw_replace_filter
		tc_can_offload
			if (!(dev->features & NETIF_F_HW_TC))
				return false;

 0xffffffffa091d700 : mlx5e_set_features +0x0/0xd0 [mlx5_core]
 0xffffffff8162f46f : __netdev_update_features +0x23f/0x690 [kernel]
 0xffffffff816308cc : ethtool_set_features +0xcc/0x120 [kernel]
 0xffffffff816343f5 : dev_ethtool +0x1235/0x1bd0 [kernel]
 0xffffffff81648821 : dev_ioctl +0x181/0x520 [kernel]
 0xffffffff8160a4f2 : sock_do_ioctl +0x42/0x50 [kernel]
 0xffffffff8160aa9d : sock_ioctl +0x1ed/0x2d0 [kernel]
 0xffffffff81257e07 : do_vfs_ioctl +0xa7/0x5e0 [kernel]
 0xffffffff812583b9 : SyS_ioctl +0x79/0x90 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: netdev=0xffff880b4b100000 features=0x403038214bb3
execname: ethtool
ts: 1aa01d
 0x7f6c79f72507 : ioctl +0x7/0x30 [/usr/lib64/libc-2.17.so]
 0x405df1 : do_sfeatures +0x351/0x5d0 [/usr/sbin/ethtool]
 0x4015f5 : main +0x1a5/0x27f [/usr/sbin/ethtool]
 0x7f6c79ea5b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4016f8 : _start +0x29/0x31 [/usr/sbin/ethtool]

        .ndo_set_features        = mlx5e_set_features,

static const char netdev_features_strings[NETDEV_FEATURE_COUNT][ETH_GSTRING_LEN] = {
	[NETIF_F_HW_TC_BIT] =            "hw-tc-offload",
};

#define NETIF_F_HW_TC          __NETIF_F(HW_TC)
NETIF_F_HW_TC_BIT

[root@bjglab-18 ~]#     ethtool -K $link hw-tc-offload on;
crash> net_device.features ffff880b4b100000 -x
  features = 0x3038214bb3

NETIF_F_HW_TC_BIT

[root@bjglab-18 ~]#     ethtool -K $link hw-tc-offload off
crash> net_device.features ffff880b4b100000 -x
  features = 0x403038214bb3


The behavior of tc filters remains the same.  However a new tc action,
skbedit, has been added.  Assuming you wanted to route all traffic to a
specific host, for example 192.168.0.3, through a specific queue you could use
this action and establish a filter such as:

tc filter add dev p2p1 parent 1: protocol ip prio 1 u32 \
	match ip dst 1.1.1.19 \
	action skbedit queue_mapping 3

sch_htb.c
htb_enqueue

tc qdisc add dev p2p1 root handle 1: htb default 20
tc class add dev p2p1 parent 1:0 classid 1:10 htb rate 200kbit ceil 200kbit prio 1 mtu 1500
tc class add dev p2p1 parent 1:0 classid 1:20 htb rate 824kbit ceil 1024kbit prio 2 mtu 1500


Major number 0xffff is reserved for the ingress qdisc

tc filter show dev p2p1 protocol ip parent ffff:

http://wiki.linuxwall.info/doku.php/en:ressources:dossiers:networking:traffic_control

# tc qdisc add dev eth0 root handle 1: htb default 20
This command means “attach a root qdisc identified by id 1 to the device eth0, use htb as a scheduler and send everything to class 20 by default”.

[root@bjglab-18 workloads]# cat  /sys/class/net/p2p1/tx_queue_len
1000

===tcpdump===

[root@bjglab-18 ~]# tcpdump -nnepi p2p1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on p2p1, link-type EN10MB (Ethernet), capture size 65535 bytes
02:56:39.260783 24:8a:07:88:27:ca > 24:8a:07:55:10:fc, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.3.18 > 192.168.3.19: ICMP echo request, id 9446, seq 3, length 64
02:56:39.260860 24:8a:07:55:10:fc > 24:8a:07:88:27:ca, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.3.19 > 192.168.3.18: ICMP echo reply, id 9446, seq 3, length 64
02:56:39.446350 24:8a:07:55:10:fc > 24:8a:07:88:27:ca, ethertype 802.1Q (0x8100), length 60: vlan 52, p 0, ethertype ARP, Request who-has 192.168.3.18 tell 192.168.3.19, length 42

tcpdump -i enp3s0f2 -vvv src host 192.168.2.19

tcpdump -i eth1 -XX
tcpdump: WARNING: eth1: no IPv4 address assigned
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
05:44:24.450946 IP 192.168.1.2 > localhost.localdomain: ICMP echo request, id 9955, seq 91, length 64
        0x0000:  5254 0060 7801 5254 0060 7802 8100 0034  RT.`x.RT.`x....4
        0x0010:  0800 4500 0054 28d3 4000 4001 8e82 c0a8  ..E..T(.@.@.....
        0x0020:  0102 c0a8 0101 0800 c7f9 26e3 005b 78bb  ..........&..[x.
        0x0030:  c758 0000 0000 03e1 0600 0000 0000 1011  .X..............
        0x0040:  1213 1415 1617 1819 1a1b 1c1d 1e1f 2021  ...............!
        0x0050:  2223 2425 2627 2829 2a2b 2c2d 2e2f 3031  "#$%&'()*+,-./01
        0x0060:  3233 3435 3637                           234567

tcpdump -i eth1 -Uw - | tcpdump -en -r - vlan 52
05:45:15.450943 52:54:00:60:78:01 > 52:54:00:60:78:02, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.1.1 > 192.168.1.2: ICMP echo reply, id 9955, seq 142, length 64
05:45:16.450896 52:54:00:60:78:02 > 52:54:00:60:78:01, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.1.2 > 192.168.1.1: ICMP echo request, id 9955, seq 143, length 64
05:45:16.450940 52:54:00:60:78:01 > 52:54:00:60:78:02, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.1.1 > 192.168.1.2: ICMP echo reply, id 9955, seq 143, length 64
05:45:17.450901 52:54:00:60:78:02 > 52:54:00:60:78:01, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.1.2 > 192.168.1.1: ICMP echo request, id 9955, seq 144, length 64
05:45:17.450945 52:54:00:60:78:01 > 52:54:00:60:78:02, ethertype 802.1Q (0x8100), length 102: vlan 52, p 0, ethertype IPv4, 192.168.1.1 > 192.168.1.2: ICMP echo reply, id 9955, seq 144, length 64

===vxlan===

 0xffffffffa090cef0 : vxlan_rcv +0x0/0xa30 [vxlan]
 0xffffffff816ab8fc : udp_queue_rcv_skb +0x1ec/0x3b0 [kernel]
 0xffffffff816abf02 : __udp4_lib_rcv +0x442/0xb50 [kernel]
 0xffffffff816aca0a : udp_rcv +0x1a/0x20 [kernel]
 0xffffffff81678454 : ip_local_deliver_finish +0x94/0x1e0 [kernel]
 0xffffffff8167875f : ip_local_deliver +0x6f/0xe0 [kernel]
 0xffffffff816780fb : ip_rcv_finish +0xdb/0x3a0 [kernel]
 0xffffffff81678a77 : ip_rcv +0x2a7/0x400 [kernel]
 0xffffffff81631160 : __netif_receive_skb_core +0x380/0x9e0 [kernel]
 0xffffffff816317d8 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff81632490 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8163304d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa010bcd4 : mlx5e_handle_rx_cqe_mpwrq +0x594/0x830 [mlx5_core]
 0xffffffffa010bff3 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa010cd13 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff816329f0 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff8175b9b9 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff81095599 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff8175ab31 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81758993 : ret_from_intr +0x0/0x1b [kernel]


vxlan_xmit_one
	vxlan_get_route
	vxlan_build_skb
		__skb_push
		struct vxlanhdr *vxh;
		vni=98=0x62
	udp_tunnel_xmit_skb
		__skb_push
		iptunnel_xmit
			ip_local_out
				dst_output

rt_dst_alloc
	rt->dst.output = ip_output;


 0xffffffffa093eff0 : vxlan_open +0x0/0x0 [vxlan]
 0xffffffff81634fa9 : __dev_open +0xc9/0x140 [kernel]
 0xffffffff816352bd : __dev_change_flags +0x9d/0x160 [kernel]
 0xffffffff816353a9 : dev_change_flags +0x29/0x60 [kernel]
 0xffffffffa094a176 : vxlan_tnl_create +0x176/0x200 [vport_vxlan]
 0xffffffffa094a212 : vxlan_create +0x12/0x30 [vport_vxlan]
 0xffffffffa091d2f8 : ovs_vport_add +0xc8/0x120 [openvswitch]
 0xffffffffa0910c22 : new_vport +0x12/0x50 [openvswitch]
 0xffffffffa09125a1 : ovs_vport_cmd_new +0x151/0x2e0 [openvswitch]
 0xffffffff8166c046 : genl_family_rcv_msg +0x1f6/0x3e0 [kernel]
 0xffffffff8166c274 : genl_rcv_msg +0x44/0x90 [kernel]
 0xffffffff8166b557 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8166bc08 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff8166af11 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166b2fe : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff81612b78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff816134c9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff81613ed4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff81613f22 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
parms: dev=0xffff880c1428e000
execname: ovs-vswitchd
ts: 270eba
 0x7efc6a6729fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x514f28 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/local/sbin/ovs-vswitchd]
 0x51531e : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/local/sbin/ovs-vswitchd]
 0x515441 : nl_sock_transact +0x41/0xc0 [/usr/local/sbin/ovs-vswitchd]
 0x5162b0 : nl_transact +0x40/0x60 [/usr/local/sbin/ovs-vswitchd]
 0x50ac08 : dpif_netlink_vport_transact +0xf8/0x280 [/usr/local/sbin/ovs-vswitchd]
 0x50b813 : dpif_netlink_port_add__ +0x1d3/0x4c0 [/usr/local/sbin/ovs-vswitchd]
 0x50bb36 : dpif_netlink_port_add +0x36/0x60 [/usr/local/sbin/ovs-vswitchd]
 0x469c4c : dpif_port_add +0x4c/0x100 [/usr/local/sbin/ovs-vswitchd]
 0x4254a8 : port_add +0xb8/0x130 [/usr/local/sbin/ovs-vswitchd]
 0x41c851 : ofproto_port_add +0x31/0xf0 [/usr/local/sbin/ovs-vswitchd]
 0x40b4f9 : bridge_add_ports__ +0x369/0x7e0 [/usr/local/sbin/ovs-vswitchd]
 0x40ceaf : bridge_reconfigure +0x6af/0x3260 [/usr/local/sbin/ovs-vswitchd]
 0x410286 : bridge_run +0x216/0x19d0 [/usr/local/sbin/ovs-vswitchd]
 0x4070e5 : main +0x345/0x480 [/usr/local/sbin/ovs-vswitchd]
 0x7efc69dbab35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407e63 : _start +0x29/0x36 [/usr/local/sbin/ovs-vswitchd]

static const struct net_device_ops vxlan_netdev_ether_ops = {
        .ndo_init               = vxlan_init,
        .ndo_uninit             = vxlan_uninit,
        .ndo_open               = vxlan_open,
        .ndo_stop               = vxlan_stop,
        .ndo_start_xmit         = vxlan_xmit,
        .ndo_get_stats64        = ip_tunnel_get_stats64,
        .ndo_set_rx_mode        = vxlan_set_multicast_list,
        .ndo_change_mtu         = vxlan_change_mtu,
        .ndo_validate_addr      = eth_validate_addr,
        .ndo_set_mac_address    = eth_mac_addr,
        .ndo_fdb_add            = vxlan_fdb_add,
        .ndo_fdb_del            = vxlan_fdb_delete,
        .ndo_fdb_dump           = vxlan_fdb_dump,
        .ndo_fill_metadata_dst  = vxlan_fill_metadata_dst,
};

static const struct net_device_ops vxlan_netdev_raw_ops = {
        .ndo_init               = vxlan_init,
        .ndo_uninit             = vxlan_uninit,
        .ndo_open               = vxlan_open,
        .ndo_stop               = vxlan_stop,
        .ndo_start_xmit         = vxlan_xmit,
        .ndo_get_stats64        = ip_tunnel_get_stats64,
        .ndo_change_mtu         = vxlan_change_mtu,
        .ndo_fill_metadata_dst  = vxlan_fill_metadata_dst,
};

vxlan_open
vxlan_sock_add
__vxlan_sock_add
vxlan_socket_create
vxlan_create_sock
udp_sock_create
udp_sock_create4
	sock_create_kern
	kernel_bind
	kernel_connect

239.119.1.1


mlx5e_configure_flower
parse_tc_fdb_actions
mlx5e_attach_encap
mlx5e_create_encap_header_ipv4
	mlx5e_route_lookup_ipv4
mlx5_encap_alloc
MLX5_CMD_OP_ALLOC_ENCAP_HEADER

vxlan_netdevice_event
vxlan_push_rx_ports
udp_tunnel_push_rx_port

        .ndo_udp_tunnel_add      = mlx5e_add_vxlan_port,
        .ndo_udp_tunnel_del      = mlx5e_del_vxlan_port,


__vxlan_sock_add
vxlan_socket_create
udp_tunnel_notify_add_rx_port
dev->netdev_ops->ndo_udp_tunnel_add
mlx5e_add_vxlan_port
mlx5e_vxlan_queue_work
mlx5e_vxlan_add_port
mlx5e_vxlan_core_add_port_cmd(MLX5_CMD_OP_ADD_VXLAN_UDP_DPORT)


 0xffffffffa019f600 : mlx5e_get_stats +0x110/0x140 [mlx5_core]
 0xffffffffa1167d94 : __vxlan_sock_add +0x1b4/0x400 [vxlan]
 0xffffffffa1168134 : vxlan_open +0x154/0x250 [vxlan]
 0xffffffff8160fbc9 : __dev_open +0xc9/0x140 [kernel]
 0xffffffff8160fedd : __dev_change_flags +0x9d/0x160 [kernel]
 0xffffffff8160ffc9 : dev_change_flags +0x29/0x60 [kernel]
 0xffffffffa1178179 : vxlan_tnl_create +0x179/0x200 [vport_vxlan]
 0xffffffffa1178212 : vxlan_create +0x12/0x30 [vport_vxlan]
 0xffffffffa114a178 : ovs_vport_add +0xc8/0x120 [openvswitch]
 0xffffffffa113dbc2 : new_vport +0x12/0x50 [openvswitch]
 0xffffffffa113f821 : ovs_vport_cmd_new +0x151/0x2e0 [openvswitch]
 0xffffffff81647dbe : genl_family_rcv_msg +0x20e/0x400 [kernel]
 0xffffffff81647ffc : genl_rcv_msg +0x4c/0xa0 [kernel]
 0xffffffff816472dd : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff81647998 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff81646a41 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff81646dc2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff815ed248 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815edb9a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff815ef164 : __sys_sendmsg +0x54/0x90 [kernel]
parms: netdev=0xffff880c66b20000 ti=0xffffc90000487742
execname: ovs-vswitchd
ts: 5
 0x7fd81ec8f9fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51a2e8 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51a6de : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/sbin/ovs-vswitchd]
 0x51a801 : nl_sock_transact +0x41/0xc0 [/usr/sbin/ovs-vswitchd]
 0x51b670 : nl_transact +0x40/0x60 [/usr/sbin/ovs-vswitchd]
 0x50c388 : dpif_netlink_vport_transact +0xf8/0x280 [/usr/sbin/ovs-vswitchd]
 0x50cf93 : dpif_netlink_port_add__ +0x1d3/0x4c0 [/usr/sbin/ovs-vswitchd]
 0x50d2b6 : dpif_netlink_port_add +0x36/0x60 [/usr/sbin/ovs-vswitchd]
 0x46997e : dpif_port_add +0x4e/0x150 [/usr/sbin/ovs-vswitchd]
 0x425478 : port_add +0xb8/0x130 [/usr/sbin/ovs-vswitchd]
 0x41c821 : ofproto_port_add +0x31/0xf0 [/usr/sbin/ovs-vswitchd]
 0x40b4e9 : bridge_add_ports__ +0x369/0x7e0 [/usr/sbin/ovs-vswitchd]
 0x40ce9f : bridge_reconfigure +0x6af/0x3260 [/usr/sbin/ovs-vswitchd]
 0x410296 : bridge_run +0x226/0x19e0 [/usr/sbin/ovs-vswitchd]
 0x4070b5 : main +0x315/0x450 [/usr/sbin/ovs-vswitchd]
 0x7fd81e3d7b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407e53 : _start +0x29/0x36 [/usr/sbin/ovs-vswitchd]
11




 0xffffffffa0101330 : mlx5e_xmit +0x0/0x30 [mlx5_core]
 0xffffffff81633ef1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff8165e425 : sch_direct_xmit +0x105/0x1b0 [kernel]
 0xffffffff8163457f : __dev_queue_xmit +0x42f/0x630 [kernel]
 0xffffffff81634790 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff816add68 : arp_xmit +0x38/0xa0 [kernel]
 0xffffffff816ade15 : arp_send_dst.part.19 +0x45/0x50 [kernel]
 0xffffffff816aeb72 : arp_process +0x6b2/0x720 [kernel]
 0xffffffff816aed40 : arp_rcv +0x140/0x1c0 [kernel]
 0xffffffff81631160 : __netif_receive_skb_core +0x380/0x9e0 [kernel]
 0xffffffff816317d8 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff81632490 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8163304d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa0103cd4 : mlx5e_handle_rx_cqe_mpwrq +0x594/0x830 [mlx5_core]
 0xffffffffa0103ff3 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0104d13 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff816329f0 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff8175b9b9 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff81095599 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff8175ab31 : do_IRQ +0x51/0xd0 [kernel]
parms: skb=0xffff88064a4a6900 dev=0xffff8805d5590000
execname: swapper/4
ts: 41483e
<no user backtrace at module("mlx5_core").function("mlx5e_xmit@drivers/net/ethernet/mellanox/mlx5/core/en_tx.c:398")>

 0xffffffffa0101330 : mlx5e_xmit +0x0/0x30 [mlx5_core]
 0xffffffff81633ef1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff8165e425 : sch_direct_xmit +0x105/0x1b0 [kernel]
 0xffffffff8163457f : __dev_queue_xmit +0x42f/0x630 [kernel]
 0xffffffff81634790 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff8167bdbf : ip_finish_output2 +0x28f/0x390 [kernel]
 0xffffffff8167d3b6 : ip_finish_output +0x136/0x1e0 [kernel]
 0xffffffff8167de66 : ip_output +0x76/0xe0 [kernel]
 0xffffffff8167d5b5 : ip_local_out +0x35/0x40 [kernel]

 0xffffffff816c669e : iptunnel_xmit +0x13e/0x1a0 [kernel]
 0xffffffffa093342c : udp_tunnel_xmit_skb +0xfc/0x110 [udp_tunnel]
 0xffffffffa093c6f7 : vxlan_xmit_one +0x7e7/0xa50 [vxlan]
 0xffffffffa093e19f : vxlan_xmit +0x33f/0xd50 [vxlan]

 0xffffffff81633ef1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff81634653 : __dev_queue_xmit +0x503/0x630 [kernel]
 0xffffffff81634790 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa091d93d : ovs_vport_send +0xcd/0x180 [openvswitch]
 0xffffffffa090f163 : do_output +0x53/0xf0 [openvswitch]
 0xffffffffa0910931 : do_execute_actions +0x991/0xa40 [openvswitch]
 0xffffffffa0910a20 : ovs_execute_actions +0x40/0x120 [openvswitch]
parms: skb=0xffff8805dde05500 dev=0xffff880c983d0000


 0xffffffffa093de60 : vxlan_xmit +0x0/0xd50 [vxlan]
 0xffffffff81633ef1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff81634653 : __dev_queue_xmit +0x503/0x630 [kernel]
 0xffffffff81634790 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa091d93d : ovs_vport_send +0xcd/0x180 [openvswitch]
 0xffffffffa090f163 : do_output +0x53/0xf0 [openvswitch]
 0xffffffffa0910931 : do_execute_actions +0x991/0xa40 [openvswitch]
 0xffffffffa0910a20 : ovs_execute_actions +0x40/0x120 [openvswitch]
 0xffffffffa0914424 : ovs_dp_process_packet +0x84/0x120 [openvswitch]
 0xffffffffa091d813 : ovs_vport_receive +0x73/0xd0 [openvswitch]
 0xffffffffa091e263 : netdev_frame_hook +0xd3/0x160 [openvswitch]
 0xffffffff81630fba : __netif_receive_skb_core +0x1da/0x9e0 [kernel]
 0xffffffff816317d8 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff81632490 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8163304d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa01033e1 : mlx5e_handle_rx_cqe_rep +0x671/0x9d0 [mlx5_core]
 0xffffffffa0103ff3 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0104d13 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff816329f0 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff8175b9b9 : __do_softirq +0xc9/0x28c [kernel]
parms: skb=0xffff8805dde05100 dev=0xffff8805a6304000

 0xffffffffa0933330 : udp_tunnel_xmit_skb +0x0/0x110 [udp_tunnel]
 0xffffffffa093c6f7 : vxlan_xmit_one +0x7e7/0xa50 [vxlan]
 0xffffffffa093e19f : vxlan_xmit +0x33f/0xd50 [vxlan]
 0xffffffff81633ef1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff81634653 : __dev_queue_xmit +0x503/0x630 [kernel]
 0xffffffff81634790 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa091d93d : ovs_vport_send +0xcd/0x180 [openvswitch]
 0xffffffffa090f163 : do_output +0x53/0xf0 [openvswitch]
 0xffffffffa0910931 : do_execute_/ctions +0x991/0xa40 [openvswitch]
 0xffffffffa0910a20 : ovs_execute_actions +0x40/0x120 [openvswitch]
 0xffffffffa0914424 : ovs_dp_process_packet +0x84/0x120 [openvswitch]
 0xffffffffa091d813 : ovs_vport_receive +0x73/0xd0 [openvswitch]
 0xffffffffa091e263 : netdev_frame_hook +0xd3/0x160 [openvswitch]
 0xffffffff81630fba : __netif_receive_skb_core +0x1da/0x9e0 [kernel]
 0xffffffff816317d8 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff81632490 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8163304d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa01033e1 : mlx5e_handle_rx_cqe_rep +0x671/0x9d0 [mlx5_core]
 0xffffffffa0103ff3 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0104d13 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
parms: rt=0xffff88057a869600 sk=0xffff8806a7116cc0 skb=0xffff880ca10f2500 src=0x1201a8c0 dst=0x1301a8c0 tos=0x0 ttl=0x40 df=0x40 src_port=0x10b4 dst_port=0xb512 xnet=0x0 nocheck=0x1

[root@bjglab-18 stap]# x 12b5
0x12b5 = 4789 = 4.68K = 0.00M = 0.00G
0000 0000 0000 0000 0001 0010 1011 0101


vxlan_vs_find_vni
	/* For flow based devices, map all packets to VNI 0 */
	if (vs->flags & VXLAN_F_COLLECT_METADATA)
		vni = 0;

===mlxsw===

MLXSW_TRAP_ID_MAX

===tc===

tc_filter_modify

===netlink===

 0xffffffffa08fca90 : fl_change +0x0/0x0 [cls_flower]
 0xffffffff8163c2c3 : tc_ctl_tfilter +0x813/0x9a0 [kernel]
 0xffffffff8162058c : rtnetlink_rcv_msg +0xac/0x240 [kernel]
 0xffffffff81643ced : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff8161a448 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81643451 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff816437d2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff815e9348 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815e9c9a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff815eb264 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff815eb2b2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8172c767 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: net=0xffffffff81cd28c0 in_skb=0xffff8810336fb300 tp=0xffff880f234a05a0 base=0x0 handle=0x80000001 tca=0xffffc90007e2ba98 arg=0xffffc90007e2ba90 ovr=0x0
execname: tc
ts: 3
 0x7f6fe9f0b7a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x4396d7 : __rtnl_talk +0xd7/0x400 [/usr/sbin/tc]
 0x40bd8d : tc_filter_modify +0x3ed/0x800 [/usr/sbin/tc]
 0x407e92 : main +0x112/0x410 [/usr/sbin/tc]
 0x7f6fe9e34b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4081b9 : _start +0x29/0x30 [/usr/sbin/tc]

include/net/pkt_cls.h

tc_dump_tfilter walks all tcf_proto
fl_walk	        walks all cls_fl_filter
fl_dump         dumps all keys

 0xffffffffa0a343b0 : tcf_gact_dump  +0x0/0x190 [act_gact]
 0xffffffff8163c6b7 : tcf_action_dump_1  +0xd7/0x140 [kernel]
 0xffffffff8163cb64 : tcf_action_dump  +0x94/0xf0 [kernel]
 0xffffffff81639ed4 : tcf_exts_dump  +0xe4/0x1f0 [kernel]
 0xffffffffa0a27c3a : fl_dump  +0x3ea/0xb70 [cls_flower]
 0xffffffff8163a4ef : tcf_fill_node  +0x10f/0x180 [kernel]
 0xffffffff8163a84a : TCF_node_dump  +0x3a/0x40 [kernel]
 0xffffffffa0a27154 : fl_walk  +0x64/0x80 [cls_flower]
 0xffffffff8163a6f3 : tc_dump_tfilter  +0x193/0x2b0 [kernel]
 0xffffffff8163f9a2 : netlink_dump  +0x122/0x290 [kernel]
 0xffffffff8164096f : __netlink_dump_start  +0x15f/0x190 [kernel]
 0xffffffff8161fbfe : rtnetlink_rcv_msg  +0x1ae/0x220 [kernel]
 0xffffffff81642987 : netlink_rcv_skb  +0xe7/0x120 [kernel]

 0xffffffff8161a338 : rtnetlink_rcv  +0x28/0x30 [kernel]			# rtnl_lock/rtnl_unlock

static void rtnetlink_rcv(struct sk_buff *skb)
{
        rtnl_lock();
        netlink_rcv_skb(skb, &rtnetlink_rcv_msg);
        rtnl_unlock();
}

netlink_unicast
netlink_unicast_kernel
nlk->netlink_rcv

 0xffffffff816420fc : netlink_unicast  +0x18c/0x240 [kernel]
 0xffffffff81642475 : netlink_sendmsg  +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg  +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg   +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: skb=0xffff880b0e767600 a=0xffff880b8d667300 bind=0x0 ref=0x0
execname: tc
ts: 1
 0x7f88d8cea7d0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x433440 : rtnl_dump_request +0xb0/0xc0 [/usr/sbin/tc]
 0x40b844 : tc_filter_list +0x144/0x4f0 [/usr/sbin/tc]
 0x407cb0 : main +0x100/0x3b5 [/usr/sbin/tc]
 0x7f88d8c13b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407f8e : _start +0x29/0x2b [/usr/sbin/tc]



https://tools.ietf.org/html/rfc3549

   Process ID (PID): 32 bits
   The PID of the process sending the message.  The PID is used by the
   kernel to multiplex to the correct sockets.  A PID of zero is used
   when sending messages to user space from the kernel.


net/netlink/af_netlink.c
struct netlink_table *nl_table __read_mostly;
struct netlink_table *nl_table

p nl_table

NETLINK_ROUTE

output *(struct netlink_table *) nl_table

hash -a 0xffff88102aa1e180 -s netlink_sock -m node -p | grep portid
  portid = 0x578007b7,
  dst_portid = 0x0,
  portid = 0xad0007b7,
  dst_portid = 0x0,
  portid = 0x18f9,
  dst_portid = 0x0,


5d1
5040
510e
510f

tc:
rtnl_open_byproto

to get portid:
call netlink_autobind()

 0xffffffff8165d490 : netlink_autobind.isra.37 +0x0/0x100 [kernel]
 0xffffffff8165df14 : netlink_bind +0x1b4/0x250 [kernel]
 0xffffffff816035c2 : SYSC_bind +0xd2/0x110 [kernel]
 0xffffffff81604e5e : SyS_bind +0xe/0x10 [kernel]
 0xffffffff81003a77 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8174b327 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: sock=?
execname: tc
ts: 254
 0x7f0d7aca3427 : bind +0x7/0x30 [/usr/lib64/libc-2.17.so]
 0x439af9 : rtnl_open_byproto +0xd9/0x1f0 [/usr/sbin/tc]
 0x40863b : batch +0x6b/0x1c0 [/usr/sbin/tc]
 0x7f0d7abccb35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4081b9 : _start +0x29/0x30 [/usr/sbin/tc]


 0xffffffff8165dfe6 : netlink_release +0x36/0x510 [kernel]
 0xffffffff81601d3f : sock_release +0x1f/0x80 [kernel]
 0xffffffff81601db2 : sock_close +0x12/0x20 [kernel]
 0xffffffff8122dd21 : __fput +0xe1/0x210 [kernel]
 0xffffffff8122de8e : ____fput +0xe/0x10 [kernel]
 0xffffffff810a6363 : task_work_run +0x83/0xa0 [kernel]
 0xffffffff81082b81 : exit_to_usermode_loop +0x66/0x92 [kernel]
 0xffffffff81003b4a : do_syscall_64 +0x13a/0x150 [kernel]
 0xffffffff8174b327 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: sk=?
execname: tc
ts: 2
 0x7f38a8248ba0 : __close_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x439a0f : rtnl_close +0xf/0x20 [/usr/sbin/tc]
 0x4086ea : batch +0x11a/0x1c0 [/usr/sbin/tc]
 0x7f38a8181b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4081b9 : _start +0x29/0x30 [/usr/sbin/tc]

address family:	AF_NETLINK
protocl:	NETLINK_ROUTE
message type:	RTM_NEWTFILTER

===ovs===

ovs-appctl vlog/list

ovs-appctl vlog/set ANY:console:dbg
ovs-appctl vlog/set ANY:syslog:dbg
ovs-appctl vlog/set ANY:file:dbg

ovs-appctl vlog/set ovs-vswitchd:console:dbg
ovs-appctl vlog/set ovs-vswitchd:syslog:dbg
ovs-appctl vlog/set ovs-vswitchd:file:dbg


p netdev_flow_api_enabled
p tc_policy


p netdev_flow_api_enabled
p tc_policy

p netdev_flow_api_enabled

./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc

static void rtnetlink_rcv(struct sk_buff *skb)
{
        rtnl_lock();
        netlink_rcv_skb(skb, &rtnetlink_rcv_msg);
        rtnl_unlock();
}

netlink_rcv_skb
	while

/* Process one rtnetlink message. */

static int rtnetlink_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh,
                             struct netlink_ext_ack *extack)

 0xffffffffa09d7a90 : fl_change +0x0/0x0 [cls_flower]
 0xffffffff8163c2a3 : tc_ctl_tfilter +0x813/0x9a0 [kernel]
 0xffffffff8162056c : rtnetlink_rcv_msg +0xac/0x240 [kernel]
 0xffffffff81643ded : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff8161a428 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81643551 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff816438d2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff815e9348 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815e9c9a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff815eb264 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff815eb2b2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8172c827 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: net=0xffffffff81cd28c0 in_skb=0xffff880fac190b00 tp=0xffff880fe9ab5660 base=0xfff3 handle=0x0 tca=0xffffc90005367a98 arg=0xffffc90005367a90 ovr=0x0
execname: ovs-vswitchd
ts: 6
 0x7f22d4c199fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51ef68 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51f2d4 : nl_sock_transact_multiple.part.8 +0x34/0x100 [/usr/sbin/ovs-vswitchd]
 0x52033b : nl_transact_multiple +0x8b/0xa0 [/usr/sbin/ovs-vswitchd]
 0x522616 : tc_insert_multiple +0x186/0x250 [/usr/sbin/ovs-vswitchd]
 0x51b9fd : netdev_start_test_helper +0x1fd/0x2c0 [/usr/sbin/ovs-vswitchd]
 0x5035cf : unixctl_server_run +0x39f/0x4b0 [/usr/sbin/ovs-vswitchd]
 0x407bff : main +0x34f/0x480 [/usr/sbin/ovs-vswitchd]
 0x7f22d4361b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4089b3 : _start +0x29/0x36 [/usr/sbin/ovs-vswitchd]


#time ovs-appctl offloads/test 2 50 100 1
ethtool -K eth0 hw-tc-offload off
restart-ovs
time ovs-appctl offloads/test 2 50 100 1
restart-ovs
time ovs-appctl offloads/test 2 50 100 0
restart-ovs
time ovs-appctl offloads/test 2 50 1000 1
restart-ovs
time ovs-appctl offloads/test 2 50 1000 0
restart-ovs
time ovs-appctl offloads/test 2 50 8000 1
time ovs-appctl offloads/test 2 50 8000 0
restart-ovs
time ovs-appctl offloads/test 2 50 8000 0
restart-ovs
time ovs-appctl offloads/test 2 50 250 1


open_dpif_backer

/* All existing ofproto_backer instances, indexed by ofproto->up.type. */
struct shash all_dpif_backers = SHASH_INITIALIZER(&all_dpif_backers);

/* All existing ofproto_dpif instances, indexed by ->up.name. */
struct hmap all_ofproto_dpifs = HMAP_INITIALIZER(&all_ofproto_dpifs);


(gdb) b find_match_wc
Breakpoint 1 at 0x45837b: file lib/classifier.c, line 1646.
(gdb) c
Continuing.
[Switching to Thread 0x7f3b6d0e0700 (LWP 3173)]

Breakpoint 1, classifier_lookup__ (cls=0x20e7768, version=version@entry=6, flow=flow@entry=0x7f3b6d0a0bc0, wc=wc@entry=0x7f3b6d0c0bf8, allow_conjunctive_matches=allow_conjunctive_matches@entry=true) at lib/classifier.c:969
969             match = find_match_wc(subtable, version, flow, trie_ctx, cls->n_tries,
(gdb) bt
#0  classifier_lookup__ (cls=0x20e7768, version=version@entry=6, flow=flow@entry=0x7f3b6d0a0bc0, wc=wc@entry=0x7f3b6d0c0bf8, allow_conjunctive_matches=allow_conjunctive_matches@entry=true) at lib/classifier.c:969
#1  0x000000000045b19b in classifier_lookup (cls=<optimized out>, version=version@entry=6, flow=flow@entry=0x7f3b6d0a0bc0, wc=wc@entry=0x7f3b6d0c0bf8) at lib/classifier.c:1163
#2  0x000000000042b098 in rule_dpif_lookup_in_table (ofproto=0x20de740, wc=0x7f3b6d0c0bf8, flow=0x7f3b6d0a0bc0, table_id=0 '\000', version=6) at ofproto/ofproto-dpif.c:4031
#3  rule_dpif_lookup_from_table (ofproto=0x20de740, version=6, flow=flow@entry=0x7f3b6d0a0bc0, wc=0x7f3b6d0c0bf8, stats=0x7f3b6d0a05d0, table_id=table_id@entry=0x7f3b6d09f85b "", in_port=4, may_packet_in=may_packet_in@entry=true,
    honor_table_miss=honor_table_miss@entry=true, xcache=0x0) at ofproto/ofproto-dpif.c:4136
#4  0x000000000044606b in xlate_actions (xin=xin@entry=0x7f3b6d0a0bb0, xout=xout@entry=0x7f3b6d0c0ba0) at ofproto/ofproto-dpif-xlate.c:6348
#5  0x000000000043904b in upcall_xlate (wc=0x7f3b6d0c0bf8, odp_actions=0x7f3b6d0c0bb8, upcall=0x7f3b6d0c0b40, udpif=0x2101480) at ofproto/ofproto-dpif-upcall.c:1153
#6  process_upcall (udpif=udpif@entry=0x2101480, upcall=upcall@entry=0x7f3b6d0c0b40, odp_actions=odp_actions@entry=0x7f3b6d0c0bb8, wc=wc@entry=0x7f3b6d0c0bf8) at ofproto/ofproto-dpif-upcall.c:1292
#7  0x0000000000439b65 in recv_upcalls (handler=0x2100b90, handler=0x2100b90) at ofproto/ofproto-dpif-upcall.c:824
#8  0x000000000043a09a in udpif_upcall_handler (arg=0x2100b90) at ofproto/ofproto-dpif-upcall.c:746
#9  0x00000000004d3644 in ovsthread_wrapper (aux_=<optimized out>) at lib/ovs-thread.c:348
#10 0x00007f3b6f1eddc5 in start_thread () from /lib64/libpthread.so.0
#11 0x00007f3b6ea1276d in clone () from /lib64/libc.so.6

add_internal_miss_flow

add_internal_flows
ofproto_dpif_add_internal_flow
rule_dpif_lookup_in_table
classifier_lookup
classifier_lookup__
find_match_wc		# wildcard
find_match

gdb  /usr/sbin/ovs-vswitchd 19139

netdev_flow_api_enabled

netdev_set_flow_api_enabled

WARNING: DWARF expression stack underflow in CFI
 0xffffffffa00e2c20 : mlx5e_configure_flower +0x0/0x11c0 [mlx5_core]
 0xffffffffa00e5f09 : mlx5e_rep_ndo_setup_tc +0x69/0xc0 [mlx5_core]
 0xffffffffa115cc1b : fl_change +0x88b/0xb10 [cls_flower]
 0xffffffff8163ad7d : tc_ctl_tfilter +0x42d/0x7c0 [kernel]
 0xffffffff8161fb3e : rtnetlink_rcv_msg +0xee/0x220 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff8161a338 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: priv=0xffff880c692408c0 protocol=0x8 f=0xffffc90001da7910
execname: handler26
ts: 2
 0x7fddc3a729fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51a2e8 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51a6de : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/sbin/ovs-vswitchd]
 0x51a801 : nl_sock_transact +0x41/0xc0 [/usr/sbin/ovs-vswitchd]
 0x51b670 : nl_transact +0x40/0x60 [/usr/sbin/ovs-vswitchd]
 0x50e5ec : tc_replace_flower +0x26c/0xa30 [/usr/sbin/ovs-vswitchd]
 0x5104d2 : netdev_tc_flow_put +0xba2/0x1160 [/usr/sbin/ovs-vswitchd]
 0x50ae8a : dpif_netlink_operate +0x26a/0x5f0 [/usr/sbin/ovs-vswitchd]
 0x46af53 : dpif_operate +0x63/0x2e0 [/usr/sbin/ovs-vswitchd]
 0x439d81 : recv_upcalls.isra.21 +0x4a1/0x770 [/usr/sbin/ovs-vswitchd]
 0x43a09a : udpif_upcall_handler +0x4a/0x80 [/usr/sbin/ovs-vswitchd]
 0x4d3644 : ovsthread_wrapper +0x74/0x80 [/usr/sbin/ovs-vswitchd]
 0x7fddc3a6bdc5 : start_thread +0xc5/0x300 [/usr/lib64/libpthread-2.17.so]
 0x7fddc329076d : clone +0x6d/0x90 [/usr/lib64/libc-2.17.so]


const struct ofproto_class ofproto_dpif_class = {

udpif_set_threads
	udpif_start_threads
		udpif_upcall_handler
			recv_upcalls
				handle_upcalls
					dpif_operate
						dpif_flow_put

dpif_operate

struct udpif_key {
	ovs_u128 ufid;                 /* Unique flow identifier. */
}

dpif_flow_hash	set 128bit ufid

 0xffffffffa0a5ee30 : ovs_flow_tbl_lookup_ufid +0x0/0x1e0 [openvswitch]
 0xffffffffa0a54c47 : ovs_flow_cmd_del +0x217/0x280 [openvswitch]
 0xffffffff81643328 : genl_family_rcv_msg +0x1f8/0x3d0 [kernel]
 0xffffffff8164354c : genl_rcv_msg +0x4c/0x90 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff81643118 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: tbl=0xffff880c85f36920 ufid=0xffffc9000644f878
execname: revalidator29
ts: 35
 0x7f3e2a58c9fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51a2e8 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51a6de : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/sbin/ovs-vswitchd]
 0x51b71b : nl_transact_multiple +0x8b/0xa0 [/usr/sbin/ovs-vswitchd]
 0x509db1 : dpif_netlink_operate__ +0x181/0x620 [/usr/sbin/ovs-vswitchd]
 0x50aef6 : dpif_netlink_operate +0x2d6/0x5f0 [/usr/sbin/ovs-vswitchd]
 0x46af53 : dpif_operate +0x63/0x2e0 [/usr/sbin/ovs-vswitchd]
 0x4373c3 : push_dp_ops +0x73/0x260 [/usr/sbin/ovs-vswitchd]
 0x43a64d : revalidate.isra.20 +0x57d/0x730 [/usr/sbin/ovs-vswitchd]
 0x43a88b : udpif_revalidator +0x8b/0x390 [/usr/sbin/ovs-vswitchd]
 0x4d3644 : ovsthread_wrapper +0x74/0x80 [/usr/sbin/ovs-vswitchd]
 0x7f3e2a585dc5 : start_thread +0xc5/0x300 [/usr/lib64/libpthread-2.17.so]
 0x7f3e29daa76d : clone +0x6d/0x90 [/usr/lib64/libc-2.17.so]

 0xffffffffa0a5ee30 : ovs_flow_tbl_lookup_ufid +0x0/0x1e0 [openvswitch]
 0xffffffffa0a54c47 : ovs_flow_cmd_del +0x217/0x280 [openvswitch]
 0xffffffff81643328 : genl_family_rcv_msg +0x1f8/0x3d0 [kernel]
 0xffffffff8164354c : genl_rcv_msg +0x4c/0x90 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff81643118 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: tbl=0xffff880c85f36920 ufid=0xffffc9000644f878
execname: revalidator29
ts: 35
 0x7f3e2a58c9fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51a2e8 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51a6de : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/sbin/ovs-vswitchd]
 0x51b71b : nl_transact_multiple +0x8b/0xa0 [/usr/sbin/ovs-vswitchd]
 0x509db1 : dpif_netlink_operate__ +0x181/0x620 [/usr/sbin/ovs-vswitchd]
 0x50aef6 : dpif_netlink_operate +0x2d6/0x5f0 [/usr/sbin/ovs-vswitchd]
 0x46af53 : dpif_operate +0x63/0x2e0 [/usr/sbin/ovs-vswitchd]
 0x4373c3 : push_dp_ops +0x73/0x260 [/usr/sbin/ovs-vswitchd]
 0x43a64d : revalidate.isra.20 +0x57d/0x730 [/usr/sbin/ovs-vswitchd]
 0x43a88b : udpif_revalidator +0x8b/0x390 [/usr/sbin/ovs-vswitchd]
 0x4d3644 : ovsthread_wrapper +0x74/0x80 [/usr/sbin/ovs-vswitchd]
 0x7f3e2a585dc5 : start_thread +0xc5/0x300 [/usr/lib64/libpthread-2.17.so]
 0x7f3e29daa76d : clone +0x6d/0x90 [/usr/lib64/libc-2.17.so]

crash> sw_flow 0xffff880c801d0f80
struct sw_flow {
  rcu = {
    next = 0xffff880c801d07c0,
    func = 0xffffffffa0a5e210 <rcu_free_flow_callback>
  },
  flow_table = {
    node = {{
        next = 0x0,
        pprev = 0xdead000000000200
      }, {
        next = 0x0,
        pprev = 0x0
      }},
    hash = 0xb5513b79
  },
  ufid_table = {
    node = {{
        next = 0x0,
        pprev = 0xdead000000000200
      }, {
        next = 0x0,
        pprev = 0x0
      }},
    hash = 0x67454c75
  },
  stats_last_writer = 0xffffffff,
  key = {
    tun_opts
    tun_opts_len = 0x0,
    tun_key = {
      tun_id = 0x100000000000000,
      u = {
        ipv4 = {
          src = 0x1301a8c0,
          dst = 0x1201a8c0
        },
        ipv6 = {
          src = {
            in6_u = {
              u6_addr8 = "\300\250\001\023\300\250\001\022\000\000\000\000\000\000\000",
              u6_addr16 = {0xa8c0, 0x1301, 0xa8c0, 0x1201, 0x0, 0x0, 0x0, 0x0},
              u6_addr32 = {0x1301a8c0, 0x1201a8c0, 0x0, 0x0}
            }
          },
          dst = {
            in6_u = {
              u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
              u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
              u6_addr32 = {0x0, 0x0, 0x0, 0x0}
            }
          }
        }
      },
      tun_flags = 0x400,
      tos = 0x0,
      ttl = 0x0,
      label = 0x0,
      tp_src = 0x0,
      tp_dst = 0x0
    },
    phy = {
      priority = 0x0,
      skb_mark = 0x0,
      in_port = 0x2
    },
    mac_proto = 0x1,
    tun_proto = 0x2,
    ovs_flow_hash = 0x0,
    recirc_id = 0x0,
    eth = {
      src = "\n^s\330rE",
      dst = "\002%\320\342\030P",
      vlan = {
        tpid = 0x0,
        tci = 0x0
      \\},
      cvlan = {
        tpid = 0x0,
        tci = 0x0
      },
      type = 0x608
    },
    ct_state = 0x0,
    ct_orig_proto = 0x0,
    {
      mpls = {
        top_lse = 0x0
      },
      ip = {
        proto = 0x0,
        tos = 0x0,
        ttl = 0x0,
        frag = 0x0
      }
    },
    ct_zone = 0x0,
    tp = {
      src = 0x0,
      dst = 0x0,
      flags = 0x0
    },
    {
      ipv4 = {
        addr = {
          src = 0x0,
          dst = 0x0
        },
        {
          ct_orig = {
            src = 0x0,
            dst = 0x0
          },
          arp = {
            sha = "\000\000\000\000\000",
            tha = "\000\000\000\000\000"
          }
        }
      },
      ipv6 = {
        addr = {
          src = {
            in6_u = {
              u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
              u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
              u6_addr32 = {0x0, 0x0, 0x0, 0x0}
            }
          },
          dst = {
            in6_u = {
              u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
              u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
              u6_addr32 = {0x0, 0x0, 0x0, 0x0}
            }
          }
        },
        label = 0x0,
        {
          ct_orig = {
            src = {
              in6_u = {
                u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
                u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                u6_addr32 = {0x0, 0x0, 0x0, 0x0}
              }
            },
            dst = {
              in6_u = {
                u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
                u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                u6_addr32 = {0x0, 0x0, 0x0, 0x0}
              }
            }
          },
          nd = {
            target = {
              in6_u = {
                u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
                u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                u6_addr32 = {0x0, 0x0, 0x0, 0x0}
              }
            },
            sll = "\000\000\000\000\000",
            tll = "\000\000\000\000\000"
          }
        }
      }
    },
    ct = {
      orig_tp = {
        src = 0x0,
        dst = 0x0
      },
      mark = 0x0,
      labels = {
        {
          ct_labels = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
          ct_labels_32 = {0x0, 0x0, 0x0, 0x0}
        }
      }
    }
  },
  id = {
    ufid_len = 0x10,
    {
      ufid = {0x8306ec23, 0x81dd4009, 0xb41ca9f5, 0x91693a89},
      unmasked_key = 0x81dd40098306ec23
    }
  },
  mask = 0xffff880b58c87400,
  sf_acts = 0xffff880af0bc4d00,
  stats = 0xffff880c801d11e0
}


 0xffffffffa0a5f140 : ovs_flow_tbl_insert +0x0/0x470 [openvswitch]
 0xffffffffa0a54f6d : ovs_flow_cmd_new +0x2bd/0x490 [openvswitch]
 0xffffffff81643328 : genl_family_rcv_msg +0x1f8/0x3d0 [kernel]
 0xffffffff8164354c : genl_rcv_msg +0x4c/0x90 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff81643118 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: table=0xffff880c85f36920 flow=0xffff880c801d07c0 mask=0xffffc90006427860
execname: handler24
ts: 1
 0x7f3e2a58c9fd : __sendmsg_nocancel +0x24/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51a2e8 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51a6de : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/sbin/ovs-vswitchd]
 0x51b71b : nl_transact_multiple +0x8b/0xa0 [/usr/sbin/ovs-vswitchd]
 0x509db1 : dpif_netlink_operate__ +0x181/0x620 [/usr/sbin/ovs-vswitchd]
 0x50aef6 : dpif_netlink_operate +0x2d6/0x5f0 [/usr/sbin/ovs-vswitchd]
 0x46af53 : dpif_operate +0x63/0x2e0 [/usr/sbin/ovs-vswitchd]
 0x439d81 : recv_upcalls.isra.21 +0x4a1/0x770 [/usr/sbin/ovs-vswitchd]
 0x43a09a : udpif_upcall_handler +0x4a/0x80 [/usr/sbin/ovs-vswitchd]
 0x4d3644 : ovsthread_wrapper +0x74/0x80 [/usr/sbin/ovs-vswitchd]
 0x7f3e2a585dc5 : start_thread +0xc5/0x300 [/usr/lib64/libpthread-2.17.so]
 0x7f3e29daa76d : clone +0x6d/0x90 [/usr/lib64/libc-2.17.so]

-l vport.hash_node -s vport

crash> list vport_ops_list -l vport_ops.list  -s vport_ops
ffffffffa0a6b1c0
struct vport_ops {
  type = OVS_VPORT_TYPE_UNSPEC,
  create = 0xffffffffa0a6b190 <ovs_mutex+16>,
  destroy = 0xffffffffa0a6b190 <ovs_mutex+16>,
  set_options = 0xffffffffa0a57b40 <dp_device_event>,
  get_options = 0xffffffffa0a861c0 <vxlan_notifier_block>,
  send = 0x0,
  owner = 0x0,
  list = {
    next = 0xffffffffa0a6b218 <ovs_internal_vport_ops+56>,
    prev = 0xffffffffa0a91038
  }
}
ffffffffa0a6b218
struct vport_ops {
  type = OVS_VPORT_TYPE_INTERNAL,
  create = 0xffffffffa0a62310 <internal_dev_create>,
  destroy = 0xffffffffa0a622b0 <internal_dev_destroy>,
  set_options = 0x0,
  get_options = 0x0,
  send = 0xffffffffa0a625e0 <internal_dev_recv>,
  owner = 0xffffffffa0a6b480 <__this_module>,
  list = {
    next = 0xffffffffa0a6b278 <ovs_netdev_vport_ops+56>,
    prev = 0xffffffffa0a6b1c0 <vport_ops_list>
  }
}
ffffffffa0a6b278
struct vport_ops {
  type = OVS_VPORT_TYPE_NETDEV,
  create = 0xffffffffa0a629a0 <netdev_create>,
  destroy = 0xffffffffa0a62bc0 <netdev_destroy>,
  set_options = 0x0,
  get_options = 0x0,
  send = 0xffffffff81609ee0 <dev_queue_xmit>,
  owner = 0xffffffffa0a6b480 <__this_module>,
  list = {
    next = 0xffffffffa0a91038,
    prev = 0xffffffffa0a6b218 <ovs_internal_vport_ops+56>
  }
}
ffffffffa0a91038
struct vport_ops {
  type = OVS_VPORT_TYPE_VXLAN,
  create = 0xffffffffa0a8f300,
  destroy = 0xffffffffa0a62c00 <ovs_netdev_tunnel_destroy>,
  set_options = 0x0,
  get_options = 0xffffffffa0a8f000,
  send = 0xffffffff81609ee0 <dev_queue_xmit>,
  owner = 0xffffffffa0a91080,
  list = {
    next = 0xffffffffa0a6b1c0 <vport_ops_list>,
    prev = 0xffffffffa0a6b278 <ovs_netdev_vport_ops+56>
  }
}

 0xffffffff8160c850 : register_netdevice +0x0/0x450 [kernel]
 0xffffffffa0a815d0 : __vxlan_dev_create +0xb0/0x130 [vxlan]
 0xffffffffa0a8172b : vxlan_dev_create +0x6b/0x100 [vxlan]
 0xffffffffa0a8f25b : vxlan_tnl_create +0x15b/0x200 [vport_vxlan]
 0xffffffffa0a8f312 : vxlan_create +0x12/0x0 [vport_vxlan]
 0xffffffffa0a61a85 : ovs_vport_add +0xc5/0x120 [openvswitch]
 0xffffffffa0a544e2 : new_vport +0x12/0x50 [openvswitch]
 0xffffffffa0a559f9 : ovs_vport_cmd_new +0x149/0x2e0 [openvswitch]
 0xffffffff81643328 : genl_family_rcv_msg +0x1f8/0x3d0 [kernel]
 0xffffffff8164354c : genl_rcv_msg +0x4c/0x90 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff81643118 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]



 0xffffffffa0a804b0 : __vxlan_find_mac +0x0/0xf0 [vxlan]
 0xffffffffa0a805d5 : vxlan_fdb_delete_default +0x35/0x60 [vxlan]
 0xffffffffa0a8061f : vxlan_uninit +0x1f/0x30 [vxlan]
 0xffffffff81605d23 : rollback_registered_many +0x253/0x410 [kernel]
 0xffffffff8160608c : unregister_netdevice_many +0x1c/0x80 [kernel]
 0xffffffff81618f3b : rtnl_delete_link +0x4b/0x70 [kernel]
 0xffffffffa0a62c69 : ovs_netdev_tunnel_destroy +0x69/0x70 [openvswitch]
 0xffffffffa0a61b46 : ovs_vport_del +0x46/0x50 [openvswitch]
 0xffffffffa0a55cbb : ovs_vport_cmd_del +0x12b/0x190 [openvswitch]
 0xffffffff81643328 : genl_family_rcv_msg +0x1f8/0x3d0 [kernel]
 0xffffffff8164354c : genl_rcv_msg +0x4c/0x90 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff81643118 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: vxlan=0xffff880c870588c0 mac=0xffffffffa0a868c0 vni=0x0
execname: ovs-vswitchd
ts: 85
 0x7efd7a1089e0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libpthread-2.17.so]
 0x51a2e8 : nl_sock_transact_multiple__ +0xf8/0x430 [/usr/sbin/ovs-vswitchd]
 0x51a6de : nl_sock_transact_multiple.part.8 +0xbe/0x1a0 [/usr/sbin/ovs-vswitchd]
 0x51a842 : nl_sock_transact +0x82/0xc0 [/usr/sbin/ovs-vswitchd]
 0x51b670 : nl_transact +0x40/0x60 [/usr/sbin/ovs-vswitchd]
 0x50c388 : dpif_netlink_vport_transact +0xf8/0x280 [/usr/sbin/ovs-vswitchd]
 0x50cd8c : dpif_netlink_port_del +0x4c/0x80 [/usr/sbin/ovs-vswitchd]
 0x469a99 : dpif_port_del +0x19/0x80 [/usr/sbin/ovs-vswitchd]
 0x42ee27 : construct +0x677/0x8e0 [/usr/sbin/ovs-vswitchd]
 0x41b1f5 : ofproto_create +0x335/0x720 [/usr/sbin/ovs-vswitchd]
 0x40cdee : bridge_reconfigure +0x5fe/0x3260 [/usr/sbin/ovs-vswitchd]
 0x410296 : bridge_run +0x226/0x19e0 [/usr/sbin/ovs-vswitchd]
 0x4070b5 : main +0x315/0x450 [/usr/sbin/ovs-vswitchd]
 0x7efd79850b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407e53 : _start +0x29/0x36 [/usr/sbin/ovs-vswitchd]


bridge_run
netdev_set_flow_api_enabled

netdev_tc_flow_put

2017-05-18T06:38:59.196Z|00030|netdev|INFO|netdev: Flow API Enabled
2017-05-18T06:38:59.196Z|00031|tc|INFO|tc: Using policy 'none'
2017-05-18T06:38:59.196Z|00032|netdev_tc_offloads|INFO|added ingress qdisc to eth1
2017-05-18T06:38:59.196Z|00033|netdev_tc_offloads|INFO|added ingress qdisc to eth0

[chrism@bjglab-18 openvswitch]$ git remote -v
origin  ssh://10.7.0.100:29418/openvswitch (fetch)
origin  ssh://10.7.0.100:29418/openvswitch (push)

  715  git fetch origin
  716  git branch
  717  git fetch origin hw-offload-fixes-for-v8
  718  git checkout FETCH_HEAD
  719  git slog
  720  git branch
  721  git checkout -b hw-offload-fixes-for-v8

  722  ./boot.sh
  723  git grep config Documentation/|grep prefi
  724  ./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc
  725  make -j
  726  sudo make install

crash> vport 0xffff880c331a9380
struct vport {
  dev = 0xffff880c8b020000,
  dp = 0xffff88069bf7b180,
  upcall_portids = 0xffff880ca51aeb40,
  port_no = 0x2,
  hash_node = {
    next = 0x0,
    pprev = 0xffff88017c19ef98
  },
  dp_hash_node = {
    next = 0x0,
    pprev = 0xffff880c27354010
  },
  ops = 0xffffffffa087c1c0 <ovs_netdev_vport_ops>,
  detach_list = {
    next = 0x0,
    prev = 0x0
  },
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
crash> vport_ops ovs_netdev_vport_ops
struct vport_ops {
  type = OVS_VPORT_TYPE_NETDEV,
  create = 0xffffffffa08743d0 <netdev_create>,
  destroy = 0xffffffffa08744f0 <netdev_destroy>,
  set_options = 0x0,
  get_options = 0x0,
  send = 0xffffffff816274a0 <dev_queue_xmit>,
  owner = 0xffffffffa087c480 <__this_module>,
  list = {
    next = 0xffffffffa087c140 <vport_ops_list>,
    prev = 0xffffffffa087c198 <ovs_internal_vport_ops+56>
  }
}

ovs-vsctl add-port br1 int0 -- set interface int0 type=internal

[root@bjglab-19 net-next]#  ovs-vsctl set port eth0 tag=100
[root@bjglab-19 net-next]#  ovs-vsctl remove port eth0 tag 100


ovsdb-tool show-log  -m | less


lib/dpif.h

ovs_flow_cmd_new

ovs_netdev_link
        err = netdev_rx_handler_register(vport->dev, netdev_frame_hook, vport);

ovs_dp_upcall
	queue_userspace_packet

# extracts a flow key from an Ethernet frame.
key_extract

http://networkstatic.net/configuring-vxlan-and-gre-tunnels-on-openvswitch/
apt-get update
apt-get install -y git automake autoconf gcc uml-utilities libtool build-essential git pkg-config linux-headers-`uname -r`
wget http://openvswitch.org/releases/openvswitch-1.10.0.tar.gz
tar zxvf openvswitch-1.10.0.tar.gz
cd openvswitch-1.10.0
./boot.sh
./configure --with-linux=/lib/modules/`uname -r`/build
make && make install
make modules_install
insmod datapath/linux/openvswitch.ko
mkdir -p /usr/local/etc/openvswitch
ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema
ovsdb-server -v --remote=punix:/usr/local/var/run/openvswitch/db.sock \
                     --remote=db:Open_vSwitch,manager_options \
                     --private-key=db:SSL,private_key \
                     --certificate=db:SSL,certificate \
                     --pidfile --detach --log-file
ovs-vsctl --no-wait init
ovs-vswitchd --pidfile --detach
ovs-vsctl show


mkdir -p /etc/openvswitch
ovsdb-tool create /etc/openvswitch/conf.db vswitchd/vswitch.ovsschema
ovsdb-server -v --remote=punix:/var/run/openvswitch/db.sock \
                     --remote=db:Open_vSwitch,manager_options \
                     --private-key=db:SSL,private_key \
                     --certificate=db:SSL,certificate \
                     --pidfile --detach --log-file
ovs-vsctl --no-wait init
ovs-vswitchd --pidfile --detach
ovs-vsctl show



http://docs.openvswitch.org/en/latest/intro/install/general/#build-requirements

ovs-vsctl add-port ovsbr enp3s0f0
ovs-vsctl del-port ovsbr enp3s0f0

/usr//share/openvswitch/scripts/ovs-ctl start
systemctl start openvswitch.service
systemctl stop openvswitch.service

ovs-ofctl add-flow ovsbr 'nw_dst=192.168.1.3 action=drop'
ovs-ofctl add-flow ovsbr 'nw_dst=192.168.1.3 action=normal'

ovs-ofctl del-flows ovsbr
ovs-ofctl add-flow ovsbr nw_dst=192.168.1.0/24,actions=normal

ovs-ofctl dump-flows ovsbr

ovs-dpctl show -s

---------------------------

vlan offload

ovs-vsctl set port vnet0 tag=52
ovs-vsctl remove port vnet0 tag 52

===tcpdump===

tcpdump host 192.1.1.4 -i ens8  -e

===ip===

ip link show dev enp3s0f0 
cat /sys/class/net/enp3s0f0/device/sriov_numvfs

ip link set dev enp3s0f0 up

===netns===

 0xffffffff81622d10 : setup_net +0x0/0x170 [kernel]
 0xffffffff8162362f : copy_net_ns +0xbf/0x200 [kernel]
 0xffffffff810aff9f : create_new_namespaces +0x11f/0x1b0 [kernel]
 0xffffffff810b01da : unshare_nsproxy_namespaces +0x5a/0xb0 [kernel]
 0xffffffff8108e965 : SyS_unshare +0x1b5/0x350 [kernel]
 0xffffffff81003a27 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff81755ea7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: net=0xffff880be6ca0000 user_ns=0xffffffff81c513a0
execname: ip
ts: 1
 0x7fbdc6f97107 : unshare +0x7/0x30 [/usr/lib64/libc-2.17.so]
 0x415ade : netns_add +0xde/0x230 [/usr/sbin/ip]
 0x41628e : do_netns +0x1ce/0x4d0 [/usr/sbin/ip]
 0x408504 : do_cmd +0x44/0x80 [/usr/sbin/ip]
 0x40801f : main +0x20f/0x577 [/usr/sbin/ip]
 0x7fbdc6ec0b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4083b0 : _start +0x29/0x39 [/usr/sbin/ip]



ip netns add foo
ip link set dev enp66s0f1 netns foo
ip netns exec foo ifconfig enp66s0f1 192.168.1.61 up

include/net/net_namespace.h

struct net {
};

struct net init_net

===ethtool===

ethtool -s eth0 speed 100 duplex full

[root@bjglab-18 ~]# ethtool -g p2p1
Ring parameters for p2p1:
Pre-set maximums:
RX:             8192
RX Mini:        0
RX Jumbo:       0
TX:             8192
Current hardware settings:
RX:             1024
RX Mini:        0
RX Jumbo:       0
TX:             1024

ifconfig p2p1 txqueuelen 0

===napi===

mlx5e_poll_tx_cq
	napi_consume_skb

===short===

PMD: Poll Mode Driver
DVR: Distributed Virtual Router
MPPS: million packets per second
DQL: Dynamic queue limits
RPS: Receive Packet Steering
BPF: Berkeley Packet Filter
XDP: eXpress Data Path
htb: Hierarchical Token Bucket
TBF: Token Bucket Filter
SFQ: Stochastic Fairness Queuing
BQL: Byte Queue Limits
GSO: Generic Segmentation Offload
LFT: Linear Forwarding Table
AOC: Active Optical Cables
DOC: Direct Attach Copper Cables
NVGRE: Network Virtualization using Generic Routing Encapsulation
RTNL: Routing NetLink
LLDP: Link Layer Discovery Protocol

===net_device===

register_netdevice
dev_init_scheduler
	setup_timer(&dev->watchdog_timer, dev_watchdog, (unsigned long)dev);


===vlan===

vconfig add $link 52
ifconfig $link up
ifconfig $link.52 1.1.1.100/24 up

#  ethtool -K ens16  rx-vlan-filter off

 0xffffffffa01f74a0 : mlx5_add_flow_rules +0x0/0x600 [mlx5_core]
 0xffffffffa02094ec : mlx5e_add_vlan_rule +0xec/0x280 [mlx5_core]
 0xffffffffa02096ac : mlx5e_add_any_vid_rules +0x2c/0x30 [mlx5_core]
 0xffffffffa020995f : mlx5e_disable_vlan_filter +0x2f/0x40 [mlx5_core]
 0xffffffffa0201d8a : set_feature_vlan_filter +0x1a/0x30 [mlx5_core]
 0xffffffffa0201565 : mlx5e_handle_feature +0x45/0xc0 [mlx5_core]
 0xffffffffa0201621 : mlx5e_set_features +0x41/0xd0 [mlx5_core]
 0xffffffff8162f46f : __netdev_update_features +0x23f/0x690 [kernel]
 0xffffffff816308cc : ethtool_set_features +0xcc/0x120 [kernel]
 0xffffffff816343f5 : dev_ethtool +0x1235/0x1bd0 [kernel]
 0xffffffff81648821 : dev_ioctl +0x181/0x520 [kernel]
 0xffffffff8160a4f2 : sock_do_ioctl +0x42/0x50 [kernel]
 0xffffffff8160aa9d : sock_ioctl +0x1ed/0x2d0 [kernel]
 0xffffffff81257e07 : do_vfs_ioctl +0xa7/0x5e0 [kernel]
 0xffffffff812583b9 : SyS_ioctl +0x79/0x90 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: ft=0xffff880036680300 spec=0xffff88003aa25000 flow_act=0xffffc900003bfb00 dest=0xffffc900003bfaf0 dest_num=0x1


 0xffffffffa00bc220 : mlx5_add_flow_rules +0x0/0x600 [mlx5_core]
 0xffffffffa00ce255 : mlx5e_add_vlan_rule +0xe5/0x270 [mlx5_core]
 0xffffffffa00ce6fc : mlx5e_vlan_rx_add_vid +0x2c/0x30 [mlx5_core]
 0xffffffff817335d0 : vlan_vid_add +0x200/0x250 [kernel]
 0xffffffffa08eeaee : register_vlan_dev +0x3e/0x240 [8021q]
 0xffffffffa08f048a : vlan_newlink +0xca/0x110 [8021q]
 0xffffffff8164433b : rtnl_newlink +0x68b/0x830 [kernel]
 0xffffffff81644584 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81666477 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163e398 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81665e31 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166621e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160db78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160e4c9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160eed4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160ef22 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff81752d6b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: ft=0xffff8806629f8d00 spec=0xffff8806fc795000 flow_act=0xffffc900068cb77c dest=0xffffc900068cb788 dest_num=0x1
execname: ip
ts: 2
 0x7fc6cd9827a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x4441b4 : __rtnl_talk +0xc4/0x3f0 [/usr/sbin/ip]
 0x41efc7 : iplink_modify +0x267/0x4b0 [/usr/sbin/ip]
 0x41f507 : do_iplink +0x1c7/0xf80 [/usr/sbin/ip]
 0x408504 : do_cmd +0x44/0x80 [/usr/sbin/ip]
 0x40801f : main +0x20f/0x577 [/usr/sbin/ip]
 0x7fc6cd8abb35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4083b0 : _start +0x29/0x39 [/usr/sbin/ip]

 0xffffffffa00bc220 : mlx5_add_flow_rules +0x0/0x600 [mlx5_core]
 0xffffffffa00cdd43 : mlx5e_add_l2_flow_rule +0xa3/0x1a0 [mlx5_core]
 0xffffffffa00cdea0 : mlx5e_execute_l2_action +0x60/0x70 [mlx5_core]
 0xffffffffa00ce8c3 : mlx5e_set_rx_mode_work +0x193/0x3b0 [mlx5_core]
 0xffffffff810a8dd5 : process_one_work +0x165/0x410 [kernel]
 0xffffffff810a97b7 : worker_thread +0x137/0x4c0 [kernel]
 0xffffffff810af681 : kthread +0x101/0x140 [kernel]
 0xffffffff81752f1c : ret_from_fork +0x2c/0x40 [kernel]
 0x0 (inexact)
parms: ft=0xffff8806629f9a00 spec=0xffff880bf385d800 flow_act=0xffffc90008edfd8c dest=0xffffc90008edfd98 dest_num=0x1
execname: kworker/u96:1
ts: 3
<no user backtrace at module("mlx5_core").function("mlx5_add_flow_rules@drivers/net/ethernet/mellanox/mlx5/core/fs_core.c:1397")>

create vlan
 0xffffffffa00b6880 : mlx5_modify_nic_vport_vlans +0x0/0x170 [mlx5_core]
 0xffffffffa00ce056 : mlx5e_vport_context_update_vlans +0x116/0x190 [mlx5_core]
 0xffffffffa00ce2e0 : mlx5e_add_vlan_rule +0x170/0x270 [mlx5_core]
 0xffffffffa00ce6fc : mlx5e_vlan_rx_add_vid +0x2c/0x30 [mlx5_core]
 0xffffffff817335d0 : vlan_vid_add +0x200/0x250 [kernel]
 0xffffffffa08eeaee : register_vlan_dev +0x3e/0x240 [8021q]
 0xffffffffa08f048a : vlan_newlink +0xca/0x110 [8021q]
 0xffffffff8164433b : rtnl_newlink +0x68b/0x830 [kernel]
 0xffffffff81644584 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81666477 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163e398 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81665e31 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166621e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160db78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160e4c9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160eed4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160ef22 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff81752d6b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: dev=0xffff880658340060 vlans=0xffff8806fc44f880 list_size=0x2
execname: ip
ts: 102
 0x7f32115e27a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x4441b4 : __rtnl_talk +0xc4/0x3f0 [/usr/sbin/ip]
 0x41efc7 : iplink_modify +0x267/0x4b0 [/usr/sbin/ip]
 0x41f507 : do_iplink +0x1c7/0xf80 [/usr/sbin/ip]
 0x408504 : do_cmd +0x44/0x80 [/usr/sbin/ip]
 0x40801f : main +0x20f/0x577 [/usr/sbin/ip]
 0x7f321150bb35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4083b0 : _start +0x29/0x39 [/usr/sbin/ip]

ip link del vlan52
 0xffffffffa00b6880 : mlx5_modify_nic_vport_vlans +0x0/0x170 [mlx5_core]
 0xffffffffa00ce056 : mlx5e_vport_context_update_vlans +0x116/0x190 [mlx5_core]
 0xffffffffa00ce112 : mlx5e_del_vlan_rule.part.0 +0x42/0x50 [mlx5_core]
 0xffffffffa00ce727 : mlx5e_vlan_rx_kill_vid +0x27/0x30 [mlx5_core]
 0xffffffff8173327d : vlan_vid_del +0x16d/0x1b0 [kernel]
 0xffffffffa08ee2b6 : unregister_vlan_dev +0xd6/0x150 [8021q]
 0xffffffff8163d783 : rtnl_delete_link +0x43/0x70 [kernel]
 0xffffffff8163f039 : rtnl_dellink +0x99/0x1d0 [kernel]
 0xffffffff81644584 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81666477 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163e398 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81665e31 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166621e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160db78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160e4c9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160eed4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160ef22 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff81752d6b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: dev=0xffff880658340060 vlans=0xffff880666c0f6b0 list_size=0x1
execname: ip
ts: 4
 0x7fdfc9c3a7a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x4441b4 : __rtnl_talk +0xc4/0x3f0 [/usr/sbin/ip]
 0x41efc7 : iplink_modify +0x267/0x4b0 [/usr/sbin/ip]
 0x41f9cc : do_iplink +0x68c/0xf80 [/usr/sbin/ip]
 0x408504 : do_cmd +0x44/0x80 [/usr/sbin/ip]
 0x40801f : main +0x20f/0x577 [/usr/sbin/ip]
 0x7fdfc9b63b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4083b0 : _start +0x29/0x39 [/usr/sbin/ip]


skb->dev = vlan->real_dev;

 0xffffffffa00d3330 : mlx5e_xmit +0x0/0x30 [mlx5_core]
 0xffffffff8162ee91 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff816592f5 : sch_direct_xmit +0x105/0x1b0 [kernel]
 0xffffffff8162f51f : __dev_queue_xmit +0x42f/0x630 [kernel]
 0xffffffff8162f730 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa08efc98 : vlan_dev_hard_start_xmit +0x98/0x120 [8021q]
 0xffffffff8162ee91 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff8162f5f3 : __dev_queue_xmit +0x503/0x630 [kernel]
 0xffffffff8162f730 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff81639316 : neigh_connected_output +0xc6/0x100 [kernel]
 0xffffffff81676cab : ip_finish_output2 +0x14b/0x390 [kernel]
 0xffffffff816783e6 : ip_finish_output +0x136/0x1e0 [kernel]
 0xffffffff81678e96 : ip_output +0x76/0xe0 [kernel]
 0xffffffff816785e5 : ip_local_out +0x35/0x40 [kernel]
 0xffffffff81679919 : ip_send_skb +0x19/0x40 [kernel]
 0xffffffff81679973 : ip_push_pending_frames +0x33/0x40 [kernel]
 0xffffffff816a1983 : raw_sendmsg +0x7d3/0xb50 [kernel]
 0xffffffff816b0f71 : inet_sendmsg +0x31/0xb0 [kernel]
 0xffffffff8160db78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160e032 : SYSC_sendto +0x102/0x190 [kernel]
parms: skb=0xffff880666f44400 dev=0xffff880c59b50000
execname: ping
ts: 3
 0x7fb66dffe803 : __sendto_nocancel +0xa/0x57 [/usr/lib64/libc-2.17.so]
 0x564d8af0c8ad [/usr/bin/ping +0x38ad/0xe000]

 0xffffffffa08efc00 : vlan_dev_hard_start_xmit +0x0/0x120 [8021q]
 0xffffffff8162ee91 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff8162f5f3 : __dev_queue_xmit +0x503/0x630 [kernel]
 0xffffffff8162f730 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff816a86f8 : arp_xmit +0x38/0xa0 [kernel]
 0xffffffff816a87a5 : arp_send_dst.part.19 +0x45/0x50 [kernel]
 0xffffffff816a9512 : arp_process +0x6b2/0x720 [kernel]
 0xffffffff816a96e0 : arp_rcv +0x140/0x1c0 [kernel]
 0xffffffff8162c100 : __netif_receive_skb_core +0x380/0x9e0 [kernel]
 0xffffffff8162c778 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8162d430 : netif_receive_skb_internal +0x40/0xb0 [kernel]
 0xffffffff8162dfed : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa00d5cd4 : mlx5e_handle_rx_cqe_mpwrq +0x594/0x830 [mlx5_core]
 0xffffffffa00d5ff3 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa00d6d13 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff8162d990 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff81756679 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff81095599 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff817557f1 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81753653 : ret_from_intr +0x0/0x1b [kernel]
parms: skb=0xffff880bdf776800 dev=0xffff880b961d8000
execname: swapper/6

A 2-byte Tag Protocol Identifier (TPID), which will be set to a value of 0x8100 to denote that this frame carries 802.1Q or 802.1p tag information.
A 2-byte Tag Control Information (TCI), which is made of the following:
A 3-bit user Priority Code Point (PCP) that sets a priority value between 0 and 7, which can be used for Quality of Service (QoS) priority traffic delivery.
A 1-bit Canonical Format Indicator (CFI) that is a compatibility bit between Ethernet and other network structures, such as Token Ring. For Ethernet networks, this value will also be set to zero.
A 12-bit VLAN Identifier (VID) that identifies the VLAN the frame belongs to.

ovs-vsctl set port vnet1 tag=52

crash> vlan_dev_priv ffff880b961d88c0
struct vlan_dev_priv {
  nr_ingress_mappings = 0,
  ingress_priority_map = {0, 0, 0, 0, 0, 0, 0, 0},
  nr_egress_mappings = 0,
  egress_priority_map = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
  vlan_proto = 129,
  vlan_id = 52,
  flags = 1,
  real_dev = 0xffff880c59b50000,
  real_dev_addr = "$\212\a\210", <incomplete sequence \312>,
  dent = 0xffff8804d5779980,
  vlan_pcpu_stats = 0x60f398806fa0,
  netpoll = 0x0,
  nest_level = 1
}

crash> vlan_dev_priv.real_dev_addr ffff880b961d88c0 -o
struct vlan_dev_priv {
  [ffff880b961d8978] unsigned char real_dev_addr[6];
}
crash> rd -8 ffff880b961d8978 6
ffff880b961d8978:  24 8a 07 88 27 ca                                 $...'.

===neigh update==

			ip_route_output_key
 0xffffffff81687852 : icmp_reply.constprop.26 +0x1f2/0x270 [kernel]
 0xffffffff8168792d : icmp_echo.part.24 +0x5d/0x80 [kernel]
 0xffffffff81687981 : icmp_echo +0x31/0x40 [kernel]
 0xffffffff8168808c : icmp_rcv +0x27c/0x3a0 [kernel]
 0xffffffff8164f5a5 : ip_local_deliver_finish +0x95/0x1e0 [kernel]
 0xffffffff8164f8af : ip_local_deliver +0x6f/0xe0 [kernel]
 0xffffffff8164f23d : ip_rcv_finish +0xdd/0x3b0 [kernel]
 0xffffffff8164fbab : ip_rcv +0x28b/0x3a0 [kernel]
 0xffffffff816073c2 : __netif_receive_skb_core +0x522/0xaa0 [kernel]


mlx5e_rep_netevent_event
mlx5e_rep_neigh_entry_lookup
mlx5e_rep_neigh_update		# neigh_update_work
mlx5e_rep_update_flows
neigh_timer_handler

mlx5e_route_lookup_ipv4

 0xffffffff8161b2b0 : neigh_update +0x0/0x5c0 [kernel]
 0xffffffff8168a274 : arp_process +0x224/0x720 [kernel]
 0xffffffff8168a8d0 : arp_rcv +0x140/0x1c0 [kernel]
 0xffffffff8160c556 : __netif_receive_skb_core +0x396/0xa20 [kernel]
 0xffffffff8160cbf8 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8160e2cf : netif_receive_skb_internal +0x4f/0x3e0 [kernel]
 0xffffffff8160f17d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa01ae811 : mlx5e_handle_rx_cqe_mpwrq +0x4a1/0x820 [mlx5_core]
 0xffffffffa01aeb18 : mlx5e_handle_rx_cqe_mpwrq +0x7a8/0x820 [mlx5_core]
 0xffffffffa01aff9a : mlx5e_rx_am +0x2ea/0x2f0 [mlx5_core]
 0xffffffff8160eb2c : net_rx_action +0x26c/0x3b0 [kernel]
 0xffffffff81736df9 : __irqentry_text_end +0xc9/0x269 [kernel]
 0xffffffff8108bf35 : irq_exit +0xa5/0xb0 [kernel]
 0xffffffff81735f91 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81733e93 : ret_from_intr +0x0/0x19 [kernel]


atomic_notifier_head netevent_notif_chain
struct atomic_notifier_head {
  lock = {
    {
      rlock = {
        raw_lock = {
          val = {
            counter = 0
          }
        }
      }
    }
  },
  head = 0xffffffffa0679d80
}

list notifier_block.next
-s notifier_block

7
 0xffffffffa01b7180 : mlx5e_rep_neigh_entry_lookup.isra.9 +0xd0/0x1a0 [mlx5_core]
 0xffffffff810a62fa : atomic_notifier_call_chain +0x1a/0x20 [kernel]
 0xffffffff8161775b : call_netevent_notifiers +0x1b/0x20 [kernel]
 0xffffffff8161a587 : neigh_timer_handler +0xb7/0x2b0 [kernel]
 0xffffffff810f2485 : call_timer_fn +0x35/0x140 [kernel]
 0xffffffff810f3b28 : run_timer_softirq +0x1d8/0x430 [kernel]
 0xffffffff81736df9 : __irqentry_text_end +0xc9/0x269 [kernel]
 0xffffffff8108bf35 : irq_exit +0xa5/0xb0 [kernel]
 0xffffffff817368fd : smp_apic_timer_interrupt +0x3d/0x50 [kernel]
 0xffffffff81735213 : apic_timer_interrupt +0x93/0xa0 [kernel]
 0x0 (inexact)
parms: nb=0xffff880c06e3ceb0 event=0x1 ptr=0xffff880b4a81e000


list notifier_block.next 0xffffffffa0679d80 -s notifier_block
ffffffffa0679d80
struct notifier_block {
  notifier_call = 0xffffffffa0661200,
  next = 0xffff880ca18cdeb0,
  priority = 0
}
ffff880ca18cdeb0
struct notifier_block {
  notifier_call = 0xffffffffa00e4d60 <mlx5e_rep_netevent_event>,
  next = 0xffff880c1c2578b0,
  priority = 0
}
ffff880c1c2578b0
struct notifier_block {
  notifier_call = 0xffffffffa00e4d60 <mlx5e_rep_netevent_event>,
  next = 0xffff880c1c2552b0,
  priority = 0
}
ffff880c1c2552b0
struct notifier_block {
  notifier_call = 0xffffffffa00e4d60 <mlx5e_rep_netevent_event>,
  next = 0x0,
  priority = 0
}

mlx5e_rep_netevent_event

struct mlx5e_rep_priv {
        struct mlx5_eswitch_rep *rep;
        struct mlx5e_neigh_update_table neigh_update;
};

mlx5e_rep_priv
mlx5_eswitch_rep

mlx5e_rep_neigh_stats_work

mlx5e_configure_flower
	parse_tc_fdb_actions
		mlx5e_attach_encap
			mlx5e_create_encap_header_ipv4
				mlx5e_rep_encap_entry_attach
					mlx5e_rep_neigh_entry_lookup
					mlx5e_rep_neigh_entry_create
						mlx5e_rep_neigh_update
							mlx5e_rep_update_flows	# mac address is changed

===sriov==

 0xffffffff814beca0 : __device_attach +0x0/0x160 [kernel]
 0xffffffff814bee10 : device_attach +0x10/0x20 [kernel]
 0xffffffff813a888f : pci_bus_add_device +0x4f/0xa0 [kernel]
 0xffffffff813ce0d6 : pci_iov_add_virtfn +0x246/0x340 [kernel]
 0xffffffff813ce6a4 : pci_enable_sriov +0x364/0x470 [kernel]
 0xffffffffa0218ad5 : mlx5_core_sriov_configure +0x115/0x260 [mlx5_core]
 0xffffffff813b5b86 : sriov_numvfs_store +0x126/0x1c0 [kernel]
 0xffffffff814b8cb8 : dev_attr_store +0x18/0x30 [kernel]
 0xffffffff812a155a : sysfs_kf_write +0x3a/0x50 [kernel]
 0xffffffff812a103f : kernfs_fop_write +0xff/0x180 [kernel]
 0xffffffff81218937 : __vfs_write +0x37/0x160 [kernel]
 0xffffffff812197b2 : vfs_write +0xb2/0x1b0 [kernel]
 0xffffffff8121ad15 : sys_write +0x55/0xc0 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8172c767 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)

 0xffffffff814be750 : driver_sysfs_remove +0x0/0x40 [kernel]
 0xffffffff814bf65b : device_release_driver_internal +0xeb/0x200 [kernel]
 0xffffffff814bf782 : device_release_driver +0x12/0x20 [kernel]
 0xffffffff813ac43c : pci_stop_bus_device +0x8c/0xa0 [kernel]
 0xffffffff813ac5d2 : pci_stop_and_remove_bus_device +0x12/0x20 [kernel]
 0xffffffff813ce27f : pci_iov_remove_virtfn +0xaf/0x150 [kernel]
 0xffffffff813ce7f6 : pci_disable_sriov +0x46/0x100 [kernel]
 0xffffffffa0218a0e : mlx5_core_sriov_configure +0x4e/0x260 [mlx5_core]
 0xffffffff813b5bc6 : sriov_numvfs_store +0x166/0x1c0 [kernel]
 0xffffffff814b8cb8 : dev_attr_store +0x18/0x30 [kernel]
 0xffffffff812a155a : sysfs_kf_write +0x3a/0x50 [kernel]
 0xffffffff812a103f : kernfs_fop_write +0xff/0x180 [kernel]
 0xffffffff81218937 : __vfs_write +0x37/0x160 [kernel]
 0xffffffff812197b2 : vfs_write +0xb2/0x1b0 [kernel]
 0xffffffff8121ad15 : sys_write +0x55/0xc0 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8172c767 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)

 0xffffffff813cde90 : pci_iov_add_virtfn +0x0/0x340 [kernel]
 0xffffffff813ce6a4 : pci_enable_sriov +0x364/0x470 [kernel]
 0xffffffffa0218ad5 : mlx5_core_sriov_configure +0x115/0x260 [mlx5_core]
 0xffffffff813b5b86 : sriov_numvfs_store +0x126/0x1c0 [kernel]
 0xffffffff814b8cb8 : dev_attr_store +0x18/0x30 [kernel]
 0xffffffff812a155a : sysfs_kf_write +0x3a/0x50 [kernel]
 0xffffffff812a103f : kernfs_fop_write +0xff/0x180 [kernel]
 0xffffffff81218937 : __vfs_write +0x37/0x160 [kernel]
 0xffffffff812197b2 : vfs_write +0xb2/0x1b0 [kernel]
 0xffffffff8121ad15 : sys_write +0x55/0xc0 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8172c767 : return_from_SYSCALL_64 +0x0/0x6a [kernel]

devmon -d /dev/mst/mt4121_pciconf0 -no_gmon

pci=realloc intel_iommu=on biosdevname=0

mlx5_core_sriov_configure

mlx5_device_enable_sriov

include/linux/device.h

[root@bjglab-18 ~]# cat /sys/class/net/p2p1/device/sriov_numvfs
2

 0xffffffff813de4f0 : sriov_numvfs_show +0x0/0x30 [kernel]
 0xffffffff814df030 : dev_attr_show +0x20/0x50 [kernel]
 0xffffffff812cd9df : sysfs_kf_seq_show +0xbf/0x1a0 [kernel]
 0xffffffff812cc0a1 : kernfs_seq_show +0x21/0x30 [kernel]
 0xffffffff8126a655 : seq_read +0x115/0x390 [kernel]
 0xffffffff812cc81f : kernfs_fop_read +0xff/0x180 [kernel]
 0xffffffff81242157 : __vfs_read +0x37/0x150 [kernel]
 0xffffffff812430bc : vfs_read +0x8c/0x130 [kernel]
 0xffffffff81244695 : SyS_read +0x55/0xc0 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]

include/linux/pci.h

===rep===

static const struct net_device_ops mlx5e_netdev_ops_rep = {
        .ndo_open                = mlx5e_rep_open,
        .ndo_stop                = mlx5e_rep_close,
        .ndo_start_xmit          = mlx5e_xmit,
        .ndo_get_phys_port_name  = mlx5e_rep_get_phys_port_name,
        .ndo_setup_tc            = mlx5e_rep_ndo_setup_tc,
        .ndo_get_stats64         = mlx5e_rep_get_stats,
        .ndo_has_offload_stats   = mlx5e_has_offload_stats,
        .ndo_get_offload_stats   = mlx5e_get_offload_stats,
};

mlx5e_build_rep_params

mlx5_eswitch_rep
mlx5_eswitch_rep.hw_id is the PF mac address

mlx5_eswitch_create_vport_rx_rule

   3     65  drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c <<mlx5_eswitch_add_offloaded_rule>>
             dest[i].type = MLX5_FLOW_DESTINATION_TYPE_VPORT;
   4    322  drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c <<mlx5_eswitch_add_send_to_vport_rule>>
             dest.type = MLX5_FLOW_DESTINATION_TYPE_VPORT;
   5    403  drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c <<esw_add_fdb_miss_rule>>
             dest.type = MLX5_FLOW_DESTINATION_TYPE_VPORT;

===prm===

7.7NIC_Vport Context - NIC Virtual Port Context

mlx5_ifc_nic_vport_context_bits

===act_tunnel_key===

crash> tree -t ra ffff88101d361868 -s tcf_tunnel_key.params
ffff881034b0c600
  params = 0xffff8807f5314ea0
ffff88077d2dcd00
  params = 0xffff881031b2b600
crash> tcf_tunnel_key_params 0xffff8807f5314ea0
struct tcf_tunnel_key_params {
  rcu = {
    next = 0x0,
    func = 0x0
  },
  tcft_action = 0x1,
  action = 0x3,
  tcft_enc_metadata = 0xffff881034b0cd00
}
crash> tcf_tunnel_key_params 0xffff881031b2b600
struct tcf_tunnel_key_params {
  rcu = {
    next = 0x0,
    func = 0x0
  },
  tcft_action = 0x2,
  action = 0x3,
  tcft_enc_metadata = 0x0
}
crash> metadata_dst 0xffff881034b0cd00                                                                                                                                                                                                  [14/527]struct metadata_dst {
  dst = {
    dev = 0x0,
    callback_head = {
      next = 0x0,
      func = 0x0
    },
    child = 0x0,
    ops = 0xffffffff82076580 <md_dst_ops>,
    _metrics = 0xffffffff818bfb01,
    expires = 0x0,
    path = 0xffff881034b0cd00,
    from = 0x0,
    xfrm = 0x0,
    input = 0xffffffff8162a1d0 <dst_md_discard>,
    output = 0xffffffff8162a180 <dst_md_discard_out>,
    flags = 0x88,
    error = 0x0,
    obsolete = 0x0,
    header_len = 0x0,
    trailer_len = 0x0,
    __pad3 = 0x0,
    tclassid = 0x0,
    __pad_to_align_refcnt = {0x0, 0x0},
    __refcnt = {
      counter = 0x1
    },
    __use = 0x0,
    lastuse = 0x1003521dc,
    lwtstate = 0x0,
    {
      next = 0x0,
      rt_next = 0x0,
      rt6_next = 0x0,
      dn_next = 0x0
    }
  },
  type = METADATA_IP_TUNNEL,
  u = {
    tun_info = {
      key = {
        tun_id = 0x100000000000000,
        u = {
          ipv4 = {
            src = 0x0,
            dst = 0xd01a8c0
          },
          ipv6 = {
            src = {
              in6_u = {
                u6_addr8 = "\000\000\000\000\300\250\001\r\000\000\000\000\000\000\000",
                u6_addr16 = {0x0, 0x0, 0xa8c0, 0xd01, 0x0, 0x0, 0x0, 0x0},
                u6_addr32 = {0x0, 0xd01a8c0, 0x0, 0x0}
              }
            },
            dst = {
              in6_u = {
                u6_addr8 = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
                u6_addr16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
                u6_addr32 = {0x0, 0x0, 0x0, 0x0}
              }
            }
          }
        },
        tun_flags = 0x500,
        tos = 0x0,
        ttl = 0x0,
        label = 0x0,
        tp_src = 0x0,
        tp_dst = 0xb512
      },
      dst_cache = {
        cache = 0x0,
        reset_ts = 0x0
      },
      options_len = 0x0,
      mode = 0x1
    },
    port_info = {
      lower_dev = 0x100000000000000,
      port_id = 0x0
    }
  }
}

#define TCA_TUNNEL_KEY_ACT_SET      1
#define TCA_TUNNEL_KEY_ACT_RELEASE  2

===act_gact===

 0xffffffff816555a1 : tcf_generic_walker+0x41/0x2b0 [kernel]
 0xffffffffa0a0d166 : tcf_gact_walker+0x56/0x70 [act_gact]
 0xffffffff81654c6c : tc_dump_action+0x10c/0x210 [kernel]
 0xffffffff8165888c : netlink_dump+0x12c/0x290 [kernel]
 0xffffffff81658c56 : netlink_recvmsg+0x266/0x420 [kernel]
 0xffffffff815feecd : sock_recvmsg+0x3d/0x50 [kernel]
 0xffffffff815ffd47 : ___sys_recvmsg+0xd7/0x1f0 [kernel]
 0xffffffff816014b1 : __sys_recvmsg+0x51/0x90 [kernel]
 0xffffffff81601502 : sys_recvmsg+0x12/0x20 [kernel]
 0xffffffff810038c7 : do_syscall_64+0x67/0x150 [kernel]
 0xffffffff817580e7 : return_from_SYSCALL_64+0x0/0x6a [kernel]
 0x0 (inexact)
parms: cb=? skb=? idrinfo=?
execname: tc
ts: 1
 0x7f545b589690 : __recvmsg_nocancel+0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x43bbd1 : rtnl_dump_filter_l+0xa1/0x4c0 [/usr/sbin/tc]
 0x43c033 : rtnl_dump_filter_nc+0x43/0x60 [/usr/sbin/tc]
 0x410f29 : tc_act_list_or_flush.isra.1+0x269/0x2a0 [/usr/sbin/tc]
 0x411f2d : do_action+0x16d/0x220 [/usr/sbin/tc]
 0x4081e2 : main+0x112/0x410 [/usr/sbin/tc]
 0x7f545b4b2b35 : __libc_start_main+0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x408509 : _start+0x29/0x30 [/usr/sbin/tc]


 0xffffffffa0918080 : gact_exit_net +0x0/0x40 [act_gact]
 0xffffffff815fc618 : ops_exit_list.isra.4 +0x38/0x60 [kernel]
 0xffffffff815fccad : unregister_pernet_operations +0xbd/0x120 [kernel]
 0xffffffff815fcd31 : unregister_pernet_subsys +0x21/0x30 [kernel]
 0xffffffff8163c768 : tcf_unregister_action +0x68/0xb0 [kernel]
 0xffffffffa0918604 : cleanup_module +0x17/0x0 [act_gact]

net/sched/cls_flower.c
include/net/act_api.h
net/sched/act_api.c

net/sched/act_bpf.c    
net/sched/act_connmark.c
net/sched/act_csum.c    
net/sched/act_gact.c    
net/sched/act_ife.c     
net/sched/act_ipt.c       
net/sched/act_mirred.c 
net/sched/act_nat.c     
net/sched/act_pedit.c   
net/sched/act_police.c  
net/sched/act_sample.c 
net/sched/act_simple.c  
net/sched/act_skbedit.c 
net/sched/act_skbmod.c  
net/sched/act_tunnel_key
net/sched/act_vlan.c    


include/net/pkt_cls.h

tc_dump_tfilter walks all tcf_proto
fl_walk	        walks all cls_fl_filter
fl_dump         dumps all keys

 0xffffffffa0a343b0 : tcf_gact_dump +0x0/0x190 [act_gact]
 0xffffffff8163c6b7 : tcf_action_dump_1 +0xd7/0x140 [kernel]
 0xffffffff8163cb64 : tcf_action_dump +0x94/0xf0 [kernel]
 0xffffffff81639ed4 : tcf_exts_dump +0xe4/0x1f0 [kernel]
 0xffffffffa0a27c3a : fl_dump +0x3ea/0xb70 [cls_flower]
 0xffffffff8163a4ef : tcf_fill_node +0x10f/0x180 [kernel]
 0xffffffff8163a84a : TCF_node_dump +0x3a/0x40 [kernel]
 0xffffffffa0a27154 : fl_walk +0x64/0x80 [cls_flower]
 0xffffffff8163a6f3 : tc_dump_tfilter +0x193/0x2b0 [kernel]
 0xffffffff8163f9a2 : netlink_dump +0x122/0x290 [kernel]
 0xffffffff8164096f : __netlink_dump_start +0x15f/0x190 [kernel]
 0xffffffff8161fbfe : rtnetlink_rcv_msg +0x1ae/0x220 [kernel]
 0xffffffff81642987 : netlink_rcv_skb +0xe7/0x120 [kernel]

 0xffffffff8161a338 : rtnetlink_rcv +0x28/0x30 [kernel]			# rtnl_lock/rtnl_unlock

static void rtnetlink_rcv(struct sk_buff *skb)
{
        rtnl_lock();
        netlink_rcv_skb(skb, &rtnetlink_rcv_msg);
        rtnl_unlock();
}

 0xffffffff816420fc : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff81642475 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: skb=0xffff880b0e767600 a=0xffff880b8d667300 bind=0x0 ref=0x0
execname: tc
ts: 1
 0x7f88d8cea7d0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x433440 : rtnl_dump_request +0xb0/0xc0 [/usr/sbin/tc]
 0x40b844 : tc_filter_list +0x144/0x4f0 [/usr/sbin/tc]
 0x407cb0 : main +0x100/0x3b5 [/usr/sbin/tc]
 0x7f88d8c13b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x407f8e : _start +0x29/0x2b [/usr/sbin/tc]

use ida_get_new_above to allocate

gact_net_id
mirred_net_id
vlan_net_id
pedit_net_id

MIRRED_TAB_MASK
GACT_TAB_MASK
VLAN_TAB_MASK
PEDIT_TAB_MASK


#define TC_ACT_SHOT             2
#define TC_ACT_PIPE             3	drop
#define TC_ACT_STOLEN           4	mirred

-l tc_action.tcfa_head -s tc_action
-l tc_action.tcfa_head -s tcf_mirred
-l tc_action.tcfa_head -s tcf_vlan

list -H act_base -s tc_action_ops.kind
  kind = "mirred\000\000\000\000\000\000\000\000\000"
  kind = "gact\000\000\000\000\000\000\000\000\000\000\000"
  kind = "vlan\000\000\000\000\000\000\000\000\000\000\000"

 0xffffffff8163bbc0 : tcf_hash_create +0x0/0x200 [kernel]
 0xffffffffa0a3732f : tcf_gact_init +0x18f/0x1e0 [act_gact]
 0xffffffff8163c27a : tcf_action_init_1 +0x1da/0x330 [kernel]
 0xffffffff8163c4e0 : tcf_action_init +0x110/0x180 [kernel]
 0xffffffff8163a0a4 : tcf_exts_validate +0xc4/0x110 [kernel]
 0xffffffffa0a42465 : fl_set_parms +0xa5/0xa60 [cls_flower]
 0xffffffffa0a4359f : fl_change +0x20f/0xae0 [cls_flower]
 0xffffffff8163ad7d : tc_ctl_tfilter +0x42d/0x7c0 [kernel]
 0xffffffff8161fb3e : rtnetlink_rcv_msg +0xee/0x220 [kernel]
 0xffffffff81642a07 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff8161a338 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff8164217c : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff816424f5 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9df8 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea8d6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]
 0x0 (inexact)
parms: tn=0xffff880b09a42290 index=0x0 est=0x0 a=0xffffc900003f7600 ops=0xffffffffa0a39040 bind=0x1 cpustats=0x1
execname: tc

===flower===

 0xffffffffa08bf0f0 : fl_walk +0x0/0x80 [cls_flower]
 0xffffffff8163aff1 : tc_dump_tfilter +0x1c1/0x3b0 [kernel]
 0xffffffff81640662 : netlink_dump +0x122/0x290 [kernel]
 0xffffffff8164162f : __netlink_dump_start +0x15f/0x190 [kernel]
 0xffffffff8162012e : rtnetlink_rcv_msg +0x1ae/0x220 [kernel]
 0xffffffff81643647 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff8161a828 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81642dbc : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff81643135 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9f18 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea9f6 : ___sys_sendmsg +0x2b6/0x2d0 [kernel]

tcf_fill_node
	tcm->tcm_info = TC_H_MAKE(tp->prio, tp->protocol);

register_tcf_proto_ops

tcf_auto_prio

tc_ctl_tfilter
	tcf_proto_create
	fl_get
	fl_change


fl_grab_new_handle

tcf_proto->root
cls_fl_head->filters
cls_fl_filter

tcf_proto_create

PF:

crash> net_device.ingress_cl_list  ffff880592310001
  ingress_cl_list = 0xffff880c15aebd80
crash> list 0xffff8805c1632ba0 -s tcf_proto
ffff8805c1632ba0
struct tcf_proto {
  next = 0xffff880c4381fc60,
  root = 0xffff8805a4530c00,
  classify = 0xffffffffa00cf660 <fl_classify>,
  protocol = 0x81,
  prio = 0xbffe0000,
  classid = 0xffff0000,
  q = 0xffff88059b1df000,
  data = 0x0,
  ops = 0xffffffffa00d2000 <cls_fl_ops>,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
ffff880c4381fc60
struct tcf_proto {
  next = 0xffff880bec225a80,
  root = 0xffff880bec616800,
  classify = 0xffffffffa00cf660 <fl_classify>,
  protocol = 0x81,
  prio = 0xbfff0000,
  classid = 0xffff0000,
  q = 0xffff88059b1df000,
  data = 0x0,
  ops = 0xffffffffa00d2000 <cls_fl_ops>,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
ffff880bec225a80
struct tcf_proto {
  next = 0x0,
  root = 0xffff88099c10c400,
  classify = 0xffffffffa00cf660 <fl_classify>,
  protocol = 0x81,
  prio = 0xc0000000,
  classid = 0xffff0000,
  q = 0xffff88059b1df000,
  data = 0x0,
  ops = 0xffffffffa00d2000 <cls_fl_ops>,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
crash> cls_fl_head.mask 0xffff88099c10c400
...
    basic = {
      n_proto = 0xffff,
      ip_proto = 0x0,
      padding = 0x0
    },
    eth = {
      dst = "\377\377\377\377\377\377",
      src = "\377\377\377\377\377\377"
    },
    vlan = {
      vlan_id = 0xfff,
      vlan_priority = 0x7,
      padding = 0x0
    },
...

crash> cls_fl_head  0xffff88099c10c400 -o
struct cls_fl_head {
  [ffff8806164b7000] struct rhashtable ht;
  [ffff8806164b70c0] struct fl_flow_mask mask;
  [ffff8806164b7168] struct flow_dissector dissector;
  [ffff8806164b7190] u32 hgen;
  [ffff8806164b7194] bool mask_assigned;
  [ffff8806164b7198] struct list_head filters;
  [ffff8806164b71a8] struct rhashtable_params ht_params;
          union {
  [ffff8806164b7200]     struct work_struct work;
  [ffff8806164b7200]     struct callback_head rcu;
          };
}
SIZE: 0x220
crash> list cls_fl_filter.list  -H ffff8806164b7198 -s cls_fl_filter
ffff8806584e7600
struct cls_fl_filter {
  ht_node = {
    next = 0x3b
  },
  mkey = {
    indev_ifindex = 0x0,
    control = {
      thoff = 0x0,
      addr_type = 0x0,
      flags = 0x0
    },
    enc_control = {
      thoff = 0x0,
      addr_type = 0x0,
      flags = 0x0
    },
    basic = {
      n_proto = 0x608,
      ip_proto = 0x0,
      padding = 0x0
    },
    eth = {
      dst = "\002%\320\342\030P",
      src = "$\212\aU", <incomplete sequence \374>
    },
    vlan = {
      vlan_id = 0x34,
      vlan_priority = 0x0,
      padding = 0x0
    },

  exts = {
    type = 0x0,
    nr_actions = 0x2,
    actions = 0xffff880662637900,
    action = 0x3,		# TCA_FLOWER_ACT
    police = 0x0
  },

  key = {
    indev_ifindex = 0x0,
    control = {
      thoff = 0x0,
      addr_type = 0x0,
      flags = 0x0
    },
    enc_control = {
      thoff = 0x0,
      addr_type = 0x0,
      flags = 0x0
    },
    basic = {
      n_proto = 0x608,
      ip_proto = 0x0,
      padding = 0x0
    },
    eth = {
      dst = "\002%\320\342\030P",
      src = "$\212\aU", <incomplete sequence \374>
    },

crash> rd -8 ffff8806584e76d8 6
ffff8806584e76d8:  02 25 d0 e2 18 50                                 .%...P
crash> rd -8 ffff8806584e76de 6
ffff8806584e76de:  24 8a 07 55 10 fc                                 $..U..

    vlan = {
      vlan_id = 0x34,
      vlan_priority = 0x0,
      padding = 0x0
    },
...

crash> rd 0xffff880662637900 2
ffff880662637900:  ffff880662636d00 ffff880662636400   .mcb.....dcb....
crash> tc_action ffff880662636d00
struct tc_action {
  ops = 0xffffffffa09a7040,
  type = 0x0,
  order = 0x1,
  list = {
    next = 0xffff880662636410,
    prev = 0xffffc9000fd178f0
  },
  hinfo = 0xffff880562fdec20,
  tcfa_head = {
    next = 0x0,
    pprev = 0xffff88017c279be0
  },
  tcfa_index = 0x1dc,
  tcfa_refcnt = 0x1,
  tcfa_bindcnt = 0x1,
  tcfa_capab = 0x0,
  tcfa_action = 0x3,
  tcfa_tm = {
    install = 0x10a434dad,
    lastuse = 0x10a68aa00,
    expires = 0x0,
    firstuse = 0x10a435cfc
  },
  tcfa_bstats = {
    bytes = 0x17ca,
    packets = 0x91
  },
  tcfa_qstats = {
    qlen = 0x0,
    backlog = 0x0,
    drops = 0x0,
    requeues = 0x0,
    overlimits = 0x0
  },
  tcfa_rate_est = 0x0,
  tcfa_lock = {
    {
      rlock = {
        raw_lock = {
          val = {
            counter = 0x0
          }
        }
      }
    }
  },
  tcfa_rcu = {
    next = 0x0,
    func = 0x0
  },
  cpu_bstats = 0x0,
  cpu_qstats = 0x0,
  act_cookie = 0x0
}
crash> dis 0xffffffffa09a7040
0xffffffffa09a7040 <act_vlan_ops>:      (bad)
crash> tc_action  ffff880662636400
struct tc_action {
  ops = 0xffffffffa09ac060,
  type = 0x0,
  order = 0x2,
  list = {
    next = 0xffffc9000fd178f0,
    prev = 0xffff880662636d10
  },
  hinfo = 0xffff88064e8ebf60,
  tcfa_head = {
    next = 0x0,
    pprev = 0xffff88059030e2f8
  },
  tcfa_index = 0x1ef,
  tcfa_refcnt = 0x1,
  tcfa_bindcnt = 0x1,
  tcfa_capab = 0x0,
  tcfa_action = 0x4,
  tcfa_tm = {
    install = 0x10a434dad,
    lastuse = 0x10a699200,
    expires = 0x0,
    firstuse = 0x10a435cfc
  },
  tcfa_bstats = {
    bytes = 0x0,
    packets = 0x0
  },
  tcfa_qstats = {
    qlen = 0x0,
    backlog = 0x0,
    drops = 0x0,
    requeues = 0x0,
    overlimits = 0x0
  },
  tcfa_rate_est = 0x0,
  tcfa_lock = {
    {
      rlock = {
        raw_lock = {
          val = {
            counter = 0x0
          }
        }
      }
    }
  },
  tcfa_rcu = {
    next = 0x0,
    func = 0x0
  },
  cpu_bstats = 0x60f398805aa0,
  cpu_qstats = 0x60f398806910,
  act_cookie = 0x0
}
crash> dis 0xffffffffa09ac060
0xffffffffa09ac060 <act_mirred_ops>:    loopne 0xffffffffa09abffe


rep:

crash> net_device.ingress_cl_list  ffff8805d61a0000
  ingress_cl_list = 0xffff8806388b38a0
crash> list 0xffff8806388b38a0
ffff8806388b38a0
ffff880c4381f0c0
ffff880602ce7240
crash> list 0xffff8806388b38a0 -s tcf_proto
ffff8806388b38a0
struct tcf_proto {
  next = 0xffff880c4381f0c0,
  root = 0xffff88055ef53000,
  classify = 0xffffffffa00cf660,
  protocol = 0x608,
  prio = 0xbffe0000,
  classid = 0xffff0000,
  q = 0xffff88056f827800,
  data = 0x0,
  ops = 0xffffffffa00d2000,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
ffff880c4381f0c0
struct tcf_proto {
  next = 0xffff880602ce7240,
  root = 0xffff88065c69dc00,
  classify = 0xffffffffa00cf660,
  protocol = 0x8,
  prio = 0xbfff0000,
  classid = 0xffff0000,
  q = 0xffff88056f827800,
  data = 0x0,
  ops = 0xffffffffa00d2000,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
ffff880602ce7240
struct tcf_proto {
  next = 0x0,
  root = 0xffff8806164b4800,
  classify = 0xffffffffa00cf660,
  protocol = 0x608,
  prio = 0xc0000000,
  classid = 0xffff0000,
  q = 0xffff88056f827800,
  data = 0x0,
  ops = 0xffffffffa00d2000,
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
crash> cls_fl_head 0xffff8806164b4800
...
  mask = {
    key = {
      indev_ifindex = 0x0,
      control = {
        thoff = 0x0,
        addr_type = 0x0,
        flags = 0x0
      },
      enc_control = {
        thoff = 0x0,
        addr_type = 0x0,
        flags = 0x0
      },
      basic = {
        n_proto = 0xffff,
        ip_proto = 0x0,
        padding = 0x0
      },
      eth = {
        dst = "\377\377\377\377\377\377",
        src = "\377\377\377\377\377\377"
      },
      vlan = {
        vlan_id = 0x0,
        vlan_priority = 0x0,
        padding = 0x0
      },
...


mlx5e_ndo_setup_tc
	mlx5e_configure_flower
		parse_tc_nic_actions
			parse_tc_pedit_action
	mlx5e_delete_flower

===tir===

mlx5e_create_direct_tirs
mlx5e_create_tir
mlx5_core_create_tir

===mlx-cq===

  cq = {
    wq = {
      frag_buf = {
        frags = 0xffff8801955ded00,
        npages = 0x10,
        size = 0x10000,
        page_shift = 0xc
      },
      db = 0xffff88021e66b940,
      sz_m1 = 0x3ff,
      frag_sz_m1 = 0x3f,
      cc = 0x29f,
      log_sz = 0xa,
      log_stride = 0x6,
      log_frag_strides = 0x6
    },

===mlx-tx===

mlx5e_enable_sq
	MLX5_SET(sqc,  sqc, cqn,                sq->cq.mcq.cqn);

mlx5e_enable_rq
	MLX5_SET(rqc,  rqc, cqn,                rq->cq.mcq.cqn);

mlx5e_open_sq
mlx5_wq_cyc_create
mlx5_buf_alloc_node(0x1000)

mlx5e_open_sq
mlx5_wq_cyc_create
mlx5_buf_alloc_node (0x10000)

mlx5e_create_rq
mlx5_wq_ll_create
mlx5_buf_alloc_node (0x8000)


  96   3696  include/linux/skbuff.h <<skb_record_rx_queue>>
             skb->queue_mapping = rx_queue + 1;

  93   3681  include/linux/skbuff.h <<skb_set_queue_mapping>>
             skb->queue_mapping = queue_mapping;

netdev_pick_tx
skb_set_queue_mapping(skb, queue_index);
mlx5e_select_queue

sk_tx_queue_set

===ip_protocol

0 HOPOPT IPv6 Hop-by-Hop Option [RFC1883]
1 ICMP Internet Control Message [RFC792]
2 IGMP Internet Group Management [RFC1112]
3 GGP Gateway-to-Gateway [RFC823]
4 IP IP in IP (encapsulation) [RFC2003]
5 ST Stream [RFC1190,RFC1819]
6 TCP Transmission Control [RFC793]
7 CBT CBT [Ballardie]
8 EGP Exterior Gateway Protocol [RFC888,DLM1]
9 IGP any private interior gateway [IANA]
(used by Cisco for their IGRP)
10 BBN-RCC-MON BBN RCC Monitoring [SGC]
11 NVP-II Network Voice Protocol [RFC741,SC3]
12 PUP PUP [PUP,XEROX]
13 ARGUS ARGUS [RWS4]
14 EMCON EMCON [BN7]
15 XNET Cross Net Debugger [IEN158,JFH2]
16 CHAOS Chaos [NC3]
17 UDP User Datagram [RFC768,JBP]
18 MUX Multiplexing [IEN90,JBP]
19 DCN-MEAS DCN Measurement Subsystems [DLM1]
20 HMP Host Monitoring [RFC869,RH6]
21 PRM Packet Radio Measurement [ZSU]
22 XNS-IDP XEROX NS IDP [ETHERNET,XEROX]
23 TRUNK-1 Trunk-1 [BWB6]
24 TRUNK-2 Trunk-2 [BWB6]
25 LEAF-1 Leaf-1 [BWB6]
26 LEAF-2 Leaf-2 [BWB6]
27 RDP Reliable Data Protocol [RFC908,RH6]
28 IRTP Internet Reliable Transaction [RFC938,TXM]
29 ISO-TP4 ISO Transport Protocol Class 4 [RFC905,RC77]
30 NETBLT Bulk Data Transfer Protocol [RFC969,DDC1]
31 MFE-NSP MFE Network Services Protocol [MFENET,BCH2]
32 MERIT-INP MERIT Internodal Protocol [HWB]
33 SEP Sequential Exchange Protocol [JC120]
34 3PC Third Party Connect Protocol [SAF3]
35 IDPR Inter-Domain Policy Routing Protocol [MXS1]
36 XTP XTP [GXC]
37 DDP Datagram Delivery Protocol [WXC]
38 IDPR-CMTP IDPR Control Message Transport Proto [MXS1]
39 TP++ TP++ Transport Protocol [DXF]
40 IL IL Transport Protocol
41 IPv6 Ipv6 [Deering]
42 SDRP Source Demand Routing Protocol [DXE1]
43 IPv6-Route Routing Header for IPv6 [Deering]
44 IPv6-Frag Fragment Header for IPv6 [Deering]
45 IDRP Inter-Domain Routing Protocol [Sue Hares]
46 RSVP Reservation Protocol [Bob Braden]
47 GRE General Routing Encapsulation [Tony Li]
48 MHRP Mobile Host Routing Protocol[David Johnson]
49 BNA BNA [Gary Salamon]
50 ESP Encap Security Payload for IPv6 [RFC2406]
51 AH Authentication Header for IPv6 [RFC2402]
52 I-NLSP Integrated Net Layer Security TUBA [GLENN]
53 SWIPE IP with Encryption [JI6]
54 NARP NBMA Address Resolution Protocol [RFC1735]
55 MOBILE IP Mobility [Perkins]
56 TLSP Transport Layer Security Protocol [Oberg]
57 SKIP SKIP [Markson]
58 IPv6-ICMP ICMP for IPv6 [RFC1883]
59 IPv6-NoNxt No Next Header for IPv6 [RFC1883]
60 IPv6-Opts Destination Options for IPv6 [RFC1883]
61 any host internal protocol [IANA]
62 CFTP CFTP [CFTP,HCF2]
63 any local network [IANA]
64 SAT-EXPAK SATNET and Backroom EXPAK [SHB]
65 KRYPTOLAN Kryptolan [PXL1]
66 RVD MIT Remote Virtual Disk Protocol [MBG]
67 IPPC Internet Pluribus Packet Core [SHB]
68 any distributed file system [IANA]
69 SAT-MON SATNET Monitoring [SHB]
70 VISA VISA Protocol [GXT1]
71 IPCV Internet Packet Core Utility [SHB]
72 CPNX Computer Protocol Network Executive [DXM2]
73 CPHB Computer Protocol Heart Beat [DXM2]
74 WSN Wang Span Network [VXD]
75 PVP Packet Video Protocol [SC3]
76 BR-SAT-MON Backroom SATNET Monitoring [SHB]
77 SUN-ND SUN ND PROTOCOL-Temporary [WM3]
78 WB-MON WIDEBAND Monitoring [SHB]
79 WB-EXPAK WIDEBAND EXPAK [SHB]
80 ISO-IP ISO Internet Protocol [MTR]
81 VMTP VMTP [DRC3]
82 SECURE-VMTP SECURE-VMTP [DRC3]
83 VINES VINES [BXH]
84 TTP TTP [JXS]
85 NSFNET-IGP NSFNET-IGP [HWB]
86 DGP Dissimilar Gateway Protocol [DGP,ML109]
87 TCF TCF [GAL5]
88 EIGRP EIGRP [CISCO,GXS]
89 OSPFIGP OSPFIGP [RFC1583,JTM4]
90 Sprite-RPC Sprite RPC Protocol [SPRITE,BXW]
91 LARP Locus Address Resolution Protocol [BXH]
92 MTP Multicast Transport Protocol [SXA]
93 AX.25 AX.25 Frames [BK29]
94 IPIP IP-within-IP Encapsulation Protocol [JI6]
95 MICP Mobile Internetworking Control Pro. [JI6]
96 SCC-SP Semaphore Communications Sec. Pro. [HXH]
97 ETHERIP Ethernet-within-IP Encapsulation [RFC3378]
98 ENCAP Encapsulation Header [RFC1241,RXB3]
99 any private encryption scheme [IANA]
100 GMTP GMTP [RXB5]
101 IFMP Ipsilon Flow Management Protocol [Hinden]
102 PNNI PNNI over IP [Callon]
103 PIM Protocol Independent Multicast [Farinacci]
104 ARIS ARIS [Feldman]
105 SCPS SCPS [Durst]
106 QNX QNX [Hunter]
107 A/N Active Networks [Braden]
108 IPComp IP Payload Compression Protocol [RFC2393]
109 SNP Sitara Networks Protocol [Sridhar]
110 Compaq-Peer Compaq Peer Protocol [Volpe]
111 IPX-in-IP IPX in IP [Lee]
112 VRRP Virtual Router Redundancy Protocol [Hinden]
113 PGM PGM Reliable Transport Protocol [Speakman]
114 any 0-hop protocol [IANA]
115 L2TP Layer Two Tunneling Protocol [Aboba]
116 DDX D-II Data Exchange (DDX) [Worley]
117 IATP Interactive Agent Transfer Protocol [Murphy]
118 STP Schedule Transfer Protocol [JMP]
119 SRP SpectraLink Radio Protocol [Hamilton]
120 UTI UTI[Lothberg]
121 SMP Simple Message Protocol [Ekblad]
122 SMSM [Crowcroft]
123 PTP Performance Transparency Protocol [Welzl]
124 ISIS over IPv4 [Przygienda]
125 FIRE [Partridge]
126 CRTPCombat Radio Transport Protocol [Sautter]
127 CRUDPCombat Radio User Datagram [Sautter]
128 SSCOPMCE [Waber]
129 IPLT[Hollbach]
130 SPS Secure Packet Shield [McIntosh]
131 PIPE Private IP Encapsulation within IP [Petri]
132 SCTP Stream Control Transmission Protocol [Stewart]
133 FC Fibre Channel [Rajagopal]
134 RSVP-E2E-IGNORE [RFC3175]
135-254 Unassigned [IANA]
255 Reserved [IANA]

===switch===

mlx5_eswitch_enable_sriov

mlx5e_open
mlx5e_open_locked
mlx5e_add_sqs_fwd_rules
mlx5_eswitch_sqs2vport_start
mlx5_eswitch_add_send_to_vport_rule

33-33-00-00-00-00	86DD	IPv6 Neighbor Discovery
through
33-33-FF-FF-FF-FF

           vport 1 (VF1)
          ||          /\
          \/          ||

rep:	tirn 205     sqn 211

crash> net
   NET_DEVICE     NAME   IP ADDRESS(ES)
ffff880c5a8d0000  p2p1   1.1.1.18
ffff880597460000  eth0
crash> mlx5e_priv.ppriv ffff880c5a8d08c0
  ppriv = 0xffff88017c798e00
crash> mlx5_eswitch_rep  0xffff88017c798e00 -x
struct mlx5_eswitch_rep {
  load = 0xffffffffa00e1020 <mlx5e_add_sqs_fwd_rules+240>,
  unload = 0xffffffffa00e1080 <mlx5e_remove_sqs_fwd_rules+32>,
  vport = 0xffff,
  hw_id = "$\212\a\210", <incomplete sequence \312>,
  netdev = 0xffff880c5a8d0000,
  vport_rx_rule = 0x0,
  vport_sqs_list = {
    next = 0xffff880553bcf248,
    prev = 0xffff880553bcf068
  },
  vlan = 0x0,
  vlan_refcount = 0x0,
  valid = 0x1
}
crash> mlx5e_priv.ppriv  ffff8805974608c0
  ppriv = 0xffff88017c798e48
crash> mlx5_eswitch_rep  0xffff88017c798e48
struct mlx5_eswitch_rep {
  load = 0xffffffffa00e1140 <mlx5e_is_vf_vport_rep+32>,
  unload = 0xffffffffa00e1210 <mlx5e_vport_rep_load+192>,
  vport = 1,
  hw_id = "$\212\a\210", <incomplete sequence \312>,
  netdev = 0xffff880597460000,
  vport_rx_rule = 0xffff8806674fee30,
  vport_sqs_list = {
    next = 0xffff880553bcf7e8,
    prev = 0xffff880553bcf7e8
  },
  vlan = 0,
  vlan_refcount = 0,
  valid = true
}
crash> mlx5_flow_handle  0xffff8806674fee30
struct mlx5_flow_handle {
  num_rules = 1,
  rule = 0xffff8806674fee38
}
crash> rd 0xffff8806674fee38
ffff8806674fee38:  ffff88055703d080                    ...W....
crash> mlx5_flow_rule ffff88055703d080
struct mlx5_flow_rule {
...
    parent = 0xffff880662d39400,
  dest_attr = {
    type = MLX5_FLOW_DESTINATION_TYPE_TIR,
    {
      tir_num = 205,
    }
  },
crash> fs_fte 0xffff880662d39400 -x
    parent = 0xffff88066368b000,
  val = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
crash> mlx5_flow_group 0xffff88066368b000 -x
    parent = 0xffff880c6108c800,
  mask = {
    match_criteria_enable = 0x2,
    match_criteria = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffff0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
  },
crash> mlx5_flow_table 0xffff880c6108c800
  id = 9,
  vport = 0,
  max_fte = 4,
  level = 18,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,
crash> mlx5_eswitch.offloads 0xffff88065743a000
  offloads = {
    ft_offloads = 0xffff880c6108c800,
    vport_rx_group = 0xffff88066368b000,
    vport_reps = 0xffff88017c798e00,
crash> mlx5_eswitch 0xffff88065743a000
  fdb_table = {
    fdb = 0xffff880557e2ea00,
    {
      legacy = {
        addr_grp = 0xffff880557e2e000,
        allmulti_grp = 0xffff880c62e0ec00,
        promisc_grp = 0xffff880c62e0f800
      },
      offloads = {
        fdb = 0xffff880557e2e000,
        send_to_vport_grp = 0xffff880c62e0ec00,
        miss_grp = 0xffff880c62e0f800,
        miss_rule = 0xffff8806674fe9b0,
        vlan_push_pop_refcount = 0
      }
    }
  },
crash> mlx5_flow_table 0xffff880557e2e000
    children = {
      next = 0xffff880c62e0ec00,
      prev = 0xffff880c62e0f800
    },
  id = 8,
  vport = 0,
  max_fte = 512,
  level = 1,
  type = FS_FT_FDB,
  op_mod = FS_FT_OP_MOD_NORMAL,
crash> list 0xffff880c62e0ec00 -s mlx5_flow_group -x
    children = {
      next = 0xffff88066368d800,
      prev = 0xffff880c6127b000
    },
  mask = {
    match_criteria_enable = 0x2,
    match_criteria = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffffff00, 0xffff0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
  },
  start_index = 0x0,
  max_ftes = 0x103,
  num_ftes = 0x12,
  id = 0x11
crash> list 0xffff88066368d800 -s fs_fte -x
    children = {
      next = 0xffff88055703c3c0,
      prev = 0xffff88055703c3c0
    },
  val = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8b000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
...
    children = {
      next = 0xffff8805c7c718c0,
      prev = 0xffff8805c7c718c0
    },
  val = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd3000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},

crash> mlx5_flow_rule 0xffff88055703c3c0 -x
  dest_attr = {
    type = MLX5_FLOW_DESTINATION_TYPE_VPORT,
    {
      vport_num = 0xffff,
    }
  },
crash> mlx5_flow_rule 0xffff8805c7c718c0 -x
  dest_attr = {
    type = MLX5_FLOW_DESTINATION_TYPE_VPORT,
    {
      vport_num = 0x1,
    }
  },
crash> eval d3
hexadecimal: d3
    decimal: 211
      octal: 323
     binary: 0000000000000000000000000000000000000000000000000000000011010011
crash> mlx5e_priv  ffff8805974608c0
...
  direct_tir = {{
      tirn = 205,
      rqt = {
        rqtn = 17,
        enabled = true
      },
      list = {
        next = 0xffff880c5a8d20a0,
        prev = 0xffff880597bc1ec0
      }
    }, {
...
crash> mlx5e_priv.channel  ffff8805974608c0| less
  channel = 0xffff8806fceeaaa8
crash> mlx5e_priv.channel  ffff8805974608c0
  channel = 0xffff8806fceeaaa8
crash> rd 0xffff8806fceeaaa8
ffff8806fceeaaa8:  ffff8805ddb60000                    ........
sh> mlx5e_channel ffff8805ddb60000 | grep 211
      sqn = 211,


get all the tirn
crash> mlx5e_priv.mdev ffff880c5a8d08c0
  mdev = 0xffff8806596c0060
crash> mlx5_core_dev.mlx5e_res 0xffff8806596c0060
  mlx5e_res = {
    pdn = 1,	# protection domain
    td = {
      tirs_list = {
        next = 0xffff880597bc1ec0,
        prev = 0xffff880c5a8d1d80
      },
      tdn = 1	# transport domain
    },
    mkey = {
      iova = 0,
      size = 0,
      key = 4096,
      pd = 1,
      type = 0
    }
  }
crash> mlx5_core_dev.mlx5e_res 0xffff8806596c0060 -o
struct mlx5_core_dev {
  [ffff8806596f68f8] struct mlx5e_resources mlx5e_res;
}
crash> mlx5e_resources ffff8806596f68f8 -o
struct mlx5e_resources {
  [ffff8806596f68f8] u32 pdn;
  [ffff8806596f6900] struct mlx5_td td;
  [ffff8806596f6918] struct mlx5_core_mkey mkey;
}
SIZE: 64
crash> mlx5_td ffff8806596f6900 -o
struct mlx5_td {
  [ffff8806596f6900] struct list_head tirs_list;
  [ffff8806596f6910] u32 tdn;
}
SIZE: 24
crash> list mlx5e_tir.list -H ffff8806596f6900 -s mlx5e_tir | grep tirn
  tirn = 209,	# rep for vf2
  tirn = 205,	# rep for vf1
  tirn = 131,
  tirn = 130,
  tirn = 129,
  tirn = 128,
  tirn = 127,
  tirn = 126,
  tirn = 125,
  tirn = 124,
  tirn = 123,
  tirn = 122,
  tirn = 121,
  tirn = 120,
  tirn = 119,
  tirn = 118,
  tirn = 117,
  tirn = 116,
  tirn = 115,
  tirn = 114,
  tirn = 113,
  tirn = 112,
  tirn = 111,
  tirn = 110,
  tirn = 109,
  tirn = 108,
  tirn = 107,
  tirn = 106,

===startup===

FDB_UPLINK_VPORT

eth_zero_addr
eth_broadcast_addr

static struct pci_driver mlx5_core_driver = {
        .name           = DRIVER_NAME,
        .id_table       = mlx5_core_pci_table,
        .probe          = init_one,
        .remove         = remove_one,
        .shutdown       = shutdown,
        .err_handler    = &mlx5_err_handler,
        .sriov_configure   = mlx5_core_sriov_configure,
};

static const struct pci_device_id mlx5_core_pci_table[] = {
        { PCI_VDEVICE(MELLANOX, 0x1011) },                      /* Connect-IB */
        { PCI_VDEVICE(MELLANOX, 0x1012), MLX5_PCI_DEV_IS_VF},   /* Connect-IB VF */
        { PCI_VDEVICE(MELLANOX, 0x1013) },                      /* ConnectX-4 */
        { PCI_VDEVICE(MELLANOX, 0x1014), MLX5_PCI_DEV_IS_VF},   /* ConnectX-4 VF */
        { PCI_VDEVICE(MELLANOX, 0x1015) },                      /* ConnectX-4LX */
        { PCI_VDEVICE(MELLANOX, 0x1016), MLX5_PCI_DEV_IS_VF},   /* ConnectX-4LX VF */
        { PCI_VDEVICE(MELLANOX, 0x1017) },                      /* ConnectX-5, PCIe 3.0 */
        { PCI_VDEVICE(MELLANOX, 0x1018), MLX5_PCI_DEV_IS_VF},   /* ConnectX-5 VF */
        { PCI_VDEVICE(MELLANOX, 0x1019) },                      /* ConnectX-5, PCIe 4.0 */
        { PCI_VDEVICE(MELLANOX, 0x101a), MLX5_PCI_DEV_IS_VF},   /* ConnectX-5, PCIe 4.0 VF */
        { 0, }
};

init_one
mlx5_load_one


===ft===

crash> init_tree_node root_fs
struct init_tree_node {
  type = FS_TYPE_NAMESPACE,
  children = 0xffffffffa00f4d00 <__compound_literal.114>,
  ar_size = 7,
  caps = {
    arr_sz = 0,
    caps = 0x0
  },
  min_ft_level = 0,
  num_leaf_prios = 0,
  prio = 0,
  num_levels = 0
}
crash> init_tree_node.min_ft_level  0xffffffffa00f4d00 -c 7
  min_ft_level = 34
  min_ft_level = 37
  min_ft_level = 36
  min_ft_level = 16
  min_ft_level = 5
  min_ft_level = 34
  min_ft_level = 35

crash> mlx5_eswitch 0xffff88065743a000
  fdb_table = {
      offloads = {
        fdb = 0xffff880557e2e000,
  id = 8,
  vport = 0,
  max_fte = 512,
  level = 1,
  type = FS_FT_FDB,
  op_mod = FS_FT_OP_MOD_NORMAL,
  match.val = 211	# sqn
  dest_attr = {
    type = MLX5_FLOW_DESTINATION_TYPE_VPORT,
    {
      vport_num = 0x1,
    }
  },

mlx5_eswitch.offloads
  id = 9,
  vport = 0,
  max_fte = 4,
  level = 18,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,
  match.val = 1
  dest_attr = {
    type = MLX5_FLOW_DESTINATION_TYPE_TIR,
    {
      tir_num = 205,
    }
  },

vlan
  id = 7,
  vport = 0,
  max_fte = 8192,
  level = 31,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

l2
  id = 6,
  vport = 0,
  max_fte = 65536,
  level = 32,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

tcc
  id = 5,
  vport = 0,
  max_fte = 16,
  level = 33,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

arfs
  id = 1,
  vport = 0,
  max_fte = 8192,
  level = 34,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

  id = 3,
  vport = 0,
  max_fte = 8192,
  level = 34,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

  id = 2,
  vport = 0,
  max_fte = 8192,
  level = 34,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

  id = 4,
  vport = 0,
  max_fte = 8192,
  level = 34,
  type = FS_FT_NIC_RX,
  op_mod = FS_FT_OP_MOD_NORMAL,

===mlx5_wq_ll===

mlx5e_alloc_rx_mpwqe

mlx5e_create_rq
	mlx5_wq_ll_create
		mlx5_buf_alloc_node
			mlx5_dma_zalloc_coherent_node
				dma_zalloc_coherent
mlx5e_enable_rq
	mlx5_fill_page_array

mlx5_wq_cyc_create
	mlx5_buf_alloc_node


mlx5e_create_cq
	mlx5_cqwq_create
		mlx5_frag_buf_alloc_node
			mlx5_dma_zalloc_coherent_node
				dma_zalloc_coherent
mlx5e_enable_cq
	mlx5_fill_page_frag_array

===rx===

 0xffffffffa020dfd0 : mlx5e_free_rx_mpwqe +0x0/0x70 [mlx5_core]
 0xffffffffa0210174 : mlx5e_handle_rx_cqe_mpwrq +0x7b4/0x820 [mlx5_core]
 0xffffffffa0210263 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0210f83 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff8162c840 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff81758779 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff810955e9 : irq_exit +0xd9/0xf0 [kernel]
 0xffffffff817578f1 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81755753 : ret_from_intr +0x0/0x1b [kernel]

crash> mlx5e_channel.rq ffff8808e9b3c000  | grep mpwqe_num_strides
    mpwqe_num_strides = 4096,
crash> mlx5e_channel.rq ffff8808e9b3c000  | grep mpwqe_stride_sz
    mpwqe_stride_sz = 64,

mlx5_wq_ll_create

mlx5e_napi_poll
	mlx5e_poll_rx_cq
		mlx5e_handle_rx_cqe_mpwrq	# handle_rx_cqe
			wi->consumed_strides += cstrides;
			mlx5e_mpwqe_fill_rx_skb
				mlx5e_add_skb_frag_mpwqe
					dma_sync_single_for_cpu(DMA_FROM_DEVICE)
					skb_add_rx_frag
	mlx5e_post_rx_wqes
		mlx5e_alloc_rx_umr_mpwqe
			mlx5e_page_alloc_mapped
				dev_alloc_pages
				dma_map_page

mlx5e_rx_cache_put
mlx5e_rx_cache_get

mlx5e_post_rx_wqes

 0xffffffff811b3f20 : __alloc_pages_nodemask +0x0/0x260 [kernel]
 0xffffffff8123d867 : __alloc_pages_node +0x33/0x35 [kernel]
 0xffffffff811b4212 : page_frag_alloc +0x92/0x130 [kernel]
 0xffffffff8161bc2a : __napi_alloc_skb +0x8a/0xd0 [kernel]
 0xffffffffa020fa5b : mlx5e_handle_rx_cqe_mpwrq +0x9b/0x820 [mlx5_core]
 0xffffffffa0210263 : mlx5e_poll_rx_cq +0x83/0x860 [mlx5_core]
 0xffffffffa0210f83 : mlx5e_napi_poll +0x93/0x480 [mlx5_core]
 0xffffffff8162c840 : net_rx_action +0x260/0x3c0 [kernel]
 0xffffffff81758779 : __do_softirq +0xc9/0x28c [kernel]
 0xffffffff81095399 : run_ksoftirqd +0x29/0x50 [kernel]
 0xffffffff810b3af0 : smpboot_thread_fn +0x110/0x160 [kernel]
 0xffffffff810af6d1 : kthread +0x101/0x140 [kernel]
 0xffffffff8175501c : ret_from_fork +0x2c/0x40 [kernel]

mlx5e_page_alloc_mapped
dev_alloc_pages
__alloc_pages_nodemask

===vlan===

ethtool -K p2p1  rx-vlan-filter off


[  929.667688] esw_vport_context_out: ffffc900211ef490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
[  929.667690] esw_vport_context_out: ffffc900211ef4a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
[  946.658671] query_esw_vport_context_cmd returns 0
[  946.658676] esw_vport_context_out: ffffc900212e7490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
[  946.658679] esw_vport_context_out: ffffc900212e74a0: 09 00 00 00 00 00 00 00 00 00 00 34 00 00 00 00  ...........4....

modify_esw_vport_context

mlx5_eswitch_add_offloaded_rule()
        /* per flow vlan pop/push is emulated, don't set that into the firmware */
        flow_act.action = attr->action & ~(MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH | MLX5_FLOW_CONTEXT_ACTION_VLAN_POP);

modify_esw_vport_cvlan


 ip link set dev  p2p1 vf 0 vlan 52 qos 0

 0xffffffffa00e02c0 : modify_esw_vport_cvlan +0x0/0x230 [mlx5_core]
 0xffffffffa00e4150 : __mlx5_eswitch_set_vport_vlan +0xb0/0x150 [mlx5_core]
 0xffffffffa00e420f : mlx5_eswitch_set_vport_vlan +0x1f/0x40 [mlx5_core]
 0xffffffffa00e7052 : mlx5e_set_vf_vlan +0x32/0x40 [mlx5_core]
 0xffffffff8163f09e : do_setlink +0x22e/0xd00 [kernel]
 0xffffffff81642feb : rtnl_newlink +0x4cb/0x830 [kernel]
 0xffffffff816433f4 : rtnetlink_rcv_msg +0xa4/0x230 [kernel]
 0xffffffff81665287 : netlink_rcv_skb +0xa7/0xc0 [kernel]
 0xffffffff8163d208 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81664c41 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff8166502e : netlink_sendmsg +0x32e/0x3b0 [kernel]
 0xffffffff8160cb68 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160d4b9 : ___sys_sendmsg +0x279/0x290 [kernel]
 0xffffffff8160dec4 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff8160df12 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff8175212b : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: dev=0xffff880659cc0060 vport=0x1 vlan=0x34 qos=0x0 set_flags=0x3
execname: ip
ts: 665
 0x7ff302c277a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x4441b4 : __rtnl_talk +0xc4/0x3f0 [/usr/sbin/ip]
 0x41efc7 : iplink_modify +0x267/0x4b0 [/usr/sbin/ip]
 0x41f422 : do_iplink +0xe2/0xf80 [/usr/sbin/ip]
 0x408504 : do_cmd +0x44/0x80 [/usr/sbin/ip]
 0x40801f : main +0x20f/0x577 [/usr/sbin/ip]
 0x7ff302b50b35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4083b0 : _start +0x29/0x39 [/usr/sbin/ip]


===cx4===

 0xffffffffa0255400 : mlx5e_xmit +0x0/0x9d0 [mlx5_core]
 0xffffffff8160a1c1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff816362f2 : sch_direct_xmit +0xf2/0x190 [kernel]
 0xffffffff8160a85b : __dev_queue_xmit +0x43b/0x630 [kernel]
 0xffffffff8160aa60 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa09be7e2 : ovs_vport_send +0xc2/0x150 [openvswitch]
 0xffffffffa09b0103 : do_output +0x53/0xf0 [openvswitch]
 0xffffffffa09b15f0 : do_execute_actions +0x9e0/0xa20 [openvswitch]
 0xffffffffa09b1a10 : ovs_execute_actions +0x40/0x120 [openvswitch]
 0xffffffffa09b5384 : ovs_dp_process_packet +0x84/0x120 [openvswitch]
 0xffffffffa09be6c3 : ovs_vport_receive +0x73/0xd0 [openvswitch]
 0xffffffffa09bf0e3 : netdev_frame_hook +0xd3/0x160 [openvswitch]
 0xffffffff81608a16 : __netif_receive_skb_core +0x1e6/0xa20 [kernel]
 0xffffffff81609268 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8160aacf : netif_receive_skb_internal +0x4f/0x3e0 [kernel]
 0xffffffff8160b98d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa02585d9 : mlx5e_handle_rx_cqe_rep +0x639/0x9a0 [mlx5_core]
 0xffffffffa02591d8 : mlx5e_poll_rx_cq +0x78/0x830 [mlx5_core]
 0xffffffffa025a74a : mlx5e_napi_poll +0x9a/0x360 [mlx5_core]
 0xffffffff8160b32c : net_rx_action +0x26c/0x3b0 [kernel]

===devlink===

https://www.mail-archive.com/netdev@vger.kernel.org/msg139502.html

static const struct devlink_ops mlx5_devlink_ops = {
#ifdef CONFIG_MLX5_CORE_EN
        .eswitch_mode_set = mlx5_devlink_eswitch_mode_set,
        .eswitch_mode_get = mlx5_devlink_eswitch_mode_get,
        .eswitch_inline_mode_set = mlx5_devlink_eswitch_inline_mode_set,
        .eswitch_inline_mode_get = mlx5_devlink_eswitch_inline_mode_get,
#endif
};

===counter===

struct mlx5_fc {
	struct rb_node node;
	struct list_head list;

	/* last{packets,bytes} members are used when calculating the delta since
	 * last reading
	 */
	u64 lastpackets;
	u64 lastbytes;

	u16 id;
	bool deleted;
	bool aging;

	struct mlx5_fc_cache cache ____cacheline_aligned_in_smp;
}; 
 
mlx5_cmd_set_fte()

303                         MLX5_SET(flow_counter_list, in_dests, flow_counter_id,
304                                  dst->dest_attr.counter->id); 
 

mlx5_eswitch_add_offloaded_rule
	mlx5_fc_create

===mlx===

mlxlink  -m -d 04:00.0

mlx5e_get_max_num_channels

[root@dev-r630-04 ~]# ethtool  -c $link
Coalesce parameters for enp4s0f0:
Adaptive RX: on  TX: off
stats-block-usecs: 0
sample-interval: 0
pkt-rate-low: 0
pkt-rate-high: 0

rx-usecs: 8
rx-frames: 128
rx-usecs-irq: 0
rx-frames-irq: 0

tx-usecs: 16
tx-frames: 32
tx-usecs-irq: 0
tx-frames-irq: 0

rx-usecs-low: 0
rx-frame-low: 0
tx-usecs-low: 0
tx-frame-low: 0

rx-usecs-high: 0
rx-frame-high: 0
tx-usecs-high: 0
tx-frame-high: 0

[ 3071.765135] cap: 1
[ 3071.765575] cpus: 12
[ 3071.765965] nvec 1: 16
[ 3071.766356] nvec 2: 16
[ 3071.767598] nvec 3: 6

mlx5_enable_msix
mlx5_alloc_irq_vectors

alloc_comp_eqs
num_comp_vectors

commit 78249c4215840edb95447ec6867b69a7ac1d7a0d
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Thu Jul 13 11:09:38 2017 +0300

    mlx5: convert to generic pci_alloc_irq_vectors

    Now that we have a generic code to allocate an array
    of irq vectors and even correctly spread their affinity,
    correctly handle cpu hotplug events and more, were much
    better off using it.

    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

sar -n DEV 1

mlx5e_build_channel_param
mlx5e_build_sq_param

mlx5_eq_int
	MLX5_EVENT_TYPE_NIC_VPORT_CHANGE
	mlx5_eswitch_vport_event
		esw_vport_change_handler
			esw_vport_change_handle_locked

mlx5e_build_nic_netdev_priv
	INIT_WORK(&priv->update_carrier_work, mlx5e_update_carrier_work);
	INIT_WORK(&priv->set_rx_mode_work, mlx5e_set_rx_mode_work);
	INIT_WORK(&priv->tx_timeout_work, mlx5e_tx_timeout_work);
	INIT_DELAYED_WORK(&priv->update_stats_work, mlx5e_update_stats_work);

msecs_to_jiffies(MLX5E_UPDATE_STATS_INTERVAL));

crash> mlx5e_l2_table  ffff8802146bb2d8
struct mlx5e_l2_table {
  ft = {
    num_groups = 3,
    t = 0xffff880231578200,
    g = 0xffff880236f86180
  },
  netdev_uc = {{
      first = 0xffff880232b4f440

mlx5e_l2_hash_node

KVM VF
crash> mlx5e_priv.params ffff8800358f08c0
  params = {
    log_sq_size = 10 '\n',
    rq_wq_type = 2 '\002',
    mpwqe_log_stride_sz = 6 '\006',
    mpwqe_log_num_strides = 12 '\f',
    log_rq_size = 3 '\003',
    num_channels = 1,
    num_tc = 1 '\001',
    rx_cq_period_mode = 1 '\001',
    rx_cqe_compress_def = false,
    rx_cq_moderation = {
      usec = 3,
      pkts = 32
    },
    tx_cq_moderation = {
      usec = 16,
      pkts = 32
    },
    min_rx_wqes = 2,
    lro_en = true,
    lro_wqe_sz = 65536,
    tx_max_inline = 226,
    tx_min_inline_mode = 1 '\001',
    rss_hfunc = 2 '\002',
    toeplitz_hash_key = "\370\357\365[\301^o\230-\227\033\236k\224G\274#E\212\335\360\275\326NE\216\342\261\337\nrq\350=\357\355Wb\030~",
    indirection_rqt = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    vlan_strip_disable = false,
    rx_am_enabled = true,
    lro_timeout = 32,
    pflags = 1
  }


REP
crash> mlx5e_priv.params ffff8805a4a908c0
  params = {
    log_sq_size = 6 '\006',
    rq_wq_type = 0 '\000',
    mpwqe_log_stride_sz = 0 '\000',
    mpwqe_log_num_strides = 0 '\000',
    log_rq_size = 1 '\001',
    num_channels = 1,
    num_tc = 1 '\001',
    rx_cq_period_mode = 1 '\001',
    rx_cqe_compress_def = false,
    rx_cq_moderation = {
      usec = 3,
      pkts = 32
    },
    tx_cq_moderation = {
      usec = 0,
      pkts = 0
    },
    min_rx_wqes = 1,
    lro_en = false,
    lro_wqe_sz = 65536,
    tx_max_inline = 226,
    tx_min_inline_mode = 0 '\000',
    rss_hfunc = 0 '\000',
    toeplitz_hash_key = "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000",
    indirection_rqt = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    vlan_strip_disable = false,
    rx_am_enabled = true,
    lro_timeout = 0,
    pflags = 0
  }

HV VF
crash> mlx5e_priv.params ffff8806368a08c0
  params = {
    log_sq_size = 10 '\n',
    rq_wq_type = 2 '\002',
    mpwqe_log_stride_sz = 6 '\006',
    mpwqe_log_num_strides = 12 '\f',
    log_rq_size = 3 '\003',
    num_channels = 8,
    num_tc = 1 '\001',
    rx_cq_period_mode = 1 '\001',
    rx_cqe_compress_def = false,
    rx_cq_moderation = {
      usec = 3,
      pkts = 32
    },
    tx_cq_moderation = {
      usec = 16,
      pkts = 32
    },
    min_rx_wqes = 2,
    lro_en = false,
    lro_wqe_sz = 65536,
    tx_max_inline = 226,
    tx_min_inline_mode = 1 '\001',
    rss_hfunc = 2 '\002',
    toeplitz_hash_key = "\f\337$J\250\275w\261m\251\263\177\206\f\252\254W~\367\060\244\nQ@\212$h\241`.4\025\316$\361g\t\a", <incomplete sequence \320>,
    indirection_rqt = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7},
    vlan_strip_disable = false,
    rx_am_enabled = true,
    lro_timeout = 32,
    pflags = 1
  }

PF
crash> mlx5e_priv.params ffff880c595008c0
  params = {
    log_sq_size = 10 '\n',
    rq_wq_type = 2 '\002',
    mpwqe_log_stride_sz = 6 '\006',
    mpwqe_log_num_strides = 12 '\f',
    log_rq_size = 3 '\003',
    num_channels = 16,
    num_tc = 1 '\001',
    rx_cq_period_mode = 1 '\001',
    rx_cqe_compress_def = false,
    rx_cq_moderation = {
      usec = 3,
      pkts = 32
    },
    tx_cq_moderation = {
      usec = 16,
      pkts = 32
    },
    min_rx_wqes = 2,
    lro_en = false,
    lro_wqe_sz = 65536,
    tx_max_inline = 226,
    tx_min_inline_mode = 1 '\001',
    rss_hfunc = 2 '\002',
    toeplitz_hash_key = "\f\337$J\250\275w\261m\251\263\177\206\f\252\254W~\367\060\244\nQ@\212$h\241`.4\025\316$\361g\t\a", <incomplete sequence \320>,
    indirection_rqt = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7},
    vlan_strip_disable = false,
    rx_am_enabled = true,
    lro_timeout = 32,
    pflags = 1
  }


MLX5_ACTION_IN_FIELD_OUT_IP_TTL

ICMP

    match_criteria = {0x0, 0xffff0000, 0x0, 0x0, 0xff, 
  val = {0x0, 0x80000, 0x0, 0x0, 0x1,

const struct ethtool_ops mlx5e_ethtool_ops = { 

enum {
        MLX5_FLOW_CONTEXT_ACTION_ALLOW     = 0x1,
        MLX5_FLOW_CONTEXT_ACTION_DROP      = 0x2,
        MLX5_FLOW_CONTEXT_ACTION_FWD_DEST  = 0x4,
        MLX5_FLOW_CONTEXT_ACTION_COUNT     = 0x8,
        MLX5_FLOW_CONTEXT_ACTION_ENCAP     = 0x10,
        MLX5_FLOW_CONTEXT_ACTION_DECAP     = 0x20,
};

mlx5e_set_netdev_dev_addr
eth_hw_addr_random	# for rep

module_param_named(debug_mask, mlx5_core_debug_mask, uint, 0644);

mlx5_query_nic_vport_mac_address

include/linux/mlx5/mlx5_ifc.h
MLX5_CMD_OP_SET_L2_TABLE_ENTRY

mlx5_ifc_create_cq_in_bits

P1264

mlx5_ifc_fte_match_param_bits
mlx5_ifc_fte_match_set_lyr_2_4_bits

        u8         smac_47_16[0x20];

        u8         smac_15_0[0x10];
        u8         ethertype[0x10];

        u8         dmac_47_16[0x20];

        u8         dmac_15_0[0x10];
        u8         first_prio[0x3];
        u8         first_cfi[0x1];
        u8         first_vid[0xc];

        u8         ip_protocol[0x8];
        u8         ip_dscp[0x6];
        u8         ip_ecn[0x2];
        u8         cvlan_tag[0x1];
        u8         svlan_tag[0x1];
        u8         frag[0x1];
        u8         reserved_at_93[0x4];
        u8         tcp_flags[0x9];

        u8         tcp_sport[0x10];
        u8         tcp_dport[0x10];

        u8         reserved_at_c0[0x20];

        u8         udp_sport[0x10];
        u8         udp_dport[0x10];


vlan
  mask = {
    match_criteria_enable = 0x1,
    match_criteria = {0x0, 0x0, 0x0, 0xff0f0000, 0x800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
  },
  start_index = 0x0,
  max_ftes = 0x1000,
  num_ftes = 0x2,
  id = 0xe
}

l2
    match_criteria_enable = 0x0,
  start_index = 0,
  max_ftes = 1,
  num_ftes = 0,
  id = 11

  mask = {
    match_criteria_enable = 0x1,
    match_criteria = {0x0, 0x0, 0xffffffff, 0xffff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
  },
  start_index = 0x1,
  max_ftes = 0x8000,
  num_ftes = 0x7,
  id = 0xc
}


4: p2p1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
    link/ether 24:8a:07:88:27:ca brd ff:ff:ff:ff:ff:ff

mac address
crash> net_device.dev_addr ffff880c59b50000
  dev_addr = 0xffff880c59b1acd0 "$\212\a\210", <incomplete sequence \312>
crash> rd -8  0xffff880c59b1acd0  6
ffff880c59b1acd0:  24 8a 07 88 27 ca                                 $...'.

struct mlx5e_flow_steering {
        struct mlx5_flow_namespace      *ns;
        struct mlx5e_ethtool_steering   ethtool;
        struct mlx5e_tc_table           tc;
        struct mlx5e_vlan_table         vlan;
        struct mlx5e_l2_table           l2;
        struct mlx5e_ttc_table          ttc;
        struct mlx5e_arfs_tables        arfs;
};

mlx5e_priv.fs
	mlx5e_flow_steering.l2
		mlx5e_tc_table
		mlx5e_l2_table.promisc
			mlx5e_flow_table
			mlx5e_l2_rule

        IFF_PROMISC                     = 1<<8,  /* sysfs */

crash> net_device.flags ffff880c59b50000 -x
  flags = 0x1103
crash> net_device.flags ffff880c59b50000 -x
  flags = 0x1003

crash> mlx5e_priv.fs ffff880c59b508c0 -x -o
struct mlx5e_priv {
  [ffff880c59b52eb0] struct mlx5e_flow_steering fs;
}
crash> mlx5e_flow_steering ffff880c59b52eb0 -o
struct mlx5e_flow_steering {
  [ffff880c59b52eb0] struct mlx5_flow_namespace *ns;
  [ffff880c59b52eb8] struct mlx5e_ethtool_steering ethtool;
  [ffff880c59b52f80] struct mlx5e_tc_table tc;
  [ffff880c59b530a0] struct mlx5e_vlan_table vlan;
  [ffff880c59b5b2d8] struct mlx5e_l2_table l2;
  [ffff880c59b5c328] struct mlx5e_ttc_table ttc;
  [ffff880c59b5c398] struct mlx5e_arfs_tables arfs;
}
SIZE: 46480
crash> mlx5e_l2_table.promisc_enabled ffff880c59b5b2d8 -x
  promisc_enabled = 0x0


mlx5e_set_rx_mode_work

# flow

mlx5_ifc_fte_match_param_bits

mlx5e_open_channel
	netif_napi_add(netdev, &c->napi, mlx5e_napi_poll, 64);
mlx5e_napi_poll
	mlx5e_poll_rx_cq
		mlx5e_handle_rx_cqe_mpwrq
			mlx5e_complete_rx_cqe
				mlx5e_build_rx_skb
					mlx5e_skb_set_hash
						skb_set_hash
							__skb_set_hash
								skb->hash = hash;

mlx5e_handle_rx_cqe_mpwrq
	napi_gro_receive

mlx5e_skb_set_hash

sk_buff->queue_mapping

 0xffffffffa00d3330 : mlx5e_xmit +0x0/0x30 [mlx5_core]
 0xffffffff8162ee91 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff816592f5 : sch_direct_xmit +0x105/0x1b0 [kernel]
 0xffffffff8162f51f : __dev_queue_xmit +0x42f/0x630 [kernel]
 0xffffffff8162f730 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff81676def : ip_finish_output2 +0x28f/0x390 [kernel]
 0xffffffff816783e6 : ip_finish_output +0x136/0x1e0 [kernel]
 0xffffffff81678e96 : ip_output +0x76/0xe0 [kernel]
 0xffffffff816785e5 : ip_local_out +0x35/0x40 [kernel]
 0xffffffff81679919 : ip_send_skb +0x19/0x40 [kernel]
 0xffffffff81679973 : ip_push_pending_frames +0x33/0x40 [kernel]
 0xffffffff816a1983 : raw_sendmsg +0x7d3/0xb50 [kernel]
 0xffffffff816b0f71 : inet_sendmsg +0x31/0xb0 [kernel]
 0xffffffff8160db78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160e032 : SYSC_sendto +0x102/0x190 [kernel]
 0xffffffff8160ebde : SyS_sendto +0xe/0x10 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff81752d6b : return_from_SYSCALL_64 +0x0/0x6a [kernel]

 0xffffffffa00d32d0 : mlx5e_select_queue +0x0/0x60 [mlx5_core]
 0xffffffff8162f064 : netdev_pick_tx +0x64/0xf0 [kernel]
 0xffffffff8162f218 : __dev_queue_xmit +0x128/0x630 [kernel]
 0xffffffff8162f730 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff81676def : ip_finish_output2 +0x28f/0x390 [kernel]
 0xffffffff816783e6 : ip_finish_output +0x136/0x1e0 [kernel]
 0xffffffff81678e96 : ip_output +0x76/0xe0 [kernel]
 0xffffffff816785e5 : ip_local_out +0x35/0x40 [kernel]
 0xffffffff81679919 : ip_send_skb +0x19/0x40 [kernel]
 0xffffffff81679973 : ip_push_pending_frames +0x33/0x40 [kernel]
 0xffffffff816a1983 : raw_sendmsg +0x7d3/0xb50 [kernel]
 0xffffffff816b0f71 : inet_sendmsg +0x31/0xb0 [kernel]
 0xffffffff8160db78 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff8160e032 : SYSC_sendto +0x102/0x190 [kernel]
 0xffffffff8160ebde : SyS_sendto +0xe/0x10 [kernel]
 0xffffffff81003a47 : do_syscall_64 +0x67/0x180 [kernel]
 0xffffffff81752d6b : return_from_SYSCALL_64 +0x0/0x6a [kernel]

__dev_queue_xmit
	netdev_pick_tx
	        skb_set_queue_mapping(skb, queue_index);
		        skb->queue_mapping = queue_mapping;	

mlx5e_create_rq
	mlx5e_handle_rx_cqe_mpwrq	# this function is actually called instead of mlx5e_handle_rx_cqe

                if (mlx5e_is_vf_vport_rep(priv))
                        rq->handle_rx_cqe = mlx5e_handle_rx_cqe_rep;
                else
                        rq->handle_rx_cqe = mlx5e_handle_rx_cqe;

mlx5e_napi_poll
	mlx5e_poll_tx_cq
	mlx5e_poll_rx_cq
		mlx5e_handle_rx_cqe_mpwrq
	mlx5e_post_rx_wqes

mlx5e_alloc_rx_mpwqe
mlx5e_alloc_rx_wqe	# for ConnectX-4
	mlx5e_handle_rx_cqe
		skb_from_cqe 
			build_skb

mlxconfig -d 0a:00.0 q

mount -o loop,rw ofed.iso /mnt/mlx

mlx5e_priv

mlx5e_xmit

mlx5e_nic_profile
	mlx5e_nic_enable
		mlx5_lag_add
			register_netdevice_notifier

static struct pci_driver mlx5_core_driver = {
        .name           = DRIVER_NAME,
        .id_table       = mlx5_core_pci_table,
        .probe          = init_one,
        .remove         = remove_one,
        .shutdown       = shutdown,
        .err_handler    = &mlx5_err_handler,
        .sriov_configure   = mlx5_core_sriov_configure,
};

static struct mlx5e_profile mlx5e_rep_profile = {
	.init                   = mlx5e_init_rep,
	.init_rx                = mlx5e_init_rep_rx,
	.cleanup_rx             = mlx5e_cleanup_rep_rx,
	.init_tx                = mlx5e_init_rep_tx,
	.cleanup_tx             = mlx5e_cleanup_nic_tx,
	.update_stats           = mlx5e_rep_update_stats,
	.max_nch                = mlx5e_get_rep_max_num_channels,
	.max_tc                 = 1,
};

static const struct mlx5e_profile mlx5e_nic_profile = {
        .init              = mlx5e_nic_init,
        .cleanup           = mlx5e_nic_cleanup,
        .init_rx           = mlx5e_init_nic_rx,
        .cleanup_rx        = mlx5e_cleanup_nic_rx,
        .init_tx           = mlx5e_init_nic_tx,
        .cleanup_tx        = mlx5e_cleanup_nic_tx,
        .enable            = mlx5e_nic_enable,
        .disable           = mlx5e_nic_disable,
        .update_stats      = mlx5e_update_stats,
        .max_nch           = mlx5e_get_max_num_channels,
        .max_tc            = MLX5E_MAX_NUM_TC,
};

https://community.mellanox.com/docs/DOC-2294
mlxconfig -d /dev/mst/mt4115_pciconf0 set LINK_TYPE_P1=2 LINK_TYPE_P2=2

static struct mlx5_interface mlx5e_interface = {
        .add       = mlx5e_add,
        .remove    = mlx5e_remove,
        .attach    = mlx5e_attach,
        .detach    = mlx5e_detach,
        .event     = mlx5e_async_event,
        .protocol  = MLX5_INTERFACE_PROTOCOL_ETH,
        .get_dev   = mlx5e_get_netdev,
};

static const struct net_device_ops mlx5e_netdev_ops_basic = {
        .ndo_open                = mlx5e_open,
        .ndo_stop                = mlx5e_close,
        .ndo_start_xmit          = mlx5e_xmit,
        .ndo_setup_tc            = mlx5e_ndo_setup_tc,
        .ndo_select_queue        = mlx5e_select_queue,
        .ndo_get_stats64         = mlx5e_get_stats,
        .ndo_set_rx_mode         = mlx5e_set_rx_mode,
        .ndo_set_mac_address     = mlx5e_set_mac,
        .ndo_vlan_rx_add_vid     = mlx5e_vlan_rx_add_vid,
        .ndo_vlan_rx_kill_vid    = mlx5e_vlan_rx_kill_vid,
        .ndo_set_features        = mlx5e_set_features,
        .ndo_change_mtu          = mlx5e_change_mtu,
        .ndo_do_ioctl            = mlx5e_ioctl,
        .ndo_set_tx_maxrate      = mlx5e_set_tx_maxrate,
#ifdef CONFIG_RFS_ACCEL
        .ndo_rx_flow_steer       = mlx5e_rx_flow_steer,
#endif
        .ndo_tx_timeout          = mlx5e_tx_timeout,
        .ndo_xdp                 = mlx5e_xdp,
#ifdef CONFIG_NET_POLL_CONTROLLER
        .ndo_poll_controller     = mlx5e_netpoll,
#endif
};

mlx5e_add
	mlx5e_create_netdev
		alloc_etherdev_mqs
	mlx5e_attach
		netif_device_present
			return test_bit(__LINK_STATE_PRESENT, &dev->state); 
		mlx5e_open
			mlx5e_open_locked
				netif_set_real_num_tx_queues/netif_set_real_num_rx_queues
	register_netdev

===driver===

netdev_priv

register_netdev

===ofed===

ofed_info -s
ibv_devinfo  to show PSID board_id

[root@bjglab-18 mlx5_0]# cat /sys/class/infiniband/mlx5_0/board_id
MT_0000000009

ibv_devinfo
flint -d mlx4_0 v
flint -d mlx4_0 q	# get the PSID
flint -d mlx4_0 -i fw.bin burn

firmware version

[root@bjglab-18 net-next]# ethtool -i p2p1
driver: mlx5_core
version: 3.0-1 (January 2015)
firmware-version: 16.19.2134
expansion-rom-version:
bus-info: 0000:03:00.0
supports-statistics: yes
supports-test: yes
supports-eeprom-access: no
supports-register-dump: no
supports-priv-flags: yes

flint -d 03:00.0 q
flint -d 04:00.0 dc | grep -i name

[root@dev-r630-04 ~]# mlxuptime -d mlx5_1
Measured core frequency        : 400.392871 MHz
Device up time                 : 76:27:14.271228 [h:m:s.usec]

[root@bjglab-18 ~]# mlxfwmanager -d 03:00.0 --query
Querying Mellanox devices firmware ...

Device #1:
----------

  Device Type:      ConnectX5
  Part Number:      MCX556A-EDA_Ax
  Description:      ConnectX-5 VPI adapter card; EDR IB (100Gb/s) and 100GbE; dual-port QSFP28; PCIe4.0 x16; tall bracket; ROHS R6
  PSID:             MT_0000000009
  PCI Device Name:  03:00.0
  Base MAC:         0000248a078827ca
  Versions:         Current        Available
     FW             16.19.2134     N/A

  Status:           No matching image found


http://www.mellanox.com/supportdownloader/

perfquery

ibportstate <lid> <port>
smpquery -a <lid>
smpquery portinfo -a <lid>

sminfo to get SM lid
smpquery nd <lid> to get the switch series

ibroute

mkdir diagnet-files
ibdiagnet -pc -o diagnet-files
ibdiagnet -P all=1 -o diagnet-files

ibdiagpath -l 9.1 <lid>,<lid>
ibtracert <lid> <lid>

ibv_rc_pingpong/ibv_srq_pingpong/ibv_ud_pingpong

ib_send_lat/ib_read_lat/ib_write_lat

ib_write_bw -a # to start server
ib_write_bw -a <hostname> # to start client

===debug===

echo "file drivers/net/ethernet/mellanox/mlx5/core/cmd.c +p" > /sys/kernel/debug/dynamic_debug/control
echo "file drivers/net/ethernet/mellanox/mlx5/core/cmd.c -p" > /sys/kernel/debug/dynamic_debug/control

printk(KERN_WARNING "DEBUG: Passed %s %d \n",__FUNCTION__,__LINE__);

echo 7 > /proc/sys/kernel/printk

to debug crash enabled kernel
CONFIG_STRICT_DEVMEM=n

 Find all symbols containing the string "pipe":

    crash> sym -q pipe

 Dump the symbols of the mlx5_core module
crash> sym -m mlx5_core
crash> sym -s mlx5_core

crash> dis  tcp_transmit_skb
0xffffffff8a770410 <tcp_transmit_skb>:  nopl   0x0(%rax,%rax,1) [FTRACE NOP]
crash> sym 0xffffffff8a770410
ffffffff8a770410 (t) tcp_transmit_skb /root/chris/linux/net/ipv4/tcp_output.c: 922

Display the source code listing of the mmput() function:
    crash> dis -s mmput

display line number
crash> dis -l sys_signal

struct inet_hashinfo tcp_hashinfo


struct file_system_type {
	...
	struct file_system_type * next;
	...
};
static struct file_system_type *file_systems;
crash> p file_systems
file_systems = $4 = (struct file_system_type *) 0xffffffff8ae96800
crash> list file_system_type.next -s file_system_type.name,fs_flags 0xffffffff8ae96800
ffffffff8ae96800
  name = 0xffffffff8ac8ab04 "sysfs"
  fs_flags = 8
ffffffff8ae10460
  name = 0xffffffff8ac6ad71 "rootfs"
  fs_flags = 0

===routing===

ping www.baidu.com, ip_route_output_flow returns ffff880c834f6900

crash> rtable ffff880c834f6900
struct rtable {
  dst = {
    callback_head = {
      next = 0xffff880c834f7b00,
      func = 0x0
    },
    child = 0x0,
    dev = 0xffff880c7ec18000,
    ops = 0xffffffff81cd8640 <ipv4_dst_ops>,
    _metrics = 0xffffffff818c2301,
    expires = 0x0,
    path = 0xffff880c834f6900,
    from = 0x0,
    xfrm = 0x0,
    input = 0xffffffff816117b0 <dst_discard>,
    output = 0xffffffff81655330 <ip_output>,
    flags = 0x0,
    error = 0x0,
    obsolete = 0xffff,
    header_len = 0x0,
    trailer_len = 0x0,
    __pad3 = 0x0,
    tclassid = 0x0,
    __pad_to_align_refcnt = {0x0, 0x0},
    __refcnt = {
      counter = 0x0
    },
    __use = 0x0,
    lastuse = 0x103203a31,
    lwtstate = 0x0,
    {
      next = 0x0,
      rt_next = 0x0,
      rt6_next = 0x0,
      dn_next = 0x0
    }
  },
  rt_genid = 0x57,
  rt_flags = 0x0,
  rt_type = 0x1,
  rt_is_input = 0x0,
  rt_uses_gateway = 0x1,
  rt_iif = 0x0,
  rt_gateway = 0xa00c80a,	# 10.200.0.10
  rt_pmtu = 0x0,
  rt_table_id = 0xfe,
  rt_uncached = {
    next = 0xffff880c834f69c0,
    prev = 0xffff880c834f69c0
  },
  rt_uncached_list = 0x0
}

$ ip route
default via 10.200.0.10 dev em1
crash> net | grep ffff880c7ec18000
ffff880c7ec18000  em1    10.200.0.168

ping 192.168.1.19, ip_route_output_flow returns ffff880c58ed7300

crash> rtable ffff880c58ed7300
struct rtable {
  dst = {
    callback_head = {
      next = 0xffff880c58ed6500,
      func = 0xffffffff81219f40 <file_free_rcu>
    },
    child = 0x0,
    dev = 0xffff880c693a0000,
    ops = 0xffffffff81cd8640 <ipv4_dst_ops>,
    _metrics = 0xffffffff818c2301,
    expires = 0x0,
    path = 0xffff880c58ed7300,
    from = 0x0,
    xfrm = 0x0,
    input = 0xffffffff816117b0 <dst_discard>,
    output = 0xffffffff81655330 <ip_output>,
    flags = 0x0,
    error = 0x0,
    obsolete = 0xffff,
    header_len = 0x0,
    trailer_len = 0x0,
    __pad3 = 0x0,
    tclassid = 0x0,
    __pad_to_align_refcnt = {0x0, 0x0},
    __refcnt = {
      counter = 0x0
    },
    __use = 0x0,
    lastuse = 0x1030a4b07,
    lwtstate = 0x0,
    {
      next = 0x0,
      rt_next = 0x0,
      rt6_next = 0x0,
      dn_next = 0x0
    }
  },
  rt_genid = 0x57,
  rt_flags = 0x0,
  rt_type = 0x1,
  rt_is_input = 0x0,
  rt_uses_gateway = 0x0,
  rt_iif = 0x0,
  rt_gateway = 0x0,	# directly connected
  rt_pmtu = 0x0,
  rt_table_id = 0xfe,
  rt_uncached = {
    next = 0xffff880c58ed73c0,
    prev = 0xffff880c58ed73c0
  },
  rt_uncached_list = 0xffff880c58ed73d0
}

$ ip route
192.168.1.0/24 dev p4p1 proto kernel scope link src 192.168.1.18
crash> net | grep ffff880c693a0000
ffff880c693a0000  p4p1   192.168.1.18

===arp===


8
 0xffffffffa02917d0 : mlx5e_xmit +0x0/0xa10 [mlx5_core]
 0xffffffff81623db0 : dev_hard_start_xmit +0xa0/0x230 [kernel]
 0xffffffff8165030b : sch_direct_xmit +0xfb/0x1b0 [kernel]

 0xffffffff81624425 : __dev_queue_xmit +0x405/0x680 [kernel]
 0xffffffff816246b0 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff816a14d4 : arp_xmit +0xb4/0xc0 [kernel]
 0xffffffff816a1518 : arp_send_dst.part.17 +0x38/0x40 [kernel]
 0xffffffff816a1616 : arp_solicit +0xf6/0x2f0 [kernel]
 0xffffffff8162e06f : neigh_probe +0x4f/0x70 [kernel]
 0xffffffff8162f638 : __neigh_event_send +0x1f8/0x240 [kernel]
 0xffffffff8162f96e : neigh_resolve_output +0x12e/0x1c0 [kernel]
 0xffffffff8166f95b : ip_finish_output2 +0x17b/0x380 [kernel]
 0xffffffff8166fd26 : ip_finish_output +0x136/0x1d0 [kernel]
 0xffffffff816713e8 : ip_output +0x78/0x100 [kernel]
 0xffffffff81670ad5 : ip_local_out +0x35/0x40 [kernel]
 0xffffffff81671d99 : ip_send_skb +0x19/0x40 [kernel]
 0xffffffff81671df3 : ip_push_pending_frames +0x33/0x40 [kernel]
 0xffffffff8169a781 : raw_sendmsg +0x8e1/0xb10 [kernel]
 0xffffffff816aa697 : inet_sendmsg +0x37/0xf0 [kernel]
 0xffffffff81603de8 : sock_sendmsg +0x38/0x50 [kernel]
parms: skb=0xffff880222ff5b00 dev=0xffff88022fca0000
execname: ping
ts: 13
 0x7f8f80780803 : __sendto_nocancel +0xa/0x57 [/usr/lib64/libc-2.17.so]
 0x55b6ef3808ad [/usr/bin/ping +0x38ad/0xe000]
9
^C 0xffffffffa02917d0 : mlx5e_xmit +0x0/0xa10 [mlx5_core]
 0xffffffff81623db0 : dev_hard_start_xmit +0xa0/0x230 [kernel]
 0xffffffff8165030b : sch_direct_xmit +0xfb/0x1b0 [kernel]
 0xffffffff81624425 : __dev_queue_xmit +0x405/0x680 [kernel]
 0xffffffff816246b0 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffff816a14d4 : arp_xmit +0xb4/0xc0 [kernel]
 0xffffffff816a1518 : arp_send_dst.part.17 +0x38/0x40 [kernel]
 0xffffffff816a1616 : arp_solicit +0xf6/0x2f0 [kernel]
 0xffffffff8162e06f : neigh_probe +0x4f/0x70 [kernel]
 0xffffffff8163165f : neigh_timer_handler +0xcf/0x290 [kernel]
 0xffffffff810fcf25 : call_timer_fn +0x35/0x170 [kernel]
 0xffffffff810fd56b : run_timer_softirq +0x20b/0x490 [kernel]
 0xffffffff8174c875 : __do_softirq +0xd5/0x2ad [kernel]
 0xffffffff8108e68b : irq_exit +0xab/0xb0 [kernel]
 0xffffffff8174c2ad : smp_apic_timer_interrupt +0x3d/0x50 [kernel]
 0xffffffff8174aa53 : apic_timer_interrupt +0x93/0xa0 [kernel]



RTM_NEWNEIGH
RTNLGRP_NEIGH
NETEVENT_NEIGH_UPDATE

P725
 0xffffffff81688250 : inet_select_addr +0x0/0xd0 [kernel]
 0xffffffff81685244 : arp_solicit +0x94/0x2b0 [kernel]
 0xffffffff816128aa : neigh_probe +0x4a/0x70 [kernel]
 0xffffffff81615cea : neigh_timer_handler +0xca/0x280 [kernel]
 0xffffffff810f08e5 : call_timer_fn +0x35/0x140 [kernel]
 0xffffffff810f14d1 : run_timer_softirq +0x1e1/0x440 [kernel]
 0xffffffff8172d46d : __do_softirq +0xed/0x278 [kernel]
 0xffffffff8108b086 : irq_exit +0xb6/0xc0 [kernel]
 0xffffffff8172cf4d : smp_apic_timer_interrupt +0x3d/0x50 [kernel]
 0xffffffff8172b893 : apic_timer_interrupt +0x93/0xa0 [kernel]
 0x0 (inexact)
parms: dev=0xffff880c69340000 dst=0x1301a8c0 scope=0xfd


struct neigh_parms {
  net = {
    net = 0xffffffff81cd2640 <init_net>
  },
  dev = 0xffff880c69340000,
  list = {
    next = 0xffff880c8773b5d0,
    prev = 0xffff880c68407150
  },
  neigh_setup = 0x0,
  neigh_cleanup = 0x0,
  tbl = 0xffffffff81cd93c0 <arp_tbl>,
  sysctl_table = 0xffff880c7fe6f000,
  dead = 0x0,
  refcnt = {
    counter = 0x4
  },
  callback_head = {
    next = 0x0,
    func = 0x0
  },
  reachable_time = 0x9d6f,
  data = {0x3, 0x3, 0x0, 0x0, 0x3e8, 0x7530, 0x1388, 0xea60, 0x10000, 0x40, 0x3e8, 0x320, 0x3e8},
  data_state = {0x1fff}
}

NEIGH_VAR_DELAY_PROBE_TIME = 6
crash> eval 0x1388
hexadecimal: 1388
    decimal: 5000
      octal: 11610
     binary: 0000000000000000000000000000000000000000000000000001001110001000


neigh_hh_output

 0xffffffff816851b0 : arp_solicit +0x0/0x2b0 [kernel]
 0xffffffff816128aa : neigh_probe +0x4a/0x70 [kernel]
 0xffffffff81613bfb : __neigh_event_send +0x1eb/0x230 [kernel]
 0xffffffff8161406e : neigh_resolve_output +0x12e/0x1c0 [kernel]
 0xffffffff816539dc : ip_finish_output2 +0x17c/0x380 [kernel]
 0xffffffff81653da6 : ip_finish_output +0x136/0x1d0 [kernel]
 0xffffffff816553a6 : ip_output +0x76/0xe0 [kernel]
 0xffffffff81654b05 : ip_local_out +0x35/0x40 [kernel]
 0xffffffff8169dd6d : iptunnel_xmit +0x13d/0x1b0 [kernel]
 0xffffffffa114540d : udp_tunnel_xmit_skb +0xed/0x100 [udp_tunnel]
 0xffffffffa115c26e : vxlan_xmit_one +0x86e/0xa90 [vxlan]

 0xffffffff816851b0 : arp_solicit +0x0/0x2b0 [kernel]
 0xffffffff816128aa : neigh_probe +0x4a/0x70 [kernel]
 0xffffffff81615cea : neigh_timer_handler +0xca/0x280 [kernel]
 0xffffffff810f08e5 : call_timer_fn +0x35/0x140 [kernel]
 0xffffffff810f14d1 : run_timer_softirq +0x1e1/0x440 [kernel]
 0xffffffff8172d46d : __do_softirq +0xed/0x278 [kernel]
 0xffffffff8108b086 : irq_exit +0xb6/0xc0 [kernel]
 0xffffffff8172cf4d : smp_apic_timer_interrupt +0x3d/0x50 [kernel]
 0xffffffff8172b893 : apic_timer_interrupt +0x93/0xa0 [kernel]

dst_neigh_lookup
	ipv4_dst_op {
		ipv4_neigh_lookup

mlx5e_create_encap_header_ipv4
	mlx5e_route_lookup_ipv4
		ip_route_output_key
		ip4_dst_hoplimit
		dst_neigh_lookup

# cat /proc/sys/net/ipv4/neigh/$link/base_reachable_time
30

arp_netdev_event
neigh_changeaddr
NETDEV_CHANGEADDR

neigh_flush_dev
neigh_cleanup_and_release
neigh_release
neigh_destroy

 ip link set dev p4p1 address 24:8a:07:88:27:ca


 0xffffffff81619f20 : neigh_flush_dev.isra.36 +0x0/0x140 [kernel]
 0xffffffff8161a093 : neigh_changeaddr +0x33/0x50 [kernel]
 0xffffffff816e71b5 : ndisc_netdev_event +0x45/0x100 [kernel]
 0xffffffff810a6299 : notifier_call_chain +0x49/0x70 [kernel]
 0xffffffff810a63b6 : raw_notifier_call_chain +0x16/0x20 [kernel]
 0xffffffff816059c5 : call_netdevice_notifiers_info +0x35/0x60 [kernel]
 0xffffffff8160716c : dev_set_mac_address +0x8c/0xb0 [kernel]
 0xffffffff8161efae : do_setlink +0x3be/0xc60 [kernel]
 0xffffffff816239e4 : rtnl_newlink +0x4f4/0x8c0 [kernel]
 0xffffffff81623e5c : rtnetlink_rcv_msg +0xac/0x240 [kernel]
 0xffffffff816472dd : netlink_rcv_skb +0xed/0x120 [kernel]
 0xffffffff8161de38 : rtnetlink_rcv +0x28/0x30 [kernel]
 0xffffffff81646a41 : netlink_unicast +0x181/0x240 [kernel]
 0xffffffff81646dc2 : netlink_sendmsg +0x2c2/0x3b0 [kernel]
 0xffffffff815ed248 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815edb9a : ___sys_sendmsg +0x27a/0x290 [kernel]
 0xffffffff815ef164 : __sys_sendmsg +0x54/0x90 [kernel]
 0xffffffff815ef1b2 : sys_sendmsg +0x12/0x20 [kernel]
 0xffffffff81003a07 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff817335a7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
parms: dev=0xffff880c6a720000 tbl=?
execname: ip
ts: 1
 0x7fcf9d7617a0 : __sendmsg_nocancel +0x7/0x57 [/usr/lib64/libc-2.17.so]
 0x4441b4 : __rtnl_talk +0xc4/0x3f0 [/usr/sbin/ip]
 0x41efc7 : iplink_modify +0x267/0x4b0 [/usr/sbin/ip]
 0x41f422 : do_iplink +0xe2/0xf80 [/usr/sbin/ip]
 0x408504 : do_cmd +0x44/0x80 [/usr/sbin/ip]
 0x40801f : main +0x20f/0x577 [/usr/sbin/ip]
 0x7fcf9d68ab35 : __libc_start_main +0xf5/0x1c0 [/usr/lib64/libc-2.17.so]
 0x4083b0 : _start +0x29/0x39 [/usr/sbin/ip]


 0xffffffff8161bfa0 : __neigh_create +0x0/0x590 [kernel]
 0xffffffff81657fd7 : ip_finish_output2 +0x197/0x390 [kernel]
 0xffffffff81659686 : ip_finish_output +0x136/0x1e0 [kernel]
 0xffffffff8165a136 : ip_output +0x76/0xe0 [kernel]
 0xffffffff81659885 : ip_local_out +0x35/0x40 [kernel]
 0xffffffff816a1f8e : iptunnel_xmit +0x13e/0x1a0 [kernel]
 0xffffffffa116142c : udp_tunnel_xmit_skb +0xfc/0x110 [udp_tunnel]
 0xffffffffa116b3f7 : vxlan_xmit_one +0x7e7/0xa40 [vxlan]
 0xffffffffa116c7ca : vxlan_xmit +0x35a/0x0 [vxlan]
 0xffffffff8160d9c1 : dev_hard_start_xmit +0xa1/0x210 [kernel]
 0xffffffff8160e130 : __dev_queue_xmit +0x510/0x630 [kernel]
 0xffffffff8160e260 : dev_queue_xmit +0x10/0x20 [kernel]
 0xffffffffa114a792 : ovs_vport_send +0xc2/0x150 [openvswitch]
 0xffffffffa113c103 : do_output +0x53/0xf0 [openvswitch]
 0xffffffffa113d5cc : do_execute_actions +0x9bc/0x9d0 [openvswitch]
 0xffffffffa113d9c0 : ovs_execute_actions +0x40/0x120 [openvswitch]
 0xffffffffa1141334 : ovs_dp_process_packet +0x84/0x120 [openvswitch]
 0xffffffffa114a673 : ovs_vport_receive +0x73/0xd0 [openvswitch]
 0xffffffffa114b093 : netdev_frame_hook +0xd3/0x160 [openvswitch]
 0xffffffff8160c3a6 : __netif_receive_skb_core +0x1e6/0xa20 [kernel]
parms: tbl=0xffffffff81cd9a40 pkey=0xffff880c8ec833cc dev=0xffff880c6a720000 want_ref=0x0
execname: swapper/10


neighbour.primary_key is the IP address

neigh_update_hhs is called when changing mac address

crash> net_device.header_ops ffff880c6a720000
  header_ops = 0xffffffff818c4740 <eth_header_ops>
crash> eth_header_ops
eth_header_ops = $5 = {
  create = 0xffffffff81638600 <eth_header>,
  parse = 0xffffffff81638530 <eth_header_parse>,
  cache = 0xffffffff81638560 <eth_header_cache>,
  cache_update = 0xffffffff816385c0 <eth_header_cache_update>,
  validate = 0x0
}

#define NUD_INCOMPLETE  0x01
#define NUD_REACHABLE   0x02
#define NUD_STALE       0x04
#define NUD_DELAY       0x08
#define NUD_PROBE       0x10
#define NUD_FAILED      0x20

 0xffffffff8161b2b0 : neigh_update +0x0/0x5c0 [kernel]
 0xffffffff8168a274 : arp_process +0x224/0x720 [kernel]
 0xffffffff8168a8d0 : arp_rcv +0x140/0x1c0 [kernel]
 0xffffffff8160c556 : __netif_receive_skb_core +0x396/0xa20 [kernel]
 0xffffffff8160cbf8 : __netif_receive_skb +0x18/0x60 [kernel]
 0xffffffff8160e2cf : netif_receive_skb_internal +0x4f/0x3e0 [kernel]
 0xffffffff8160f17d : napi_gro_receive +0xcd/0x140 [kernel]
 0xffffffffa01ae811 : mlx5e_handle_rx_cqe_mpwrq +0x4a1/0x820 [mlx5_core]
 0xffffffffa01aeb18 : mlx5e_handle_rx_cqe_mpwrq +0x7a8/0x820 [mlx5_core]
 0xffffffffa01aff9a : mlx5e_rx_am +0x2ea/0x2f0 [mlx5_core]
 0xffffffff8160eb2c : net_rx_action +0x26c/0x3b0 [kernel]
 0xffffffff81736df9 : __irqentry_text_end +0xc9/0x269 [kernel]
 0xffffffff8108bf35 : irq_exit +0xa5/0xb0 [kernel]
 0xffffffff81735f91 : do_IRQ +0x51/0xd0 [kernel]
 0xffffffff81733e93 : ret_from_intr +0x0/0x19 [kernel]
 0x0 (inexact)
parms: neigh=0xffff880aa005b600 lladdr=0xffff880bb60055d6 new=0x2 flags=0x0 nlmsg_pid=0x0

crash> neighbour 0xffff880aa005b600

  nud_state = 0x8,

  hh = {
    hh_len = 0xe,
    hh_lock = {
      seqcount = {
        sequence = 0x0
      },
      lock = {
        {
          rlock = {
            raw_lock = {
              val = {
                counter = 0x0
              }
            }
          }
        }
      }
    },
    hh_data = {0x6adfb074959e0000, 0x85018e2d02502, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
  },

  output = 0xffffffff81619240 <neigh_resolve_output>,
  ops = 0xffffffff818c6820 <arp_hh_ops>,
  rcu = {
    next = 0x0,
    func = 0x0
  },
  dev = 0xffff880c85800000,
  primary_key = 0xffff880aa005b758 "\001\001\001\v"
}

crash> neighbour.ha 0xffff880aa005b600 -o
struct neighbour {
  [ffff880aa005b6a0] unsigned char ha[32];
}
crash> rd -8 ffff880aa005b6a0 6
ffff880aa005b6a0:  9e 95 74 b0 df 6a                                 ..t..j

crash> arp_hh_ops
arp_hh_ops = $4 = {
  family = 0x2,
  solicit = 0xffffffff816899a0 <arp_solicit>,
  error_report = 0xffffffff81689310 <arp_error_report>,
  output = 0xffffffff81619240 <neigh_resolve_output>,
  connected_output = 0xffffffff81619240 <neigh_resolve_output>
}

crash> p neigh_tables
neigh_tables = $3 =
 {0xffffffff81cd9a40 <arp_tbl>, 0xffffffff81cdec60 <nd_tbl>, 0x0}
crash> neigh_table  0xffffffff81cd9a40
crash> neigh_table  arp_tbl

crash> neigh_table.nht  arp_tbl
  nht = 0xffff880bb65c9900
crash> neigh_hash_table  0xffff880bb65c9900
struct neigh_hash_table {
  hash_buckets = 0xffff880c7f6c2900,
  hash_shift = 0x5,
  hash_rnd = {0x8b82355f, 0xdf4571fd, 0x12153b3b, 0xe5a068dd},
  rcu = {
    next = 0x0,
    func = 0x0
  }
}
crash> rd 0xffff880c7f6c2900 32
ffff880c7f6c2900:  0000000000000000 0000000000000000   ................
ffff880c7f6c2910:  0000000000000000 0000000000000000   ................
ffff880c7f6c2920:  0000000000000000 ffff880a9b63f800   ..........c.....
ffff880c7f6c2930:  ffff880b11898600 0000000000000000   ................
ffff880c7f6c2940:  0000000000000000 ffff880b0179dc00   ..........y.....
ffff880c7f6c2950:  0000000000000000 ffff880b4a81e000   ...........J....
ffff880c7f6c2960:  0000000000000000 ffff880b00e8ee00   ................
ffff880c7f6c2970:  0000000000000000 ffff880afdef3400   .........4......
ffff880c7f6c2980:  0000000000000000 0000000000000000   ................
ffff880c7f6c2990:  0000000000000000 0000000000000000   ................
ffff880c7f6c29a0:  ffff880b00e8ea00 0000000000000000   ................
ffff880c7f6c29b0:  0000000000000000 0000000000000000   ................
ffff880c7f6c29c0:  0000000000000000 ffff880b728a7e00   .........~.r....
ffff880c7f6c29d0:  ffff880b00ebe000 ffff880b102c7000   .........p,.....
ffff880c7f6c29e0:  ffff880b102dba00 0000000000000000   ..-.............
ffff880c7f6c29f0:  ffff880aa005b600 0000000000000000   ................

crash> neighbour ffff880a9b63f800

same as 

crash> net -a


include/uapi/linux/if_arp.h

struct arphdr {
        __be16          ar_hrd;         /* format of hardware address   */
        __be16          ar_pro;         /* format of protocol address   */
        unsigned char   ar_hln;         /* length of hardware address   */
        unsigned char   ar_pln;         /* length of protocol address   */
        __be16          ar_op;          /* ARP opcode (command)         */

#if 0
         /*
          *      Ethernet looks like this : This bit is variable sized however...
          */
        unsigned char           ar_sha[ETH_ALEN];       /* sender hardware address      */
        unsigned char           ar_sip[4];              /* sender IP address            */
        unsigned char           ar_tha[ETH_ALEN];       /* target hardware address      */
        unsigned char           ar_tip[4];              /* target IP address            */
#endif

};

====== Packet ======
Packet size: 65 bytes
ffffffff ffff0225 d0e21850 08060001
08000604 00010225 d0e21850 01010101
00000000 00000101 01130000 00000000
00000000 00000000 00000000 824798d6
00000000

#define ARPHRD_ETHER    1               /* Ethernet 10Mbps              */
#define ETH_P_IP 0x0800

ar_hln = 6
ar_pln = 4

/* ARP protocol opcodes. */
#define ARPOP_REQUEST   1               /* ARP request                  */
#define ARPOP_REPLY     2               /* ARP reply                    */
#define ARPOP_RREQUEST  3               /* RARP request                 */
#define ARPOP_RREPLY    4               /* RARP reply                   */
#define ARPOP_InREQUEST 8               /* InARP request                */
#define ARPOP_InREPLY   9               /* InARP reply                  */
#define ARPOP_NAK       10              /* (ATM)ARP NAK                 */


find /proc/ -name proxy_arp -exec echo {} \; -exec cat {} \;

[root@localhost network-scripts]# sysctl -a | grep gc_thresh
net.ipv4.neigh.default.gc_thresh1 = 128
net.ipv4.neigh.default.gc_thresh2 = 512
net.ipv4.neigh.default.gc_thresh3 = 1024
net.ipv4.route.gc_thresh = -1
net.ipv4.xfrm4_gc_thresh = 32768
net.ipv6.neigh.default.gc_thresh1 = 128
net.ipv6.neigh.default.gc_thresh2 = 512
net.ipv6.neigh.default.gc_thresh3 = 1024
net.ipv6.route.gc_thresh = 1024
net.ipv6.xfrm6_gc_thresh = 32768

===kernel===

cat /proc/kallsyms

# CONFIG_STRICT_DEVMEM is not set
# CONFIG_MODVERSIONS is not set
CONFIG_NET_SWITCHDEV=y

===skills===

rpm -e --nodeps  kernel-headers-4.13.0_rc5_00103_g57df82c-1.x86_64

	print_hex_dump(KERN_WARNING, "mlmsg: ",
		DUMP_PREFIX_ADDRESS, 32, 4, n,
		n->nlmsg_len, 0);

INIT_LIST_HEAD

IS_ERR
PTR_ERR
ERR_PTR

sysconf

WARN_ON(index < 0);

mlxfwup

sleep .5

dump_stack()

ifstat

4.10-rc1 4.10-rc2 4.10-rc3 .. 4.10 (4.10.1 4.10.2 4.10.3) 4.11-rc1 4.11-rc2 .. 4.11 (linus tree) 4.12-rc1 (net-next)  4.11.1 (linux-stable tree)

dmidecode

msleep(250);

-			msleep(1);
+			usleep_range(1000, 2000);


rxdump -d 03:00.0 -s 0

[root@bjglab-18 ~]# rpm -qf /usr/bin/rxdump
mft-int-4.6.0-46.x86_64

screen -x

   2    802  include/linux/kernel.h <<min_t>>
             #define min_t(type, x, y) \

for_each_set_bit


lscpu
nproc
dmidecode -t 4
cpuid
inxi

yum install iptraf

make headers_install ARCH=i386 INSTALL_HDR_PATH=/usr

sudo apt-get install grub-customizer

chkconfig NetworkManager off

rpm -ql systemtap

[root@bjglab-18 ~]# ls -l /sys/class/net/em1/device/driver/module
lrwxrwxrwx. 1 root root 0 Mar 15 02:39 /sys/class/net/em1/device/driver/module -> ../../../../module/igb

===hosts===

TYPE=Ethernet
BOOTPROTO=static
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=em1
UUID=69b82430-695f-4650-8249-813146f59b80
DEVICE=em1
ONBOOT=yes

IPADDR=10.12.205.13
GATEWAY=10.12.205.1
NETMASK=255.255.255.0
DNS1=10.12.68.102
DNS2=10.12.68.101

DOMAIN="mtbc.labs.mlnx labs.mlnx mlnx lab.mtl.com mtl.com"

===boot===

/lib/systemd/system/NetworkManager-wait-online.service

http://xmodulo.com/how-to-configure-linux-bridge-interface.html

===gdm===

service gdm status
service gdm stop
ps aux | grep gnome
service gdm start


/etc/inittab

systemctl get-default
graphical.target

systemctl get-default
systemctl set-default multi-user.target

===kdump===

[root@dev-r630-03 ~]# kexec1
bzImage64
do_bzImage64_load is called
add_memmap: type: 0, addr: 1000, size: 9b000, align: 400
add_memmap: type: 0, addr: 13000000, size: 20000000, align: 400
add_memmap: type: 3, addr: 7af0b000, size: a30000, align: 400
add_memmap: type: 2, addr: 7b93b000, size: 17c000, align: 400
add_memmap: type: 2, addr: 7bae9000, size: 16000, align: 400

Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: do_bzImage64_load is called
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: load_crashdump_segments is called
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: add_memmap: type: 0, addr: 1000, size: 9b000, align: 400
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: add_memmap: type: 0, addr: 14000000, size: 20000000, align: 400
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: add_memmap: type: 3, addr: 7af0b000, size: a30000, align: 400
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: add_memmap: type: 2, addr: 7b93b000, size: 17c000, align: 400
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: add_memmap: type: 2, addr: 7bae9000, size: 16000, align: 400
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: kexec: loaded kdump kernel
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx kdumpctl[12902]: Starting kdump: [OK]
Aug 14 21:03:01 dev-r630-04.mtbc.labs.mlnx systemd[1]: Started Crash recovery kernel arming.
[root@dev-r630-04 ~]#

ver=4.14.0-rc4+
/sbin/kexec -p '--command-line=BOOT_IMAGE=/vmlinuz-$ver								\
	root=/dev/mapper/centos-root ro rd.lvm.lv=centos/root rd.lvm.lv=centos/swap intel_iommu=on irqpoll	\
	nr_cpus=1 reset_devices cgroup_disable=memory mce=off numa=off udev.children-max=2 panic=10		\
	rootflags=nofail acpi_no_memhotplug transparent_hugepage=never disable_cpu_apicid=0'			\
	--initrd=/boot/initramfs-${ver}kdump.img /boot/vmlinuz-$ver

/sys/kernel/kexec_crash_size

echo 1 > /proc/sys/kernel/sysrq
echo c > /proc/sysrq-trigger

[root@localhost boot]# systemctl status kdump
● kdump.service - Crash recovery kernel arming
   Loaded: loaded (/usr/lib/systemd/system/kdump.service; enabled; vendor preset: enabled)
   Active: active (exited) since Tue 2017-05-23 02:19:19 EDT; 9min ago
 Main PID: 1192 (code=exited, status=0/SUCCESS)
   CGroup: /system.slice/kdump.service

May 23 02:19:18 localhost.localdomain dracut[3733]: drwxr-xr-x   2 root     root            0 May 23 02:19 usr/share/zoneinfo/America
May 23 02:19:18 localhost.localdomain dracut[3733]: -rw-r--r--   1 root     root         3519 Oct  3  2016 usr/share/zoneinfo/America/New_York
May 23 02:19:18 localhost.localdomain dracut[3733]: drwxr-xr-x   2 root     root            0 May 23 02:18 var
May 23 02:19:18 localhost.localdomain dracut[3733]: lrwxrwxrwx   1 root     root           11 May 23 02:18 var/lock -> ../run/lock
May 23 02:19:18 localhost.localdomain dracut[3733]: lrwxrwxrwx   1 root     root            6 May 23 02:18 var/run -> ../run
May 23 02:19:18 localhost.localdomain dracut[3733]: ========================================================================
May 23 02:19:18 localhost.localdomain dracut[3733]: *** Creating initramfs image file '/boot/initramfs-3.10.0-514.el7.x86_64kdump.img' done ***
May 23 02:19:19 localhost.localdomain kdumpctl[1192]: kexec: loaded kdump kernel
May 23 02:19:19 localhost.localdomain kdumpctl[1192]: Starting kdump: [OK]
May 23 02:19:19 localhost.localdomain systemd[1]: Started Crash recovery kernel arming.

===crash===

crash> foreach bt

print_struct()
output *(struct mlx5e_priv *)0xffff8810020e08c0

STRUCT_SIZE("mlx5e_priv")

gdb_get_datatype
show_net_devices_v3

crash> list ffff88021faf60f8 -l mlx5_eq.list -s mlx5_eq.irqn
ffff88021faf60f8
  irqn = 0
ffff88021fee1350
  irqn = 41
ffff88021f383e50
  irqn = 42
ffff88021f382450
  irqn = 43
ffff88021f382950
  irqn = 44
ffff88021f382150
  irqn = 45
ffff88021f383450
  irqn = 46
ffff88021f382d50
  irqn = 47
ffff88021f383250
  irqn = 48
ffff88021f383a50
  irqn = 49
ffff88021f382050
  irqn = 50
ffff88021f382650
  irqn = 51
ffff88021f383350
  irqn = 52

[root@bjglab-18 ~]# ls /proc/sysrq-trigger
/proc/sysrq-trigger
[root@bjglab-18 ~]# cat  /proc/sys/kernel/sysrq
16

https://en.wikipedia.org/wiki/Magic_SysRq_key

list module.list -H modules -s module.name

git clone git://github.com/crash-utility/crash.git
https://bugzilla.redhat.com/show_bug.cgi?id=1421657

git clone git://sourceware.org/git/systemtap.git 

===sysfs===

/sys/class/net/$rep1/queues/tx-0/byte_queue_limits

===flow===

esw_create_legacy_fdb_table
	table_size = BIT(MLX5_CAP_ESW_FLOWTABLE_FDB(dev, log_max_ft_size));
	MLX5_SET(create_flow_group_in, flow_group_in, end_flow_index, table_size - 3);

	[256921.683047] alloc_flow_group: fg->max_ftes: 3ffffe

about 4M

 0xffffffffa07589b0 : mlx5_cmd_create_flow_table +0x0/0x150 [mlx5_core]
 0xffffffffa075b0bf : __mlx5_create_flow_table.constprop.29 +0x22f/0x460 [mlx5_core]
 0xffffffffa075b359 : mlx5_create_auto_grouped_flow_table +0x69/0x90 [mlx5_core]
 0xffffffffa0766df6 : esw_create_offloads_fast_fdb_table +0xa6/0x180 [mlx5_core]
 0xffffffffa07677f2 : esw_offloads_init +0xa2/0x680 [mlx5_core]
 0xffffffffa076542d : mlx5_eswitch_enable_sriov +0xed/0x5c0 [mlx5_core]
 0xffffffffa07682b6 : mlx5_devlink_eswitch_mode_set +0xe6/0x200 [mlx5_core]
 0xffffffffa04b8305 : devlink_nl_cmd_eswitch_set_doit +0x45/0xb0 [devlink]
 0xffffffff81643f68 : genl_family_rcv_msg +0x1f8/0x3d0 [kernel]
 0xffffffff8164418c : genl_rcv_msg +0x4c/0x90 [kernel]
 0xffffffff81643647 : netlink_rcv_skb +0xe7/0x120 [kernel]
 0xffffffff81643d58 : genl_rcv +0x28/0x40 [kernel]
 0xffffffff81642dbc : netlink_unicast +0x18c/0x240 [kernel]
 0xffffffff81643135 : netlink_sendmsg +0x2c5/0x3b0 [kernel]
 0xffffffff815e9f18 : sock_sendmsg +0x38/0x50 [kernel]
 0xffffffff815ea501 : SYSC_sendto +0x101/0x190 [kernel]
 0xffffffff815eb09e : SyS_sendto +0xe/0x10 [kernel]
 0xffffffff81003bb7 : do_syscall_64 +0x67/0x150 [kernel]
 0xffffffff8172b8a7 : return_from_SYSCALL_64 +0x0/0x6a [kernel]
 0x0 (inexact)
parms: dev=0xffff8809a6d00060 vport=0x0 op_mod=0x0 type=0x4 level=0x0 log_size=0x12 next_ft=0x0 table_id=0xffff880a316e5668 flags=0x1
execname: devlink

esw_create_offloads_fast_fdb_table
        esw_size = min_t(int, MLX5_CAP_GEN(dev, max_flow_counter) * ESW_OFFLOADS_NUM_GROUPS,
                         1 << MLX5_CAP_ESW_FLOWTABLE_FDB(dev, log_max_ft_size));

        printk(KERN_WARNING "%s: esw_size: %x", __func__, esw_size);
        if (esw->offloads.encap != DEVLINK_ESWITCH_ENCAP_MODE_NONE)
                flags |= MLX5_FLOW_TABLE_TUNNEL_EN;

        fdb = mlx5_create_auto_grouped_flow_table(root_ns, FDB_FAST_PATH,
                                                  esw_size,
                                                  ESW_OFFLOADS_NUM_GROUPS, 0,
                                                  flags);

create_autogroup
        if (ft->autogroup.num_groups < ft->autogroup.required_groups)
                /* We save place for flow groups in addition to max types */
                group_size = ft->max_fte / (ft->autogroup.required_groups + 1);
create_flow_group_common
alloc_flow_group

vlan to l2 to tcp

fs_node 0xffff88063bb0fbc0
mlx5_flow_namespace 0xffff88063bb0fbc0
FS_TYPE_NAMESPACE
        ||
        \/
fs_node 0xffff88052c7a9280
fs_prio 0xffff88052c7a9280
FS_TYPE_PRIO
        ||
        \/
fs_node 0xffff88052c7a9080
FS_TYPE_NAMESPACE
        ||
        \/
fs_node 0xffff88052c7a9100
fs_prio 0xffff88052c7a9100
FS_TYPE_PRIO
  num_levels = 1,
  start_level = 30,
  prio = 0,
  num_ft = 1
        ||
        \/
fs_node 0xffff880bdd667700
mlx5_flow_table 0xffff880bdd667700
    type = FS_TYPE_FLOW_TABLE,

  id = 8,
  vport = 0,
  max_fte = 1024,
  level = 30,
  type = FS_FT_NIC_RX,

        ||
        \/
fs_node 0xffff880b93d59c00
mlx5_flow_group 0xffff880b93d59c00 -x
  type = FS_TYPE_FLOW_GROUP,
        ||
        \/
fs_node 0xffff880b93d5a800
fs_fte 0xffff880b93d5a800 -x
  type = FS_TYPE_FLOW_ENTRY,
        ||
        \/
 fs_node 0xffff880bda6dc240
mlx5_flow_rule 0xffff880bda6dc240
  type = FS_TYPE_FLOW_DEST,

===stap===

https://sourceware.org/systemtap/examples/profiling/latencytap.stp

run_make_cmd
stap_system

===nc===

[root@bjglab-18 ~]#  nc -l -p 80 < /dev/zero
[root@bjglab-19 ~]#  nc 1.1.1.18 80 > /dev/null

iptraf

===iptables===

systemctl stop iptables
systemctl disable iptables

systemctl stop firewalld
systemctl disable firewalld
yum install iptables-services
systemctl start iptables
systemctl enable iptables
iptables -L INPUT --line-numbers 
iptables -I INPUT 5 -p udp --dport 4789 -j ACCEPT
 /usr/libexec/iptables/iptables.init save

iptables -L INPUT --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED
2    ACCEPT     icmp --  anywhere             anywhere
3    ACCEPT     all  --  anywhere             anywhere
4    ACCEPT     tcp  --  anywhere             anywhere             state NEW tcp dpt:ssh
5    REJECT     all  --  anywhere             anywhere             reject-with icmp-host-prohibited

iptables -I INPUT 5 -p udp --dport 4789 -j ACCEPT

/usr/libexec/iptables/iptables.init save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]

iptables -L INPUT --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED
2    ACCEPT     icmp --  anywhere             anywhere
3    ACCEPT     all  --  anywhere             anywhere
4    ACCEPT     tcp  --  anywhere             anywhere             state NEW tcp dpt:ssh
5    ACCEPT     udp  --  anywhere             anywhere             udp dpt:4789
6    REJECT     all  --  anywhere             anywhere             reject-with icmp-host-prohibited

iptables -I INPUT 5 -p tcp --dport 20000 -j ACCEPT

iptables -S
iptables -F
iptables -X

iptables -I INPUT 1 -p udp --dport 4789 -j ACCEPT
iptables -I INPUT 2 -p tcp --dport 20000 -j ACCEPT

===sockperf===

Server side:
[root@gen-l-vrt-106-005 ~]# sockperf server --ip=11.137.134.5

Client side:
[root@gen-l-vrt-107-005 ~]# for i in $(seq 0 21) ; do sockperf tp --ip=11.137.134.5 --port=1000$i --pps=max --msg-size=14 -t 60 --sender-affinity $i & done | grep Rate | awk '{SUM+=$6} END { print "Total: " SUM "Mpps" }'
Total: 9280130Mpps

---
server
sockperf sr -i 1.1.1.13

client
for C in {0..7} ;   do ( taskset -c $C sockperf tp -i 1.1.1.13 -m 14 -t 10  & ) ; done

===performance===

For high performance capture they can use DPDK:
https://software.intel.com/en-us/articles/dpdk-packet-capture-framework
https://github.com/dpdkcap/dpdkcap

# ethtool  -c $link
Coalesce parameters for ens9:
Adaptive RX: on  TX: off
stats-block-usecs: 0
sample-interval: 0
pkt-rate-low: 0
pkt-rate-high: 0

rx-usecs: 8
rx-frames: 128
rx-usecs-irq: 0
rx-frames-irq: 0

tx-usecs: 16
tx-frames: 32
tx-usecs-irq: 0
tx-frames-irq: 0

rx-usecs-low: 0
rx-frame-low: 0
tx-usecs-low: 0
tx-frame-low: 0

rx-usecs-high: 0
rx-frame-high: 0
tx-usecs-high: 0
tx-frame-high: 0

alias tune1="ethtool -C $link adaptive-rx off rx-usecs 64 rx-frames 128 tx-usecs 64 tx-frames 32"
alias tune2="ethtool -C $link adaptive-rx on  rx-usecs  8 rx-frames 128 tx-usecs 16 tx-frames 32"

https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Performance_Tuning_Guide/s-cpu-irq.html

# grep com /proc/interrupts
 36:         20          0          0          0          0          0          0          0          0          0          0          0   PCI-MSI 147460-edge      mlx5_comp0@pci:0000:00:09.0
 37:          1          0          0          0          0          0         16          0          0          0          0          0   PCI-MSI 147461-edge      mlx5_comp1@pci:0000:00:09.0
...

echo 000001 > /proc/irq/36/smp_affinity
echo 000002 > /proc/irq/37/smp_affinity
echo 000004 > /proc/irq/38/smp_affinity
echo 000008 > /proc/irq/39/smp_affinity

function watchi
{
	watch -d -n 1 "egrep \"mlx5_comp|CPU\" /proc/interrupts"
}

ethtool -x $link
RX flow hash indirection table for ens9 with 2 RX ring(s):
    0:      0     1     0     1     0     1     0     1
    8:      0     1     0     1     0     1     0     1
   16:      0     1     0     1     0     1     0     1
   24:      0     1     0     1     0     1     0     1
   32:      0     1     0     1     0     1     0     1
   40:      0     1     0     1     0     1     0     1
   48:      0     1     0     1     0     1     0     1
   56:      0     1     0     1     0     1     0     1
   64:      0     1     0     1     0     1     0     1
   72:      0     1     0     1     0     1     0     1
   80:      0     1     0     1     0     1     0     1
   88:      0     1     0     1     0     1     0     1
   96:      0     1     0     1     0     1     0     1
  104:      0     1     0     1     0     1     0     1
  112:      0     1     0     1     0     1     0     1
  120:      0     1     0     1     0     1     0     1
RSS hash key:
64:bd:4d:ae:a4:c6:65:ac:7f:e5:33:e4:55:8f:f7:52:ee:53:eb:5c:1e:16:76:e9:65:50:56:d9:64:b7:73:44:47:e2:d7:de:c7:30:ba:29

watch -d -n 1 "ethtool -S $link | grep rx[0-9]_pack"

watch -d -n 1 "ethtool -S $link | grep \"rx[0-9]*_packets:\""

watch -d -n 1 "ethtool -S $link | grep \"tx[0-9]*_packets:\""

===rpyc===

rpyc_classic.py

===review===

https://patchwork.ozlabs.org/project/netdev/list/

===cscope===

http://cscope.sourceforge.net/large_projects.html

1 . Generate cscope.files
find /my/src -name '*.c' -o -name '*.h' > /my/db/cscope.files

2 . Run cscope on the generated result
cscope -i /my/db/cscope.files

3 . Export to environment variable
CSCOPE_DB=/my/db/cscope.out; export CSCOPE_DB 

===status===
